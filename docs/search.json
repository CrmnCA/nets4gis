[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Network Analysis for GIS",
    "section": "",
    "text": "Welcome\nThis website hosts the materials for the workshop “An Introduction to Network Analysis for GIS”. The training workshop was designed by Dr Carmen Cabrera-Arnau, Prof Francisco Rowe, Dr Rafael Prieto Curiel, Andrew Renninger and Valentina Marin Maureira.\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International.\n\n\nContact\n\nDr Carmen Cabrera-Arnau, Lecturer in Geographic Data Science\nc.cabrera-arnau [at] liverpool.ac.uk\nDepartment of Geography & Planning, University of Liverpool, UK"
  },
  {
    "objectID": "overview.html#description",
    "href": "overview.html#description",
    "title": "Overview",
    "section": "Description",
    "text": "Description\nThis website hosts the materials for the workshop “An Introduction to Network Analysis for GIS”. This training workshop was designed and is delivered by Dr. Carmen Cabrera-Arnau, Prof. Francisco Rowe, Dr. Rafael Prieto Curiel, Andrew Renninger and Valentina Marin Maureira\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International.\nContact\nDr. Carmen Cabrera-Arnau, Lecturer in Geographic Data Science\nc.cabrera-arnau [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, United Kingdom"
  },
  {
    "objectID": "overview.html#structure",
    "href": "overview.html#structure",
    "title": "1  Be prepared",
    "section": "1.1 Structure",
    "text": "1.1 Structure\n\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n15 min\nWelcome, introduction to workshop activities\n\n\n20 min\nDownloading the workshop materials from Github\n\n\n35 min\nImporting libraries, network theory basics\n\n\n10 min\nComfort break\n\n\n45 min\nThe African road network\n\n\n45 min\nExperiments and percolation\n\n\n10 min\nWrap-up"
  },
  {
    "objectID": "overview.html#before-the-workshop",
    "href": "overview.html#before-the-workshop",
    "title": "1  Come prepared",
    "section": "1.2 Before the workshop",
    "text": "1.2 Before the workshop\n\n\n\n\n\n\nImportant\n\n\n\nPlease make sure you download and install the most recent version of R, RStudio and Quarto on the computer that you will be using during the workshop, and install the indicated R packages – see detailed instructions below.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll three software packages are open and free to use.\n\n\nR\nYou can download R here. Make sure you select the appropriate version for your Operating System: Windows, MacOS (Apple silicon M1/M2 or older intel Macs). For example, if you use a macOS laptop with an M1 processor, click on ‘Download R for macOS’ and then, click the link to download the installer file (.pkg extension for macOS) under the header ‘For Apple silicon (M1/M2) Macs’. You can then open the installer and follow the instructions that you will be prompted with. For Windows users, click on ‘install R for the first time’ and follow the prompts.\nRStudio\nYou will also need to download RStudio Desktop (or simply RStudio), which is an integrated development environment to help you write code in R more easily. To download RStudio, follow this link and scroll down to the section titled ‘All Installers and Tarballs’. Download the appropriate installer file according to your Operating System. Then, open the installer and follow the installation instructions that you will be prompted with.\nQuarto\nDownload Quarto from this website. Quarto is a publishing system that will allow you to open and work on the computational notebooks for the workshop. On ‘Step 1’ on the website, download the version of Quarto that matches your Operating System. Open the installer file, run it and follow the prompts.\nR packages\nOnce you have installed R, you will need to install some R extensions, known as packages, that will be useful for the applications explored in this workshop. The packages you need to install are:\n\ntidyverse\nggthemes\n…\n\nTo install the packages, open RStudio. On the console window (normally at the bottom left), write the following command: install.packages(\"name of package\"). Make sure you replace “name of package” by the actual name of the package that you want to install e.g. install.packages(\"tidyverse\"). Then, press enter and repeat this process until you have installed all the packages in the list.\nYou can also install all the packages by copying and running the code below:\n\nlist.of.packages.cran &lt;- c(\n   \"tidyverse\",\n   \"ggthemes\"\n)\n\nnew.packages.cran &lt;- list.of.packages.cran[!(list.of.packages.cran %in% installed.packages()[,\"Package\"])]\nif(length(new.packages.cran)) install.packages(new.packages.cran)\n\nfor(i in 1:length(list.of.packages.cran)) {\n  library(list.of.packages.cran[i], character.only = T)\n}\n\nYou can load all the packages by copying and running the code below:\n\ndeps &lt;- list(\n   \"tidyverse\",\n   \"ggthemes\"\n)\n\nfor(lib in deps){library(lib, character.only = TRUE)}\n\n\n\n\n\n\n\nImportant\n\n\n\nFurther instructions on how to download the workshop material from Github will be given during the workshop."
  },
  {
    "objectID": "overview.html#during-the-workshop",
    "href": "overview.html#during-the-workshop",
    "title": "Overview",
    "section": "During the workshop",
    "text": "During the workshop\nAll the workshop material will be made available on this website. Further instructions on how to download the material will be given during the workshop."
  },
  {
    "objectID": "data-description.html#introduction-to-digital-footprint-data",
    "href": "data-description.html#introduction-to-digital-footprint-data",
    "title": "1  Meta-Facebook data introduction",
    "section": "1.1 Introduction to digital footprint data",
    "text": "1.1 Introduction to digital footprint data\nA digital footprint refers to the trail of digital activities and information left by individuals as they interact with digital platforms and services (Rowe, Cabrera-Arnau, and Piestrostefani 2023). It encompasses data generated through online activities such as browsing history, social media interactions, location tracking, and other digital transactions. The cumulative collection of data forms a digital profile that provides insights into an individual’s online behavior, preferences, and activities. This data can also be aggregated to shed light into macro structural processes and trends, such as urban mobility, consumer demand, transport usage, population ageing and decline.\nIn particular, digital footprint data can be harnessed to analyse human mobility patterns, including patterns of internal mobility within a specific geographical area. By leveraging data from sources such as mobile devices, transportation apps, and geolocation services, we can gain a deeper understanding of how individuals move within a region. For example, digital footprint data can reveal the spatiotemporal patterns of commuting behaviour, the popularity of a certain route connecting two locations, the likelihood that a certain location experiences congestion at a certain time of the day, and even the impact of external factors such as weather conditions, public events or COVID-19 on mobility. Understanding human mobility patterns is therefore key to support fundamental human activities, including urban planning, transportation, service delivery, public health and sustainability. For an extended discussion of digital footprint data, see Rowe, Cabrera-Arnau, and Piestrostefani (2023)."
  },
  {
    "objectID": "data-description.html#meta-facebook-data",
    "href": "data-description.html#meta-facebook-data",
    "title": "1  Meta-Facebook data introduction",
    "section": "1.2 Meta-Facebook data",
    "text": "1.2 Meta-Facebook data\nThe social media platform Facebook, with its vast user base, offers unique advantages for analysing human mobility. In the course of providing services to their users, many smartphones and smartphone apps regularly collect precise location information. In the case of Facebook, people have an option of whether or not to provide this information to Facebook (“Learn about Your Location Privacy | Privacy Center | Manage Your Privacy on Facebook, Instagram and Messenger | Facebook Privacy”). Location data is used to provide a variety of services, including helping people find nearby friends, information about nearby Wi-Fi hotspots, and location-relevant ads. This data also enables targeting of AMBER alerts and prompts to check-in as “safe” after a hazard event. In addition to powering Facebook product features, this location data can provide insights about how populations are affected by hazard events as they happen (Maas et al. 2019).\nThrough Meta’s Data for Good programme, Facebook’s parent company, Meta Platforms Inc., provides tools built from privacy-protected data on the Facebook platform, as well as tools developed using commercially and publicly available sources like satellite imagery and census data. In particular, Data for Good has created two data sets, Facebook Population During Crisis and Facebook Movement During Crisis, that will be of use for this workshop.\nThese data sets make use of anonymised and aggregated data, including current and historical location data. While the raw data used for the creation of the data sets remains available only to the data owners, the aggregated data, with privacy and security protections is shared with non-profit organisations and researchers on an ongoing basis in the days and weeks following a hazard event (Maas et al. 2019)."
  },
  {
    "objectID": "data-description.html#meta-facebook-population-and-movement-data",
    "href": "data-description.html#meta-facebook-population-and-movement-data",
    "title": "1  Meta-Facebook data introduction",
    "section": "1.3 Meta-Facebook population and movement data",
    "text": "1.3 Meta-Facebook population and movement data\nBoth data sets Facebook Population and Facebook Movements contain data corresponding to a two-year period, starting in March 2020, and to four Latin American countries, Argentina, Chile, Colombia and Mexico.\nThe data in both data sets is temporally aggregated into three 8-hour windows (00:00–08:00, 08:00–16:00 and 16:00–00:00) for every day in the aforementioned two-year time period.\nIt is spatially aggregated into tiles according to the Bing Maps Tile System. This geospatial indexing system was developed by Microsoft and it partitions the world into square cells at various levels of resolution.\nThe Facebook Population data provide information on the number of active Facebook users in each tile.\nThe Facebook Movement data capture the total number of Facebook users moving between pairs of origin and destination Bing tiles.\nWe note here that due to the nature of the Facebook Movement data, we cannot distinguish between different types of movements, for example, daily commutes to work or permanent changes of address. However, we are still able to detect the evolution of movements between origin-destination pairs of Bing tiles and hence, we are able to capture the impact that COVID-19 has on mobility patterns.\nOn top of the data for the two-year period, each entry in the Facebook Population and Facebook Movements datasets include data for baseline levels before COVID-19. The baseline values are computed based on a 45-day period ending on the 10th of March of 2020.\nThe data sets also include a ‘quality’ score indicating the number of standard deviations by which the observed data at specific locations and time windows differ from the baseline values, hence highlighting statistically significant changes.\n\n1.3.1 Data generation\nPrior to releasing the above-mentioned datasets, Meta applies three techniques to ensure privacy and anonymisation. First, a small undisclosed amount of random noise is added to ensure that precise location cannot be identified for small population counts in sparsely populated areas. While removing small counts may lead to an underrepresentation of the population in these places, the geographic distribution of population is still reflected in the data. Second, spatial smoothing is applied to produce a smooth population count surface using inverse distance-weighted averaging. Third, any remaining population counts of less than 10 are removed from the final data set (see Maas et al. (2019) for details)."
  },
  {
    "objectID": "data-description.html#challenges-of-digital-footprint-data",
    "href": "data-description.html#challenges-of-digital-footprint-data",
    "title": "1  Meta-Facebook data introduction",
    "section": "1.4 Challenges of digital footprint data",
    "text": "1.4 Challenges of digital footprint data\nDespite the numerous advantages of using DFD to study the patterns of human mobility, the presence of biases in this type of data is usually regarded as a problematic issue. The biases in DFD usually stem from the fact that certain population groups may be more likely to use location-tracking technologies than others, for example, younger people or people living in urban areas. Therefore, DFD may not be representative of the entire population and as a result, the accuracy of analyses involving DFD may be hindered, especially when biases are not accounted for.\n\n\n\n\n“Learn about Your Location Privacy | Privacy Center | Manage Your Privacy on Facebook, Instagram and Messenger | Facebook Privacy.” https://www.facebook.com/privacy/guide/location/.\n\n\nMaas, Paige, Shankar Iyer, Andreas Gros, Wonhee Park, Laura McGorman, Chaya Nayak, and P. Alex Dow. 2019. “Facebook Disaster Maps: Aggregate Insights for Crisis Response & Recovery.” In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining, 3173. KDD ’19. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/3292500.3340412.\n\n\nRowe, Francisco, Carmen Cabrera-Arnau, and Elisabetta Piestrostefani. 2023. Population Science. population-science.net."
  },
  {
    "objectID": "temporal-trends.html#dependencies",
    "href": "temporal-trends.html#dependencies",
    "title": "2  Temporal patterns",
    "section": "2.1 Dependencies",
    "text": "2.1 Dependencies\nTo analyse the data, we need R and the following R packages (see installation instructions on [R packages]). Once installed, you can use the R packages by loading them as libraries:\n\n# Load the tidyverse package for data manipulation and visualization\nlibrary(tidyverse)\n\n# Load the zoo package for working with time series data\nlibrary(zoo)\n\n# Load the mice package for multiple imputation of missing data\nlibrary(mice)\n\n# Load the ggthemes package for additional plot themes\nlibrary(ggthemes)"
  },
  {
    "objectID": "temporal-trends.html#sec-loading",
    "href": "temporal-trends.html#sec-loading",
    "title": "2  Temporal patterns",
    "section": "2.2 Data wrangling",
    "text": "2.2 Data wrangling\nWe start by looking at the temporal evolution of internal human mobility in Chile in the first few months after the first outbreak of COVID-19. To do so, we read the movement data corresponding to the months of May, June, July, August and September 2020. The data is stored as .rds files and can be read using the readRDS() function:\n\ndf_5 <- readRDS(\"./data/fb/movement_grid/2020_05_mov.rds\")\ndf_6 <- readRDS(\"./data/fb/movement_grid/2020_06_mov.rds\")\ndf_7 <- readRDS(\"./data/fb/movement_grid/2020_07_mov.rds\")\ndf_8 <- readRDS(\"./data/fb/movement_grid/2020_08_mov.rds\")\ndf_9 <- readRDS(\"./data/fb/movement_grid/2020_09_mov.rds\")\n\nSince we are interested in the evolution of trends in internal human mobility over this five-month period, we bind the data sets together using the function rbind(). This function appends datasets that share the same columns. We call the resulting data set df_mov.\n\n# Combine the data frames df_5, df_6, df_7, df_8, and df_9 into a single data frame\ndf_mov <- rbind(df_5, df_6, df_7, df_8, df_9)\n\nBut, what are the columns of df1, df2, df3, df4, df5 and df_mov? We can easily visualise a dataset and its contents with the glimpse() function. For example, for df_mov:\n\n# Display a concise summary of the data frame df_mov\nglimpse(df_mov)\n\nRows: 630,635\nColumns: 23\n$ geometry                     <chr> \"LINESTRING (-71.630859375 -36.5272625723…\n$ date_time                    <chr> \"2020-05-01 08:00:00\", \"2020-05-01 08:00:…\n$ start_polygon_id             <chr> \"60871\", \"60871\", \"60871\", \"60871\", \"6087…\n$ start_polygon_name           <chr> \"Ñuble\", \"Ñuble\", \"Ñuble\", \"Ñuble\", \"Ñubl…\n$ end_polygon_id               <chr> \"60871\", \"60871\", \"60871\", \"60871\", \"6087…\n$ end_polygon_name             <chr> \"Ñuble\", \"Ñuble\", \"Ñuble\", \"Ñuble\", \"Ñubl…\n$ length_km                    <dbl> 0.00000, 0.00000, 0.00000, 0.00000, 0.000…\n$ tile_size                    <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n$ country                      <chr> \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ level                        <chr> \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"…\n$ n_crisis                     <dbl> 228, 455, 989, 2293, 111, 23, 22, 3045, 1…\n$ n_baseline                   <dbl> 236.2, 367.6, 1162.4, 1456.8, 92.6, 45.6,…\n$ n_difference                 <dbl> -8.2, 87.4, -173.4, 836.2, 18.4, -22.6, -…\n$ percent_change               <dbl> -3.456998, 23.711340, -14.904590, 57.3604…\n$ is_statistically_significant <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ z_score                      <dbl> -0.09754166, 1.02989015, -0.47284604, 4.0…\n$ start_lat                    <dbl> -36.64353, -36.64353, -36.64353, -36.6435…\n$ start_lon                    <dbl> -71.97498, -71.97498, -71.97498, -71.9749…\n$ end_lat                      <dbl> -36.64353, -36.64353, -36.64353, -36.6435…\n$ end_lon                      <dbl> -71.97498, -71.97498, -71.97498, -71.9749…\n$ start_quadkey                <chr> \"21023300110\", \"21023300110\", \"2102330011…\n$ end_quadkey                  <chr> \"21023300110\", \"21023300110\", \"2102330011…\n$ date_time2                   <dttm> 2020-05-01 02:00:00, 2020-05-01 02:00:00…\n\n\nIn the output, we first see the number of rows and columns in the data set. Then we see the name of each column, followed by the type of data stored in that column (e.g. <chr> for character), and a sample of the data values. Alternatively, if we only want to know the names of the columns, we can use the names() function:\n\n# Retrieve the names of the variables (columns) in the data frame df_mov\nnames(df_mov)\n\n [1] \"geometry\"                     \"date_time\"                   \n [3] \"start_polygon_id\"             \"start_polygon_name\"          \n [5] \"end_polygon_id\"               \"end_polygon_name\"            \n [7] \"length_km\"                    \"tile_size\"                   \n [9] \"country\"                      \"level\"                       \n[11] \"n_crisis\"                     \"n_baseline\"                  \n[13] \"n_difference\"                 \"percent_change\"              \n[15] \"is_statistically_significant\" \"z_score\"                     \n[17] \"start_lat\"                    \"start_lon\"                   \n[19] \"end_lat\"                      \"end_lon\"                     \n[21] \"start_quadkey\"                \"end_quadkey\"                 \n[23] \"date_time2\"                  \n\n\nAs you might have guessed, each column represents a variable or a characteristic of the data stored in the dataset. Each row or data point in the resulting dataset df_mov represents a population flow between an origin and a destination location, taking place during a given time window, in this case, within the five-month period starting in May 2020. The information about the origin and destination of the flow is fully determined by the geometry column. Other columns also contain information about the start and end locations of the movements, such as start_polygon_id, start_polygon_name, end_polygon_id, end_polygon_name, start_lat, start_lon, end_lat, end_lon, start_quadkey and end_quadkey. The information about the time window in which each population flow takes place is contained in the date_time column.\nIn the next few sections, we will focus only on three variables, namely, date_time, n_crisis and n_baseline. But first, let’s talk a bit more about the datetime format.\n\n2.2.1 Variable selection\nOf all the columns in the dataset df_mov, three of them are particularly relevant for the analysis in this section of the workshop, n_crisis, n_baseline and date_time. Firstly, the variable n_crisis gives us the size of a given flow, i.e. the number of people moving from an origin to a destination. For the first flow, this would be:\n\n# Retrieve the value of the variable 'n_crisis' from the first row of the data frame 'df_mov'\ndf_mov$n_crisis[[1]]\n\n[1] 228\n\n\nBut is this number large or small? In order to establish a benchmark, we can look at n_baseline. This variable tells us about the number of people that we would expect travelling from origin to destination on the same weekday at the same time of the day in normal conditions, i.e. pre-pandemic.\n\n# Retrieve the value of the variable 'n_baseline' from the first row of the data frame 'df_mov'\ndf_mov$n_baseline[[1]]\n\n[1] 236.2\n\n\nThe fact that the value of n_crisis is smaller than n_baseline for the first flow suggests that during the pandemic people were moving less between the particular origin-destination pair of locations corresponding to the first flow in the dataset.\nHowever, in order to draw conclusions at the population level, looking at a data point in isolation is not enough. We can gain much more meaningful insights if we look at much larger amounts of data as well as the temporal evolution of the observed patterns. To do this, we need to look into the date_time variable, that tells us the 8-hour time window in which a flow takes place. For example, we can look up the value of date_time for the first flow recorded in df_mov:\n\n# Accessing the value of the first element in the \"date_time\" column of the \"df_mov\" data frame\ndf_mov$date_time[[1]]\n\n[1] \"2020-05-01 08:00:00\"\n\n\nTherefore, the first flow in the dataset df_mov took place between 00:00 and 08:00 of the 1st of May 2020. However, for the analysis in this workbook, we are interested only in the patterns taking place at the daily scale, so the information regarding the time window within the day is irrelevant.\n\n\n2.2.2 Extracting calendar date\nTo explore the variation in the number of flows at the daily level, we need to first extract only the date from each movement. This can be done by running the code below, where we create a new column in df_mov named date. This new column stores only the information corresponding to date which can be obtained by applying the as.Date() function to the data from the date_time column. This function allows us to convert character data into objects of class Date representing calendar dates and following a specified format (in this case, year-month-day).\n\n# Converting the \"date_time\" column in the \"df_mov\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov$date <- as.Date(df_mov$date_time, format = \"%Y-%m-%d\")\n\n\n\n2.2.3 Temporally grouping data\nSince we are interested in the number of movements taking place on a daily basis, we need to aggregate the information from flows that take place on the same day. Specifically, we need to sum all the values of n_crisis corresponding to flows from the same day. This can be done, firstly, by passing the df_mov dataset to the group_by() function and specifying that we want to group the data according to the information stored in the df_mov$date column that we just created. This action can be achieved via the pipeline operator %>%, which simply feeds the results of one operation into the next operation. For those familiar with the mathematical language, the pipe operator is equivalent to the function composition operation. But the group_by() function alone will not give the desired output, so we follow it by the summarise() function with an appropriate action to perform, in this case the sum of the values of n_crisis for all the entries that share a date. The output is a dataset containing two columns, named total and df_mov$date. We rename the second column of the resulting dataset to date instead of df_mov$date. The final dataset is df_crisis.\n\n# Creating a new data frame called \"df_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov\" data frame by the \"date\" column\ndf_crisis <- df_mov %>%\n  group_by(df_mov$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov$date\")\n\nWe apply a very similar process to sum the values of n_baseline corresponding to flows from the same day. The resulting dataset is df_baseline.\n\n# Creating a new data frame called \"df_baseline\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov\" data frame by the \"date\" column\ndf_baseline <- df_mov %>%\n  group_by(df_mov$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov$date\")"
  },
  {
    "objectID": "temporal-trends.html#system-wide-analysis",
    "href": "temporal-trends.html#system-wide-analysis",
    "title": "2  Temporal patterns",
    "section": "2.3 System-wide analysis",
    "text": "2.3 System-wide analysis\nWith df_crisis and df_baseline, we are ready to create our first figure. The goal is to show the daily evolution of internal movements at the nation-wide scale in Chile during the five-month period starting in May 2020. Therefore, the figure will include information about the date on the x-axis and the number of movements on the y-axis. Furthermore, the figures should allow us to compare the trends in the period of interest with the baseline levels of internal mobility. Hence, our plot will include two components: a line showing the evolution of internal movements from May to September 2020 and a line representing the baseline.\nTo generate the figure, we use the ggplot2 package. First, ggplot() is used to construct the initial plot object, and is followed by a plus sign ( + ) to add components to the plot. Note that we add a legend to specify the component of the plot that refers to the “crisis” or pandemic period and the component that refers to the baseline.\n\n# Creating a line plot using ggplot\n\nggplot() +\n  \n  # Adding a line layer for the \"df_baseline\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Baseline\"), \n            data = df_baseline, linewidth = 1.5) +\n  \n  # Adding a line layer for the \"df_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Crisis\"),\n            data = df_crisis, linewidth = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"Crisis\" = \"red\", \"Baseline\" = \"blue\"),\n                     labels = c(\"Baseline\", \"Crisis\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 1: Temporal patterns in the number of movements in Chile\",\n       x = \"Date\",\n       y = \"Number of movements\") +\n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\nWe can also plot the difference between the levels of internal migration during the pandemic period and the baseline. First we create a new dataset df_difference with a column named difference as follows:\n\n# Creating a new data frame called \"df_difference\" as a copy of \"df_crisis\"\ndf_difference <- df_crisis\n\n# Adding a new column called \"difference\" to \"df_difference\"\n# The values in this column are calculated as the difference between the \"total\" column of \"df_crisis\" and \"df_baseline\"\ndf_difference$difference <- df_crisis$total - df_baseline$total\n\nThen we generate a plot following a procedure as above:\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"df_difference\" data\n  geom_line(mapping = aes(x = date, y = difference, color = \"Difference\"), \n            data = df_difference, linewidth = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"Difference\" = \"darkgreen\"),\n                     labels = c(\"Difference between crisis \\nand baseline\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 2: Temporal patterns in the number of movements in Chile\",\n       x = \"Date\",\n       y = \"Difference in number of movements\") +\n  \n  # Applying the \"minimal\" theme\n  theme_minimal() +\n  \n  # Modifying y-axis labels to display in full form with no space for thousands separator\n  scale_y_continuous(labels = scales::number_format(big.mark = \"\")) \n\n\n\n\n\n\n\n\n\n\nQuestion 1\nThe patterns during the crisis period, display an overall trend and some shorter-term oscillations. What do these oscillations correspond to?\n\n\n\n\n\n\n\n\n\nQuestion 2\nDoes the observed overall trend in the 5-month period starting in May 2020 agree with what you expected? You may answer this question based on your knowledge on the evolution of the COVID-19 pandemic in Chile."
  },
  {
    "objectID": "temporal-trends.html#santiago-internal-movements",
    "href": "temporal-trends.html#santiago-internal-movements",
    "title": "2  Temporal patterns",
    "section": "2.4 Santiago: Internal movements",
    "text": "2.4 Santiago: Internal movements\nUp to this point, we have focused on the temporal trends of internal mobility at the nation-wide scale. Thanks to the fine level of detail in our original datasets, we can focus the analysis on more specific areas or regions. In the remainder of this sections, we will analyse movements that involve Santiago, Chile’s capital city. As we pointed out in section Section 2.2, there are several columns in the dataset df_mov that contain information about the start and end locations of the movements. The spatial variability of internal population flows will be explored in more detail in the next section of the workshop. But for now, we will focus on the columns names start_polygon_name and end_polygon_name, which contain the name of the province where a flow starts or ends respectively.\n\n2.4.1 Santiago as destination\nHence, to obtain only the movements that have the province of Santiago as their destination, we need to filter the data set df_mov so that it only contains rows where the value of end_polygon_name is Santiago. In R, this can be done very simply by running the lines of code below. The first line, keeps only the flows that start outside of Santiago and stores the result in the df_mov_to dataset. The second line, keeps only the flows that end in Santiago and stores the result in the df_mov_to dataset. We call the resulting data set df_mov_to.\n\n# Filtering the \"df_mov\" data frame to select rows where \"start_polygon_name\" is not 'Santiago'}\ndf_mov_to <- filter(df_mov, start_polygon_name != 'Santiago')\n\n# Further filtering the \"df_mov_to\" data frame to select rows where \"end_polygon_name\" is 'Santiago'\ndf_mov_to <- filter(df_mov_to, end_polygon_name == 'Santiago')\n\nThen, like before, we create a new column for df_mov_to containing only information about the date (and not the time) in year-month-day format:\n\n# Converting the \"date_time\" column in the \"df_mov_to\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov_to$date <- as.Date(df_mov_to$date_time, format = \"%Y-%m-%d\")\n\nand we follow this action by grouping the data by date. We generate the datasets df_to_crisis and df_to_baseline, which contain the sum of the values of n_crisis and n_baseline for flows that happen on the same day:\n\n# Creating a new data frame called \"df_to_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_to\" data frame by the \"date\" column\ndf_to_crisis <- df_mov_to %>%\n  group_by(df_mov_to$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov_to$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_to$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Grouping the rows of the \"df_mov_to\" data frame by the \"date\" column\ndf_to_baseline <- df_mov_to %>%\n  group_by(df_mov_to$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov_to$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_to$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\nWith all these elements, we can generate a figure showing the trends in the number of movements from any province outside of Santiago to Santiago, both during the 5-month crisis period during the pandemic and during the baseline period:\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"df_to_baseline\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Baseline\"), \n            data = df_to_baseline, linewidth = 1.5) +\n  \n  # Adding a line layer for the \"df_to_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Crisis\"),\n            data = df_to_crisis, linewidth = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"Crisis\" = \"magenta\", \"Baseline\" = \"blue\"),\n                     labels = c(\"Baseline\", \"Crisis\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 3: Temporal patterns in the number of movements to Santiago\",\n       x = \"Date\",\n       y = \"Number of movements\") +\n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\n\n\n2.4.2 Santiago as origin\nAn analogous analysis can be carried out for movements with origin in the province of Santiago and destination elsewhere. To do this, we follow exactly the same steps as before but modifying the way in which we filter df_mov, and replacing the names of new variables where appropriate (e.g. df_mov_from instead of df_mov_to):\n\n# Filtering the \"df_mov\" data frame to select rows where \"start_polygon_name\" is 'Santiago'\ndf_mov_from <- filter(df_mov, start_polygon_name == 'Santiago')\n\n# Further filtering the \"df_mov_from\" data frame to select rows where \"end_polygon_name\" is not 'Santiago'\ndf_mov_from <- filter(df_mov_from, end_polygon_name != 'Santiago')\n\n\n# Converting the \"date_time\" column in the \"df_mov_from\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov_from$date <- as.Date(df_mov_from$date_time, format = \"%Y-%m-%d\")\n\n\n# Creating a new data frame called \"df_from_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_from\" data frame by the \"date\" column\ndf_from_crisis <- df_mov_from %>%\n  group_by(df_mov_from$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov_from$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_from$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a new data frame called \"df_from_baseline\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_from\" data frame by the \"date\" column\ndf_from_baseline <- df_mov_from %>%\n  group_by(df_mov_from$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov_from$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_from$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"df_from_baseline\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Baseline\"), \n            data = df_from_baseline, linewidth = 1.5) +\n  \n  # Adding a line layer for the \"df_from_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Crisis\"),\n            data = df_from_crisis, linewidth = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"Crisis\" = \"darkcyan\", \"Baseline\" = \"blue\"),\n                     labels = c(\"Baseline\", \"Crisis\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 4: Temporal patterns in the number of movements from Santiago\",\n       x = \"Date\",\n       y = \"Number of movements\") +\n\n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\nWe can also compare the movements to and from Santiago province, this time omitting the baseline trends for clarity:\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"df_to_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"To\"), \n            data = df_to_crisis, size = 1.5) +\n  \n  # Adding a line layer for the \"df_from_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"From\"),\n            data = df_from_crisis, size = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"To\" = \"magenta\", \"From\" = \"darkcyan\"),\n                     labels = c(\"From Santiago\", \"To Santiago\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 5: Temporal patterns in the number of movements to and from Santiago\",\n       x = \"Date\",\n       y = \"Number of movements\") + \n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nQuestion 3\nDoes the overall trend in the internal movements involving Santiago province agree with your intuition?\n\n\n\n\n\n\n\n\n\nQuestion 4\nCan you observe any differences in the shorter-term oscillations corresponding to movements to and from Santiago province? To answer this question, it might be helpful to complete the Exercise below.\n\n\n\n\n\n\n\n\n\nExercise 1\nCreate a plot analogous to Figure 5, but comparing the baseline movements instead of the movements during the crisis period.\n\n\n\n\n\n2.4.3 Santiago-Valparaíso movements\nIt is possible to look at movements beetween a specified origin and destination. Here, we focus on the flow of people between Santiago and a popular destination province for Santiaguinos, Valparaíso. To explore the movements from Santiago to Valparaíso, you can run the code below:\n\n# Filtering the \"df_mov\" data frame to select rows where \"start_polygon_name\" is 'Santiago'\ndf_mov_between1 <- filter(df_mov, start_polygon_name == 'Santiago')\n\n# Further filtering the \"df_mov_between1\" data frame to select rows where \"end_polygon_name\" is 'Valparaíso'\ndf_mov_between1 <- filter(df_mov_between1, end_polygon_name == 'Valparaíso')\n\n\n# Converting the \"date_time\" column in the \"df_mov_between1\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov_between1$date <- as.Date(df_mov_between1$date_time, format = \"%Y-%m-%d\")\n\n\n# Creating a new data frame called \"df_between1_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_between1\" data frame by the \"date\" column\ndf_between1_crisis <- df_mov_between1 %>%\n  group_by(df_mov_between1$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov_between1$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_between1$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a new data frame called \"df_between1_baseline\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_between1\" data frame by the \"date\" column\ndf_between1_baseline <- df_mov_between1 %>%\n  group_by(df_mov_between1$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"total\" to store the sum\n  summarise(total = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov_between1$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_between1$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"df_between1_baseline\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Baseline\"), \n            data = df_between1_baseline, size = 1.5) +\n  \n  # Adding a line layer for the \"df_between1_crisis\" data\n  geom_line(mapping = aes(x = date, y = total, color = \"Crisis\"),\n            data = df_between1_crisis, size = 1.5) +\n  \n  # Customizing the color scale manually\n  scale_color_manual(values = c(\"Crisis\" = \"magenta\", \"Baseline\" = \"blue\"),\n                     labels = c(\"Baseline\", \"Crisis\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 6: Temporal patterns in the number of movements from Santiago to Valparaíso\",\n       x = \"Date\",\n       y = \"Number of movements\") + \n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nQuestion 5\nDoes the overall trend in the internal movements from Santiago to Valparaíso in this time period agree with your intuition?\n\n\n\n\n\n\n\n\n\nExercise 2\nCreate a plot analogous to Figure 6, but comparing the movements from Valparaíso to Santiago during the crisis and baseline period.\n\n\n\n\n\n\n\n\n\nExercise 3\nCompare the trends in movements from Santiago to Valparaíso and from Valparaíso to Santiago. Are the overall trends similar? Are there differentces in the shorter-term fluctuations?"
  },
  {
    "objectID": "temporal-trends.html#relationship-between-movements-and-active-facebook-user-population",
    "href": "temporal-trends.html#relationship-between-movements-and-active-facebook-user-population",
    "title": "2  Temporal patterns",
    "section": "2.5 Relationship between movements and active Facebook user population",
    "text": "2.5 Relationship between movements and active Facebook user population\nSo far, we have looked at the 5-month period starting in May 2020 and spanning throughout the Chilean winter. But, as mentioned at the beginning of the workbook, Facebook Meta collected data for Chile in the two-year period spanning from the end of March of 2020 to the end of March 2022. As we saw in Section 2.2, the data is organised in files by month, and we can load them individually. However, since we are going to look at many months, we can automate the data-reading process. This is done by first, specifying the path to the folder where the movement data files are stored, and then, using a for loop to read each of the files in the folder and bind them together. Getting a full understanding of the code below is out of the scope of this workshop, but we have included comments starting with the ( # ) symbol to indicate what each line of code does in case you are curious.\n\n# Get a list of file paths in the folder\nfolder_path <- \"./data/fb/movement_grid/\"\nfile_paths <- list.files(path = folder_path, pattern = \"\\\\.rds$\", full.names = TRUE)\n\n# Create an empty list to store the data frames\ndfs <- list()\n\n# Loop through the file paths\nfor (file_path in file_paths) {\n  # Read each file as a data frame\n  df <- readRDS(file_path)\n  # Store the data frame in the list\n  dfs <- append(dfs, list(df))\n}\n\n# Bind all the data frames into a single data frame\ndf_mov_full <- bind_rows(dfs)\n\nIn the previous sections, we have focused on analysing movement data during the pandemic and comparing it to a baseline period. While some insights can be gained by looking only at this data, it is important to consider the number of active Facebook users. The reason for this can be illustrated through the following examples. Suppose that the number of Facebook users drops to zero, then no movements would be recorded. However, this does not mean there are no movements taking place. Conversely, suppose Facebook becomes very popular and the whole population starts using it, then more movements would probably be recorded but this does not mean that people started moving more. Hence, it can be very useful to look at the number of movements per active user and analyse how this quantity evolves both during the pandemic and the baseline.\nBelow, we load data for the population of active Facebook users:\n\n# Get a list of file paths in the folder\nfolder_path <- \"data/fb/population_grid/\"\nfile_paths <- list.files(path = folder_path, pattern = \"\\\\.rds$\", full.names = TRUE)\n\n# Create an empty list to store the data frames\ndfs <- list()\n\n# Loop through the file paths\nfor (file_path in file_paths) {\n  # Read each file as a data frame\n  df <- readRDS(file_path)\n  \n  # Store the data frame in the list\n  dfs <- append(dfs, list(df))\n}\n\n# Bind all the data frames into a single data frame\ndf_mov_full_pop <- bind_rows(dfs)\n\n\n2.5.1 Data preparation\nLike the movement datasets, the Facebook population data is aggregated into 8-hour time windows but here, we are only interested in the variation at the daily level. Therefore, we group by date the number of movements and the number of active users during the crisis period.\n\n# Converting the \"date_time\" column in the \"df_mov_full\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov_full$date <- as.Date(df_mov_full$date_time, format = \"%Y-%m-%d\")\n\n\n# Converting the \"date_time\" column in the \"df_mov_full_pop\" data frame to Date format\n# and assigning the result to a new column called \"date\"\ndf_mov_full_pop$date <- as.Date(df_mov_full_pop$date_time, format = \"%Y-%m-%d\")\n\n\n# Creating a new data frame called \"df_mov_full_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_full\" data frame by the \"date\" column\ndf_mov_full_crisis <- df_mov_full %>%\n  group_by(df_mov_full$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"n_crisis\" to store the sum\n  summarise(n_crisis = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov_full$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_full$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a new data frame called \"df_mov_full_pop_crisis\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_full_pop\" data frame by the \"date\" column\ndf_mov_full_pop_crisis <- df_mov_full_pop %>%\n  group_by(df_mov_full_pop$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_crisis\" column\n# and creating a new column called \"pop_n_crisis\" to store the sum\n  summarise(pop_n_crisis = sum(n_crisis)) %>%\n  \n# Renaming the \"df_mov_full_pop$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_full_pop$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\nOnce the grouping by date is done, we merge the resulting datasets for movements and population of active Facebook users according to the date column:\n\n# Merging the \"df_mov_full_crisis\" and \"df_mov_full_pop_crisis\" data frames based on the \"date\" column\n# and assigning the result to a new data frame called \"df_full_crisis\"\ndf_full_crisis <- merge(df_mov_full_crisis, df_mov_full_pop_crisis, by = \"date\", all.x = TRUE)\n\nThe original data for the population of active Facebook users is missing some dates, so we estimate the missing data using Multivariate Imputation by Chained Equations (with the mice package).\n\n# Create a mice object with only the column you want to impute\ndf_to_complete <- mice(df_full_crisis[, -which(names(df_full_crisis) == \"n_crisis\")])\n\n\n iter imp variable\n  1   1  pop_n_crisis\n  1   2  pop_n_crisis\n  1   3  pop_n_crisis\n  1   4  pop_n_crisis\n  1   5  pop_n_crisis\n  2   1  pop_n_crisis\n  2   2  pop_n_crisis\n  2   3  pop_n_crisis\n  2   4  pop_n_crisis\n  2   5  pop_n_crisis\n  3   1  pop_n_crisis\n  3   2  pop_n_crisis\n  3   3  pop_n_crisis\n  3   4  pop_n_crisis\n  3   5  pop_n_crisis\n  4   1  pop_n_crisis\n  4   2  pop_n_crisis\n  4   3  pop_n_crisis\n  4   4  pop_n_crisis\n  4   5  pop_n_crisis\n  5   1  pop_n_crisis\n  5   2  pop_n_crisis\n  5   3  pop_n_crisis\n  5   4  pop_n_crisis\n  5   5  pop_n_crisis\n\n# Perform the imputation\ndf_complete_crisis <- complete(df_to_complete)\n\n# Assign the imputed values from the completed data frame to the original \"df_full_crisis\" data frame\ndf_full_crisis$pop_n_crisis <- df_complete_crisis$pop_n_crisis\n\nSimilarly, we group by date the number of movements and the number of active users during the baseline. Then, we merge the resulting datasets for movements and population of active Facebook users according to the date column and finally, we estimate any missing values using Multivariate Imputation by Chained Equations (with the mice package).\n\n# Creating a new data frame called \"df_mov_full_baseline\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_full\" data frame by the \"date\" column\ndf_mov_full_baseline <- df_mov_full %>%\n  group_by(df_mov_full$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"n_baseline\" to store the sum\n  summarise(n_baseline = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov_full$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_full$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Creating a new data frame called \"df_mov_full_pop_baseline\" by performing the following operations:\n\n# Grouping the rows of the \"df_mov_full_pop\" data frame by the \"date\" column\ndf_mov_full_pop_baseline <- df_mov_full_pop %>%\n  group_by(df_mov_full_pop$date) %>%\n  \n# Summarizing the grouped data by calculating the total sum of the \"n_baseline\" column\n# and creating a new column called \"pop_n_baseline\" to store the sum\n  summarise(pop_n_baseline = sum(n_baseline)) %>%\n  \n# Renaming the \"df_mov_full_pop$date\" column as \"date\" in the resulting data frame\n  rename(\"date\" = \"df_mov_full_pop$date\") %>%\n  \n# Ungrouping the data frame to remove the grouping structure\n  ungroup()\n\n\n# Merging the \"df_mov_full_baseline\" and \"df_mov_full_pop_baseline\" data frames based on the \"date\" column\n# and assigning the result to a new data frame called \"df_full_baseline\"\ndf_full_baseline <- merge(df_mov_full_baseline, df_mov_full_pop_baseline, by = \"date\", all.x = TRUE)\n\n\n# Create a mice object with only the column you want to impute\ndf_to_complete <- mice(df_full_baseline[, -which(names(df_full_baseline) == \"n_baseline\")])\n\n\n iter imp variable\n  1   1  pop_n_baseline\n  1   2  pop_n_baseline\n  1   3  pop_n_baseline\n  1   4  pop_n_baseline\n  1   5  pop_n_baseline\n  2   1  pop_n_baseline\n  2   2  pop_n_baseline\n  2   3  pop_n_baseline\n  2   4  pop_n_baseline\n  2   5  pop_n_baseline\n  3   1  pop_n_baseline\n  3   2  pop_n_baseline\n  3   3  pop_n_baseline\n  3   4  pop_n_baseline\n  3   5  pop_n_baseline\n  4   1  pop_n_baseline\n  4   2  pop_n_baseline\n  4   3  pop_n_baseline\n  4   4  pop_n_baseline\n  4   5  pop_n_baseline\n  5   1  pop_n_baseline\n  5   2  pop_n_baseline\n  5   3  pop_n_baseline\n  5   4  pop_n_baseline\n  5   5  pop_n_baseline\n\n# Perform the imputation\ndf_complete_baseline <- complete(df_to_complete)\n\n# Assign the imputed values from the completed data frame to the original \"df_full_baseline\" data frame\ndf_full_baseline$pop_n_baseline <- df_complete_baseline$pop_n_baseline\n\nThe merged datasets for the crisis period and the baseline can be merged according to the date column:\n\n# Merging the \"df_full_crisis\" and \"df_full_baseline\" data frames based on the \"date\" column\n# and assigning the result to a new data frame called \"df_full\"\ndf_full <- merge(df_full_crisis, df_full_baseline, by = \"date\", all.x = TRUE)\n\nTo obtain the number of movements per active Facebook user on a given date, we can divide the number of movements on that date by the total number of active Facebook users on the same date. This can be done for both the crisis and baseline periods and the results can be stored in new columns. Furthermore, we compute the difference in the number of movements per active Facebook user between the crisis and baseline periods and store it in the difference_div column:\n\n# Calculating the division of \"n_crisis\" by \"pop_n_crisis\" and assigning the result to a new column \"n_crisis_div\"\ndf_full$n_crisis_div <- df_full$n_crisis / df_full$pop_n_crisis\n\n# Calculating the division of \"n_baseline\" by \"pop_n_baseline\" and assigning the result to a new column \"n_baseline_div\"\ndf_full$n_baseline_div <- df_full$n_baseline / df_full$pop_n_baseline\n\n# Calculating the difference between \"n_crisis_div\" and \"n_baseline_div\" and assigning the result to a new column \"n_difference_div\"\ndf_full$n_difference_div <- df_full$n_crisis_div - df_full$n_baseline_div\n\n\n\n2.5.2 Analysing trends\nBelow we plot the baseline number of tracked movements and Facebook active users as well as the same quantities for the crisis period:\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"n_baseline\" data with color \"Baseline\"\n  geom_line(mapping = aes(x = date, y = n_baseline, color = \"Baseline\"), \n            data = df_full, size = 1.5) +\n  \n  # Adding a line layer for the \"n_crisis\" data with color \"Crisis\"\n  geom_line(mapping = aes(x = date, y = n_crisis, color = \"Crisis\"),\n            data = df_full, size = 1.5) +\n  \n  # Adding a line layer for the \"pop_n_baseline\" data with color \"Baseline FB users\"\n  geom_line(mapping = aes(x = date, y = pop_n_baseline, color = \"Baseline FB users\"),\n            data = df_full, size = 1.5) +\n  \n  # Adding a line layer for the \"pop_n_crisis\" data with color \"Crisis FB users\"\n  geom_line(mapping = aes(x = date, y = pop_n_crisis, color = \"Crisis FB users\"),\n            data = df_full, size = 1.5) +\n  \n  # Customizing the color scale manually with the respective colors and labels\n  scale_color_manual(values = c(\"Crisis\" = \"red\", \"Baseline\" = \"blue\", \"Crisis FB users\" = \"magenta\", \"Baseline FB users\" = \"cyan\"),\n                     labels = c(\"Baseline movements\", \"Baseline FB users\", \"Crisis movements\", \"Crisis FB users\")) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 7: Number of tracked movements \\nand active Facebook users in Chile\",\n       x = \"Date\",\n       y = \"Number of movements/users\") + \n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\nDisregarding the spikes which are likely due to anomalies in the data collection process applied by Facebook, we observe that, generally speaking, both the baseline number of movements and the number of active Facebook users remain constant through the plotted period. In the case of the number of movements and the number of active Facebook users during the pandemic, they both experience a decline. But, is the decline observed in the number of movements a result of the decline in the number of active Facebook users? To answer this question, we can plot the number of tracked movements per active Facebook user, both for the baseline and the pandemic period. We can also plot the difference between these two quantities:\n\n# Creating a line plot using ggplot\nggplot() +\n  \n  # Adding a line layer for the \"n_baseline_div\" data with color \"Baseline movements per user\"\n  geom_line(mapping = aes(x = date, y = n_baseline_div, color = \"Baseline movements per user\"), \n            data = df_full, size = 1.5) +\n  \n  # Adding a line layer for the \"n_crisis_div\" data with color \"Crisis movements per user\"\n  geom_line(mapping = aes(x = date, y = n_crisis_div, color = \"Crisis movements per user\"),\n            data = df_full, size = 1.5) +\n  \n  # Adding a line layer for the \"n_difference_div\" data with color \"Difference\"\n  geom_line(mapping = aes(x = date, y = n_difference_div, color = \"Difference\"),\n            data = df_full, size = 1.5) +\n  \n  # Customizing the color scale manually with the respective colors and labels\n  scale_color_manual(values = c(\"Crisis movements per user\" = \"red\", \"Baseline movements per user\" = \"blue\", \"Difference\" = \"darkgreen\"),\n                     labels = c(\"Baseline movements per user\", \"Crisis movements per user\", \"Difference\")) +\n  \n  # Expanding the y-axis limits to include 0\n  expand_limits(y = 0) +\n  \n  # Customizing plot labels\n  labs(color = \"Legend\", \n       title = \"Figure 8: Number of tracked movements per active Facebook user in Chile\",\n       x = \"Date\",\n       y = \"Number of movements per active user\") + \n  \n  # Applying the \"minimal\" theme\n  theme_minimal()\n\n\n\n\nThis last figure shows that since the start of the pandemic, the number of movements per active Facebook user has been consistently lower than during the baseline period. However, the difference in trends between the crisis and basline periods is not as large as it might have been suggested by looking at the raw number of movements without taking into account the active population of users (e.g. the line corresponding to the number of movements during the crisis period from Figure 7)."
  },
  {
    "objectID": "spatial-patterns.html#aims",
    "href": "spatial-patterns.html#aims",
    "title": "3  Spatial patterns",
    "section": "3.1 Aims",
    "text": "3.1 Aims\nThis session aims to provide an illustration on how to (1) analyse the spatial patterns of origin-destination mobility flow data extracted from Meta-Facebook; (2) compute basic area-based indicators of human mobility; (3) handle spatial datasets in R; and, (4) create geospatial visualisations to examine and effectively communicate human mobility patterns. We start by clearing our R environment by running:\n\n#clean environment\nrm(list=ls())"
  },
  {
    "objectID": "spatial-patterns.html#dependencies",
    "href": "spatial-patterns.html#dependencies",
    "title": "3  Spatial patterns",
    "section": "3.2 Dependencies",
    "text": "3.2 Dependencies\nWe ensure to load the libraries below. A core area of this session is learning to work with spatial data in R. R offers an ecosystem of purposely designed packages for manipulation of spatial data and spatial analysis techniques. These ecosystem is known a r-spatial. Various packages exist in CRAN (The Comprehensive R Archive Network), including sf (E. Pebesma 2018, 2022a), stars (E. Pebesma 2022b), terra, s2 (Dunnington, Pebesma, and Rubak 2023), lwgeom (E. Pebesma 2023), gstat (E. J. Pebesma 2004; E. Pebesma and Graeler 2022), spdep (Bivand 2022), spatialreg (Bivand and Piras 2022), spatstat (Baddeley, Rubak, and Turner 2015; Baddeley, Turner, and Rubak 2022), tmap (Tennekes 2018, 2022), mapview (Appelhans et al. 2022) and more. A key package is this ecosystem is sf (E. Pebesma and Bivand 2023). R package sf provides a table format for simple features, where feature geometries are stored in a list-column.It appears in 2016 and was developed to move spatial data analysis in R closer to standards-based approaches seen in the industry and open source projects, to build upon more modern versions of open source geospatial software stack and allow for integration of R spatial software with the tidyverse (Wickham et al. 2019), particularly ggplot2, dplyr, and tidyr.\n\n# data wrangling\nlibrary(tidyverse)\n\n# spatial data wrangling\nlibrary(sf)\n\n# data visualisation\nlibrary(viridis) \n\n# format data visualisations\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(showtext)\nlibrary(scales)\n\n# create maps\nlibrary(leaflet)\nlibrary(tmap)\nlibrary(mapdeck)"
  },
  {
    "objectID": "spatial-patterns.html#data",
    "href": "spatial-patterns.html#data",
    "title": "3  Spatial patterns",
    "section": "3.3 Data",
    "text": "3.3 Data\nHere we read all the data needed for the analysis. We use two types of data: (1) human mobility derived from Meta-Facebook users; and, administrative boundary data for Chile.\n\n3.3.1 Meta-Facebook mobility data\nWe use origin-destination mobility flow data between Provinces in Chile. We use data for April 2020. For a detailed description of the Meta-Facebook mobility data, please see the Meta-Facebook data introduction. We start by reading the data. We filter only flows occurring within the boundaries of Chile. The dataset contains daily flow counts between provinces that occurred in April 2020 during three windows of time during the day; that is, between 12am, 8am and 4pm.\nWe have a look at the data frame. We can see that the data contains 20 columns and 29,491 origin-destination interactions capturing counts of movements between provinces.\n\n# read\ndf20 <- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %>% \n  dplyr::filter(country == \"CL\")\nglimpse(df20)\n\nRows: 29,491\nColumns: 20\n$ GEOMETRY                     <chr> \"LINESTRING (-69.96872527689874 -23.40113…\n$ date_time                    <chr> \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"…\n$ start_polygon_id             <chr> \"60845\", \"60862\", \"60845\", \"60862\", \"6086…\n$ start_polygon_name           <chr> \"Antofagasta\", \"Cardenal Caro\", \"Antofaga…\n$ end_polygon_id               <chr> \"60847\", \"60890\", \"60846\", \"60863\", \"6089…\n$ end_polygon_name             <chr> \"Tocopilla\", \"Melipilla\", \"El Loa\", \"Colc…\n$ length_km                    <dbl> 139.7543134, 24.0764953, 100.3339392, 24.…\n$ tile_size                    <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n$ country                      <chr> \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ level                        <chr> \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"…\n$ n_crisis                     <dbl> 79, 18, 320, 71, NA, 369, NA, 20, 11, NA,…\n$ n_baseline                   <dbl> 59.50, 25.50, 671.00, 132.75, NA, 559.25,…\n$ n_difference                 <dbl> 19.50, -7.50, -351.00, -61.75, NA, -190.2…\n$ percent_change               <dbl> 32.231405, -28.301887, -52.232143, -46.16…\n$ is_statistically_significant <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ z_score                      <dbl> 2.0148470, -0.6837043, -4.0000000, -1.261…\n$ start_lat                    <dbl> -24.32798, -34.32667, -24.32798, -34.3266…\n$ start_lon                    <dbl> -69.56718, -71.78028, -69.56718, -71.7802…\n$ end_lat                      <dbl> -22.06894, -33.75413, -22.81611, -34.7036…\n$ end_lon                      <dbl> -69.60081, -71.19829, -68.20015, -71.0631…\n\n\nWe can identify the list of origin and destination provinces for which we can observe movement.\n\nunique_origins <- unique(df20$start_polygon_name)\nunique_destinations <- unique(df20$end_polygon_name)\n\n\n\n3.3.2 Meta-Facebook active users population\nWe will also use information on the number of Meta-Facebook active users population. The population Meta-Facebook active users can vary over time reflecting their varying patterns of usage and internet accessibility.\n\n# read and select observations\npop20_df <- readRDS(\"./data/fb/population_adm/2020_04.rds\") %>% \n  dplyr::filter(country == \"CL\")\n\n# identify polygons\nunique_areas <- unique(pop20_df$polygon_name)\n\n# data overview\nglimpse(pop20_df)\n\nRows: 4,950\nColumns: 14\n$ spaco_id         <dbl> 60870, 60859, 60893, 60862, 60872, 60850, 60869, 6086…\n$ country          <chr> \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ polygon_name     <chr> \"Bío-Bío\", \"San Antonio\", \"Ranco\", \"Cardenal Caro\", \"…\n$ level            <chr> \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LE…\n$ date_time        <chr> \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"2020-04-01 0…\n$ n_baseline       <dbl> 35459.9167, 25048.9167, 8326.1780, 6164.6667, 68088.1…\n$ n_crisis         <dbl> 34606, 18033, 7336, 4034, 60602, 6632, 11397, 11397, …\n$ density_baseline <dbl> 0.014799224, 0.010454185, 0.003474937, 0.002572828, 0…\n$ density_crisis   <dbl> 0.014445053, 0.007527239, 0.003062154, 0.001683851, 0…\n$ n_difference     <dbl> -853.91667, -7015.91667, -990.17805, -2130.66667, -74…\n$ percent_change   <dbl> -2.40805018, -28.00774454, -11.89091959, -34.55695518…\n$ clipped_z_score  <dbl> -0.70353211, -1.45851614, -1.20047618, -1.29612464, -…\n$ lat              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ lon              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\n3.3.3 Bing tiles\nMeta-Facebook data captured during the COVID-19 outbreak were available into two formats, at the level of Bing tiles and at the level of administrative areas. While we will be using data at the provincial level, you may be interested in having a peek at the tiles. The Bing Maps Tile System was developed by Microsoft. This system defines a series of grids at different resolution levels over a rectangular projection of the world, comprising 23 different levels of detail (Schwartz et al. 2009). Each level is constructed by dividing the previous level into fourths, with the most granular level being Level 1. Meta-Facebook data are typically produced at Bing tile levels 13 through 16, where level 13 results in tiles that are about 4.9 x 4.9 km at the Equator.\n\n\n\n\n\n\nNote\n\n\n\nIn our work in the project RECAST, we use this tile system and analyse the spatial patterns of human mobility in four Latin American countries, including Argentina, Chile, Colombia and Mexico. We expect to be in a position to share our final results with you soon. If you are interested, please do get in touch. For now, we share some of our share using Meta-Facebook data: Rowe et al. (2022), and research on the same line: González-Leonardo et al. (2022), González-Leonardo, Rowe, and Fresolone-Caparrós (2022), González-Leonardo and Rowe (2022), Wang et al. (2022) and Rowe, González-Leonardo, and Champion (2023).\n\n\nWe now read the shapefile containing the Bing tiles, simplify their boundaries and confirm it is valid. We display the boundaries for Chile and selected regions in the north, central and south of the country, to provide a better understanding of their size and areas of coverage.\n\n# read bing tiles\nbing_grid <- read_sf(\"./data/shp/grid/chile_grid.shp\") %>% \n  st_simplify(preserveTopology =T, # simplify boundaries\n              dTolerance = 1000) %>%  # 1km\n  sf::st_make_valid() # check the geometry is valid\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe created the Bing tiles. They are not available as polygons. They are only provided as rasters and not easily accessible.\n\n\n\n\n3.3.4 Administrative areas\nWe now read the boundaries for Chilean provinces. Provinces are the second administrative level in the country. Provinces are amalgamations of municipalities or comunes, and groupings of provinces are known as regions. Chile is organised around 15 regions, 54 provinces and 346 municipalities - see here.\nLet’s stop here and understand the spatial data frame or sf object we are reading. We can see it has 56 features (i.e. rows) and 5 fields (columns) within a bounding box which defines the area we can visualise on a map. You can see how the map of provinces below seems off to the right. That is because the bounding box has been set to include Chilean islands off of the coast of the country on the Pacific ocean. We will work on adjusting this at a later point in this session.\nThe line CRS or Coordinate Reference Systems identifies the projection system currently attached to the data. This would be the CRS that will be used if we decided to map the data. The component is incredible important if you intend to combine information from two spatial data frames. Ensure they are on the same CRS! A good idea is to used planar projection systems. Lovelace, Nowosad, and Muenchow (2019) provide a good discussion on the various projection systems.\n\nshp_pro <- read_sf(\"./data/shp/adm/province/PROVINCIAS_2020.shp\") %>% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %>%  # 1km\n  sf::st_make_valid() \nshp_pro\n\nSimple feature collection with 56 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -109.4488 ymin: -55.98085 xmax: -66.42812 ymax: -17.4984\nGeodetic CRS:  SIRGAS-Chile 2002\n# A tibble: 56 × 6\n   CUT_REG CUT_PROV REGION        PROVINCIA SUPERFICIE                  geometry\n * <chr>   <chr>    <chr>         <chr>          <dbl>        <MULTIPOLYGON [°]>\n 1 08      081      Biobío        Concepci…      3469. (((-72.77092 -37.002, -7…\n 2 01      014      Tarapacá      Tamarugal     39428. (((-68.53576 -21.06468, …\n 3 04      042      Coquimbo      Choapa        10131. (((-70.55491 -31.50954, …\n 4 05      054      Valparaíso    Petorca        4589. (((-71.46609 -32.49606, …\n 5 10      101      Los Lagos     Llanquih…     14857. (((-73.06627 -41.89869, …\n 6 11      114      Aysén del Ge… General …     11758. (((-71.75146 -46.33864, …\n 7 05      057      Valparaíso    San Feli…      2636. (((-70.61116 -32.81214, …\n 8 12      121      Magallanes y… Magallan…     37193. (((-73.03711 -54.47267, …\n 9 13      136      Metropolitan… Talagante       581. (((-70.79251 -33.69482, …\n10 15      152      Arica y Pari… Parinaco…      8142. (((-68.91415 -18.89034, …\n# ℹ 46 more rows\n\n\n\n\n\n\n\nWe will also use the regional boundaries for visualisation purposes. For now, we will just read them.\n\nshp_reg <- read_sf(\"./data/shp/adm/region/REGIONES_2020.shp\") %>% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %>%  # 1km\n  sf::st_make_valid()"
  },
  {
    "objectID": "spatial-patterns.html#spatial-indicators-of-human-mobility",
    "href": "spatial-patterns.html#spatial-indicators-of-human-mobility",
    "title": "3  Spatial patterns",
    "section": "3.4 Spatial indicators of human mobility",
    "text": "3.4 Spatial indicators of human mobility\nThis section focuses on computing various spatial indicators to analyse the patterns of human mobility. A key message to get across here is that digital footprint data do not capture the entire population living and moving in the country. We can capture signals or systematic trends, but there will be considerable amount of fluctuation of volatility. Such volatiblity may partly reflect the short-term variability in the patterns of human mobility and may also echo noise in the way in which the data are capture or process. Hence, we recommend to use indices and these indices should comprise aggregations of data in meaningful ways, based on geographical or temporal units.\n\n3.4.1 Origin-based indicators\nWe start by computing indicators from the perspective of origin areas. We generate a set of five indicators capturing average and cumulative patterns at the monthly level. We compute the following indicators:\n\nmean_perchange: is the average percent change in the count of movements from a given origin in relation to the baseline period over a month. It is computed as the average of the ratio of the number of movements from an area at time period t, minus the number of movements from an area during the baseline pre-pandemic period over the number of pmovements from an area during the baseline period.\nmean_diff_flow: is the difference in the count of movements from a given origin in relation to the baseline period over a month. It is computed as the difference between the number of movements from an area at time period t, minus the number of movements from an area during the baseline pre-pandemic period.\nsum_diff_flow: is the sum of the difference in the count of movements from a given origin in relation to the baseline period. It is computed as the sum of the difference between the number of movements from an area at time period t, minus the number of movements from an area during the baseline pre-pandemic period.\nmean_outflow: is the average count of movements from a given origin at a give time period over a month.\nsum_outflow: is the sum of the count of movements from a given origin at a give time period over a month.\n\n\norigin_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(start_polygon_name) %>% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_outflow = mean(n_crisis, na.rm = T),\n    sum_outflow = sum(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\ntail(origin_df, 10)\n\n# A tibble: 10 × 6\n   start_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_outflow\n   <chr>                       <dbl>          <dbl>         <dbl>        <dbl>\n 1 Santiago                   -70.6         -792.      -1309523.         612. \n 2 Talagante                  -33.8         -263.       -127657.         269. \n 3 Talca                      -52.4         -150.        -70768          115. \n 4 Tamarugal                   24.0          -53.0        -7261.          90.8\n 5 Tierra del Fuego           -76.7          -19.8         -119.          12.2\n 6 Tocopilla                  147.            -4.23        -702.          38.5\n 7 Valdivia                   -75.8         -234.        -65400.          48.3\n 8 Valparaíso                 -62.3         -350.       -257762.         169. \n 9 Ñuble                      -62.5         -165.        -56482.          60.4\n10 Última Esperanza             1.77         -21.4          -21.4         10  \n# ℹ 1 more variable: sum_outflow <dbl>\n\n\nWe observe the observations at the tail of the data frame. We observe that Santiago recorded an average reduction of over 70% in the count of movements from Santiago in April 2020, in relation to the baseline. Yet, the average size of this reduction in outflows seems to have been relatively small, involving 792 and reporting an average outflow of 612 movements.\n\n\n\n\n\n\nQuestion 1\n\n\n\nAnalyse the origin-based indicators and interpret the patterns displayed for Valparaíso.\n\n\n\n\n3.4.2 Destination-based indicators\nMobility involves the spatial interaction between two areas. Mobility impacts both areas of origins and destinations (Rowe, Lovelace, and Dennett 2022). We often seek to understand both perspectives. Here we compute similar indicators to those calculated for the areas of origins. What interesting patterns can you see?\n\n\n\n\n\n\nQuestion 2\n\n\n\nAnalyse the designation-based indicators and interpret the patterns displayed for Santiago.\n\n\n\ndestination_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(end_polygon_name) %>% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_inflow = mean(n_crisis, na.rm = T),\n    sum_inflow = sum(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\ntail(destination_df, 10)\n\n# A tibble: 10 × 6\n   end_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_inflow\n   <chr>                     <dbl>          <dbl>         <dbl>       <dbl>\n 1 Santiago                  -72.1       -850.        -1336029.       639. \n 2 Talagante                 -30.3       -266.         -128140        273. \n 3 Talca                     -52.1       -147.          -68827        117. \n 4 Tamarugal                  30.0        -49.4          -7360.        88.9\n 5 Tierra del Fuego          -68.3        -16             -112         13.1\n 6 Tocopilla                  63.3         -0.899         -165.        36.6\n 7 Valdivia                  -71.2       -230.          -63284.        48.2\n 8 Valparaíso                -66.2       -341.         -245913.       170. \n 9 Ñuble                     -63.1       -158.          -57870.        58.0\n10 Última Esperanza          -12.8        NaN                0        NaN  \n# ℹ 1 more variable: sum_inflow <dbl>\n\n\n\n\n3.4.3 Intraflows\nMeta-Facebook mobility data also allow us to capture short-distance, local movements occurring within areas. Below we compute indicators to measure the extent of movement within Chilean provinces, adopting similar indices to those described above.\nA key pattern is an increase in the number of movements within provinces in April 2020. This is likely to have been in response to COVID-19 restrictions constraining the amount of movement over long distances. If people moved, they mostly moved locally to go shopping, parks or for short walks. Yet, we also observe that some provinces report a decline.\n\n\n\n\n\n\nQuestion 3\n\n\n\nWhy do you think those areas experienced a decline in local mobility in April 2020?\n\n\n\norigin_df <- df20 %>% \n  filter(start_polygon_name == end_polygon_name) %>% \n  group_by(start_polygon_name) %>% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_intraflow = mean(n_crisis, na.rm = T),\n    sum_intraflow = sum(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\ntail(origin_df, 10)\n\n# A tibble: 10 × 6\n   start_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_intraflow\n   <chr>                       <dbl>          <dbl>         <dbl>          <dbl>\n 1 Santiago                    6.00         32253.       2902809.        585443 \n 2 Talagante                  24.0           3776.        339841.         19627.\n 3 Talca                       4.48          1479.        133093.         34622.\n 4 Tamarugal                 -15.4           -612.        -55063.          3342.\n 5 Tierra del Fuego            1.62            13.6         1228.           886.\n 6 Tocopilla                  14.5            121.         10931            976.\n 7 Valdivia                  -10.6          -2895.       -260512.         24506.\n 8 Valparaíso                 -1.27         -1295.       -116524.        101255.\n 9 Ñuble                      -0.441         -158.        -14207.         36391.\n10 Última Esperanza          -18.7           -164.        -14750.           712.\n# ℹ 1 more variable: sum_intraflow <dbl>\n\n\n\n\n3.4.4 Netflows\nAn additional key dimension of mobility is its net balance; that is, the extent to which human mobility acts to redistribute population across areas of the country. While some areas report population gains, other experience decline.\nDuring the early stages of COVID-19, photo evidence of empty cities around the world poured over the Internet. Anecdotal evidence suggested the occurrence of an urban exodus, particularly from large cities as people sought more and greener spaces (see some our work on COVID and mobility, e.g. Rowe et al. 2022). At the same time, they sought to avoid high density areas, and they realised the need for bigger housing areas as they become multi-functional spaces for work, study and leisure for entire family units. People were said to have moved to sparsely populated rural areas, suburban spaces and more attractive migration destinations.\nBelow we compute a measure of the net balance of mobility flows between areas of origin and destination. We use the average number of movements into an areas, minus the number of movements out of that area. We have a look at the head of the data frame and observe that the average net mobility balance is virtually zero. However, at this point, we should recognise that while indicators are useful to measure different dimensions of human mobility, data visualisations are key to identify systematic patterns in the data.\n\n# mean outflow by area\noutflows_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(start_polygon_name) %>% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# mean inflow by area\ninflows_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(end_polygon_name) %>% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# combine data frames\nnetflow_df <- cbind(inflows_df, outflows_df)\n\n# mean netflow by area\nnetflow_df <- netflow_df %>% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %>% \n  select(start_polygon_name, end_polygon_name, mean_inflow, mean_outflow, mean_netflow)\n\nhead(netflow_df)\n\n  start_polygon_name end_polygon_name mean_inflow mean_outflow mean_netflow\n1        Antofagasta      Antofagasta    63.27513     66.00571    -2.730582\n2             Arauco           Arauco    91.14286     93.48276    -2.339901\n3              Arica            Arica    17.44444     20.16379    -2.719349\n4              Aysen            Aysen    28.47297     27.15385     1.319127\n5            Bío-Bío          Bío-Bío    77.86880     79.00000    -1.131195\n6          Cachapoal        Cachapoal   110.54008    112.71988    -2.179800\n\n\nGenerally a useful graphical representation of the data is histograms or kernel density histograms. They are helpful to easily have an understanding of the distribution of mobility indicators. The histogram below reveals that while most areas report an average net mobility balance of zero, some areas display losses or gains of over 10 or 20 movements, respectively.\n\n\n\n\n\n\nNote\n\n\n\nggplot is a primary tool for data visualisation in R. ggplot has a basic structure of three components:\n\nThe data: ggplot( data = data frame)\nGeometries: geom_xxx( . )\nAesthetic mapping: aes(x=variable, y=variable)\n\nThen you can work on the cosmetics of the figure such as changing the theme, axis, labels, etc.\n\n\n\nggplot(data = netflow_df) + # input the data\n  geom_density(aes(x = mean_netflow), # specify type of geom and aesthetics\n               alpha=0.5, \n               colour=\"darkblue\", \n               linewidth = 2\n               ) +\n  theme_tufte() + # choose the theme\n  theme(axis.text.y = element_text(size = 12), # edit labels format\n        axis.text.x = element_text(size = 12),\n        axis.title=element_text(size=14)\n                    ) + \n  labs(y = \"Density\", # label axis\n       x = \"Average net movement count\")"
  },
  {
    "objectID": "spatial-patterns.html#mapping",
    "href": "spatial-patterns.html#mapping",
    "title": "3  Spatial patterns",
    "section": "3.5 Mapping",
    "text": "3.5 Mapping\nOnce you get a basic understanding of the data, you may want to have a more insightful representation of mobility indicators and add some context. Geospatial visualisations are great for these purposes, and for this end, cartography is key. A carefully crafted map can be an effective way of communicating complex information. Design issues include poor placement, size and readability of text and careless selection of colors. Have a look the style guide of the Journal of Maps for details, and also at the use of colours for effective communication. We recommend this piece by Crameri, Shephard, and Heron (2020) and Maceachren and Kraak (1997).\n\n\n\n\n\n\nQuestion 4\n\n\n\nWhy to create geovisualisations?\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor colour palettes, we recommend the following resources:\n\nthe R packages viridis and RColorBrewer\nthe website color brewer 2.0\na publication by Crameri, Shephard, and Heron (2020)\n\n\n\n\n3.5.1 Handling spatial data\nBut, before we get to map some data, there are some key elements we need to cover first. We will show you how to handle spatial data in R. As we indicated earlier in this section, sf is versatile R package to handle spatial data frames in R. A first key thing you need to know about spatial data is that they always have attached a CRS and ensuring there is a commonly shared CRS across your data is essential for mapping. We will be using a planar system, as opposed to a spherical system. We set our default CRS.\n\n# set crs\ncrs_default = \"EPSG:4326\"\n\nTo ensure you get a full understanding of the process of mapping, we will roll back and start from the beginning. We will re-read the data and re-compute the indicators, but this time we will convert our movement dataset into a spatial data frame by using the latitude and longitude of the origins as coordinates. This information will be used to convert our movement data frame into a spatial data frame using the latitude and longitude of the origins as geometry.\n\ndf20 <- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %>% \n  mutate(GEOMETRY = NULL) %>% \n  dplyr::filter(country == \"CL\") %>% \n  st_as_sf(coords = c(\"start_lon\", \"start_lat\"), \n                                      crs = crs_default)\n\nglimpse(df20)\n\nRows: 29,491\nColumns: 18\n$ date_time                    <chr> \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"…\n$ start_polygon_id             <chr> \"60845\", \"60862\", \"60845\", \"60862\", \"6086…\n$ start_polygon_name           <chr> \"Antofagasta\", \"Cardenal Caro\", \"Antofaga…\n$ end_polygon_id               <chr> \"60847\", \"60890\", \"60846\", \"60863\", \"6089…\n$ end_polygon_name             <chr> \"Tocopilla\", \"Melipilla\", \"El Loa\", \"Colc…\n$ length_km                    <dbl> 139.7543134, 24.0764953, 100.3339392, 24.…\n$ tile_size                    <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n$ country                      <chr> \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ level                        <chr> \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"…\n$ n_crisis                     <dbl> 79, 18, 320, 71, NA, 369, NA, 20, 11, NA,…\n$ n_baseline                   <dbl> 59.50, 25.50, 671.00, 132.75, NA, 559.25,…\n$ n_difference                 <dbl> 19.50, -7.50, -351.00, -61.75, NA, -190.2…\n$ percent_change               <dbl> 32.231405, -28.301887, -52.232143, -46.16…\n$ is_statistically_significant <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ z_score                      <dbl> 2.0148470, -0.6837043, -4.0000000, -1.261…\n$ end_lat                      <dbl> -22.06894, -33.75413, -22.81611, -34.7036…\n$ end_lon                      <dbl> -69.60081, -71.19829, -68.20015, -71.0631…\n$ geometry                     <POINT [°]> POINT (-69.56718 -24.32798), POINT …\n\n\nWe will also re-read our province boundary data and ensure it is on the same CRS.\n\nshp_pro <- read_sf(\"./data/shp/adm/province/PROVINCIAS_2020.shp\") %>% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %>%  # 1km\n  sf::st_make_valid() %>% \n  st_transform(crs_default)\n\nOnce we have read our input data, we will re-compute a few of mobility indicators.\n\n# mean outflow by area\noutflows_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(start_polygon_name) %>% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# mean inflow by area\ninflows_df <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(end_polygon_name) %>% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup() %>% \n  st_drop_geometry()\n\n# combine data frames\nnetflow_df <- cbind(outflows_df, inflows_df)\n\n# mean netflow by area\nnetflow_df <- netflow_df %>% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %>% \n  dplyr::select(start_polygon_name, mean_inflow, mean_outflow, mean_netflow, geometry) %>% \n  rename(\n    polygon_name = start_polygon_name\n  ) \n\nhead(netflow_df)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -73.58022 ymin: -45.45868 xmax: -69.56718 ymax: -18.71308\nGeodetic CRS:  WGS 84\n  polygon_name mean_inflow mean_outflow mean_netflow\n1  Antofagasta    63.27513     66.00571    -2.730582\n2       Arauco    91.14286     93.48276    -2.339901\n3        Arica    17.44444     20.16379    -2.719349\n4        Aysen    28.47297     27.15385     1.319127\n5      Bío-Bío    77.86880     79.00000    -1.131195\n6    Cachapoal   110.54008    112.71988    -2.179800\n                     geometry\n1 POINT (-69.56718 -24.32798)\n2  POINT (-73.3454 -37.72772)\n3 POINT (-69.85541 -18.71308)\n4 POINT (-73.58022 -45.45868)\n5 POINT (-71.92786 -37.53828)\n6  POINT (-70.7088 -34.28421)\n\n\nNow let’s start mapping our data. Let’s do this by stage so you understand the key building blocks of this process. We first drawn the polygons representing the provinces of Chile.\n\np <- ggplot() + \n  geom_sf(data = shp_pro,\n          color = \"gray60\", \n          size = 0.1)\nlast_plot()\n\n\n\n\nLet’s add the centroids of the origins based on our movement data.\n\np <- p +\n  geom_point(data = netflow_df,\n    aes(geometry = geometry),\n    stat = \"sf_coordinates\"\n  ) \nlast_plot()\n\n\n\n\nThen we can remove the axes or background here:\n\np + theme_void()\n\n\n\n\nThe map is placed towards the right. We can centre the map by adjusting the bounding box of the shapefile. We can do this by obtaining the current bounding box and adjusting the x left limit.\n\nbbox_new <- st_bbox(shp_pro) # current bounding box\n\nxrange <- bbox_new$xmax - bbox_new$xmin # range of x values\nyrange <- bbox_new$ymax - bbox_new$ymin # range of y values\n\nbbox_new[1] <- bbox_new[1] + (0.6 * xrange) # xmin - left\n#bbox_new[3] <- bbox_new[3] + (0.5 * xrange) # xmax - right\n#bbox_new[2] <- bbox_new[2] - (0.5 * yrange) # ymin - bottom\n#bbox_new[4] <- bbox_new[4] + (0.5 * yrange) # ymax - top\n\nbbox_new <- bbox_new %>%  # take the bounding box ...\n  st_as_sfc() # ... and make it a sf polygon\n\nggplot() + \n  geom_sf(data = shp_pro,\n          color = \"gray60\", \n          size = 0.1) +\n  geom_point(data = netflow_df,\n    aes(geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = .1\n  ) +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], # min & max of x values\n           ylim = st_coordinates(bbox_new)[c(2,3),2]) + # min & max of y values\n  theme_void()\n\n\n\n\nSomething to note at this point is that two of the centroids lie outside the provincial polygons. This is difficult to visualise from the current map. We will find out this in a different way. We run a spatial join of the provincial polygons and our movement data frame, and check the provinces which were not matched. Below we can observe the result of this process. The provinces of Magallanes and Valparaíso were unmatched. That is because their centroids lie outside the polygon area. In the case of Valparaiso, islands attached to this province force the centroid to be position on the Pacific. In the case of Magallanes, the unusual shape of the province surrounded by fjords forces the centroid to be on the Pacific as well.\n\n# spatial join\nmob_indicators <- st_join(shp_pro, netflow_df)\n# check if all polygons are matched\nnetflow_df$check <- netflow_df$polygon_name %in% mob_indicators$polygon_name\n# identify unmatched polygons\nnetflow_df %>% select(polygon_name, check) %>% \n  filter(check == \"FALSE\")\n\nSimple feature collection with 2 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -71.75919 ymin: -53.0857 xmax: -71.70694 ymax: -33.14564\nGeodetic CRS:  WGS 84\n  polygon_name check                    geometry\n1   Magallanes FALSE  POINT (-71.70694 -53.0857)\n2   Valparaíso FALSE POINT (-71.75919 -33.14564)\n\n\nWe therefore adjust these centriods and force them to be within the polygons of provinces.\n\n# get coordinates\ncoordinates <- st_coordinates(netflow_df) \n# combine data frames\nnetflow_df <- cbind(netflow_df, coordinates) %>% \n  rename(\n    long = X, \n    lat = Y\n  )\n# list province to be adjusted\nprovince_name <- c(\"Valparaíso\", \"Magallanes\")\n# adjust the centroid\nfor (area in 1:2) {\n  long <- netflow_df %>% \n    st_drop_geometry() %>% \n    dplyr::filter(polygon_name == province_name[area]) %>% \n    select(long) %>% \n    as.numeric()\n  \n  lat <- netflow_df %>% \n    st_drop_geometry() %>%\n    dplyr::filter(polygon_name == province_name[area]) %>% \n    select(lat) %>% \n    as.numeric()\n\n  st_geometry(netflow_df[netflow_df$polygon_name == province_name[area], ]) <-  st_sfc(st_point(c( long * 0.98, lat * 1 )))\n}\n\nWe re-join the polygon boundary data and our movement data frame and check the results. We can now see that all spatial units were matched.\n\nmob_indicators <- st_join(shp_pro, netflow_df, \n                          st_intersects)\n\nnetflow_df$check <- netflow_df$polygon_name %in% mob_indicators$polygon_name\n\nnetflow_df %>% select(polygon_name, check) %>% \n  filter(check == \"FALSE\")\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] polygon_name check        geometry    \n<0 rows> (or 0-length row.names)\n\n\nSo far, we have only wrangled the data so we can start out mapping and spatial analysis.\n\n\n3.5.2 Choropleths\nWe first try choropleths. Choropleths are thematic maps. They are easy to create but also to get wrong. We will look at a set of the principles you can follow to create effective choropleth maps. Here three more questions to consider:\n\nWhat is being plotted?\nWhat is the target audience?\nWhat degree of interactivity we want to offer?\n\nWe will create maps of netflows, inflows and outflows. We will divide the data into categories. Categorising the data often facilites the identification of spatial patterns. There are different forms of organising these categories using quantiles, natural break points or more sophisticated clustering approaches. We will keep this simple and use seven categories. Feel free to explore the impacts on the map as these categories change.\n\n# set categories\nmob_indicators <- mob_indicators %>% \n  mutate(\n    netflow_class = mean_netflow %>% cut(7, dig.lab = 3),\n    inflow_class = mean_inflow %>% cut(7, dig.lab = 3),\n    outflow_class = mean_outflow %>% cut(7, dig.lab = 3)\n  ) \n\n# adjust labels for netflows\nnetflow_labels <- levels(mob_indicators$netflow_class)\nnetflow_labels <- gsub(\"\\\\(|\\\\]\", \"\", netflow_labels)\nlevels(mob_indicators$netflow_class) <- netflow_labels\n\n# adjust labels for inflows\ninflow_labels <- levels(mob_indicators$inflow_class)\ninflow_labels <- gsub(\"\\\\(|\\\\]\", \"\", inflow_labels)\nlevels(mob_indicators$inflow_class) <- inflow_labels\n\n# adjust labels for netflows\noutflow_labels <- levels(mob_indicators$outflow_class)\noutflow_labels <- gsub(\"\\\\(|\\\\]\", \"\", outflow_labels)\nlevels(mob_indicators$outflow_class) <- outflow_labels\n\n# change geometry\nshp_reg <- shp_reg %>% st_transform(crs_default)\n\nBelow we use ggplot to create our maps.\n\n# map netflows\nnetflow_plot <- ggplot(data = mob_indicators, aes(fill = netflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"RdBu\", direction = -1) +\n  scale_color_manual(labels = netflow_labels) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(a) Netflow\",\n       fill = \"Net count of moves\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\n# map inflows\ninflow_plot <- ggplot(data = mob_indicators, aes(fill = inflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"PuRd\", direction = 1) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(b) Inflow\",\n       fill = \"Count of moves\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\n# map outflows\noutflow_plot <- ggplot(data = mob_indicators, aes(fill = outflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"PuBu\", direction = 1) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(b) Outflow\",\n       fill = \"Count of moves\") +\n  theme_void() +\n    geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\n# combine plots\nnetflow_plot + inflow_plot + outflow_plot\n\n\n\n\nThe maps display the average count of movement across provinces in Chile. In relative terms, they indicate that some of central provinces experienced larger losses compared to northern and southern provinces. Central provinces also display the largest average counts of movement. This is expected as these areas concentrate most of the Chilean population, and larger population centres are expected to generate more movement.\nFlow to Facebook population size\nWhen using digital footprint data, a key concern is whether the data are biased or representative of the local populations (Rowe 2023). In the context of mobility, for instance, we would expect that we would observe more movement where we observe a larger number of Meta-Facebook active users. To explore this, we could analyse the ratio of movement over the number of Meta-Facebook active users by area. High spatial variability in this ratio would be evidence of biases in the Meta-Facebook data capturing mobility. We compute the average number of outflow movement over the average Meta-Facebook active user population by province. The results are quite revealing, showing remarkable little variation across provinces. This suggests very little evidence of biases in the Meta-Facebook data to capture mobility. Of course, this evidence only applies for Chile. But this analysis could be easily implemented on data for other countries.\n\n# compute mean population\nmean_fb_pop <- pop20_df %>% group_by(polygon_name) %>% \n  dplyr::summarise(\n    mean_pop = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# join to mobility indicators data frame\nmob_indicators <- left_join(mob_indicators, mean_fb_pop, \n                        by = c(\"polygon_name\" = \"polygon_name\")) %>% \n  mutate(\n    outflow_to_pop = (mean_outflow / mean_pop) # compute outflow to population\n  )\n\n# map outflow_to_pop\nggplot(data = mob_indicators, aes(fill = outflow_to_pop)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_viridis_c() +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"Flows to population size\",\n       fill = \"Number of movements per 100\") +\n  theme_void() +\n    geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .1,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2])\n\n\n\n\nChanges over time\nMaps are also an effective way of analysing spatial patterns over time. Below we show us how you can analyse the average count of net movement for April 2020 and April 2022 using ggplot. Different from the maps above, here we use a continous scale to map the data. We can see slight variations in the net balance of movement.\n\n\n\n\n\n\nQuestion 5\n\n\n\nWhat interesting patterns do you see?\n\n\n\n# read April 2022 data\ndf22 <- readRDS(\"./data/fb/movement_adm/2022_04.rds\") %>% \n  mutate(GEOMETRY = NULL) %>% \n  dplyr::filter(country == \"CL\") %>% \n  st_as_sf(coords = c(\"start_lon\", \"start_lat\"), \n                                      crs = crs_default)\n\n# mean outflow by area\noutflows_df <- df22 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(start_polygon_name) %>% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# mean inflow by area\ninflows_df <- df22 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(end_polygon_name) %>% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup() %>% \n  st_drop_geometry()\n\n# combine data frames\nnetflow_df <- cbind(outflows_df, inflows_df)\n\n# mean netflow by area\nnetflow_df <- netflow_df %>% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %>% \n  dplyr::select(start_polygon_name, mean_inflow, mean_outflow, mean_netflow, geometry) %>% \n  rename(\n    polygon_name = start_polygon_name\n  ) \n\n# extract coordinates\ncoordinates <- st_coordinates(netflow_df) \n\n# add coordinates\nnetflow_df <- cbind(netflow_df, coordinates) %>% \n  rename(\n    long = X, \n    lat = Y\n  )\n\n# list province names\nprovince_name <- c(\"Valparaíso\", \"Magallanes\")\n\n# loop to replace point geometries\nfor (area in 1:2) {\n  long <- netflow_df %>% \n    st_drop_geometry() %>% \n    dplyr::filter(polygon_name == province_name[area]) %>% \n    select(long) %>% \n    as.numeric()\n  \n  lat <- netflow_df %>% \n    st_drop_geometry() %>%\n    dplyr::filter(polygon_name == province_name[area]) %>% \n    select(lat) %>% \n    as.numeric()\n\n  st_geometry(netflow_df[netflow_df$polygon_name == province_name[area], ]) <-  st_sfc(st_point(c( long * 0.98, lat * 1 )))\n}\n\n# combine indicators with province polygons\nmob_indicators22 <- st_join(shp_pro, netflow_df, \n                          st_intersects)\n\n# add year to data frame\nmob_indicators$year <- \"2020\"\nmob_indicators22$year <- \"2022\"\n\n# combine data frames for 2020 and 2022\nmob_indicators <- mob_indicators %>% select(names(mob_indicators22)) # remove columns to make data frames compatible\nmob_indicators_20.22 <- rbind(mob_indicators, mob_indicators22)\n\n\n\n\n\n\n\nNote\n\n\n\nWe note that facet_grid(.) is a useful function to know if you intend to produce figures by layers and these layers are defined by a different variable / column in your data frame. In our example, this is year.\n\n\n\n# map netflows\nggplot(data = mob_indicators_20.22, aes(fill = mean_netflow)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_gradient2(\n    low = muted(\"blue\"),\n    mid = \"white\",\n    high = \"red\",\n    midpoint = 0,\n    space = \"Lab\",\n    na.value = \"white\",\n    guide = \"colourbar\",\n    aesthetics = \"fill\"\n    ) +\n  theme_map() +\n  facet_grid(cols = vars(year)) +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"Netflow\",\n       fill = \"Number of movements\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\n\n\n\n\n\n3.5.3 Interactive mapping\nAn alternative way to analyse the data is using interactive maps. Interactive maps provide greater flexibility to explore the data by adding a base map for greater context. We use tmap for this task. tmap is a great package for mapping and you should probably add it to your toolbox if you are working on geographic information systems using R.\nWe map the average net count of movement for April 2022. We first enable interactivity by running tmap_mode(\"view\") and then create the map. Using the menu on the left top of the map below, we can zoom in and out to explore the map and also change the base layer. We can also display or hide the colouring layers of our indicator. This allows to see the names of the areas experiencing net gains and losses of moves.\n\n# create a map\ntmap_mode(\"view\") # enable interactivity\ntm_shape(mob_indicators22) + # input data\n    tm_fill(\"mean_netflow\", # draw and fill polygons\n          palette = \"RdBu\",\n          title = \"Netflows\")\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe use ttm() to switch off the interactive functionality of tmap.\n\n\n\n# switch to other mode: \"view\"\nttm()\n\ntmap mode set to plotting\n\n\n\n\n3.5.4 Flow mapping\nAn additional key dimension of the analysis of origin-destination flow data is visually understanding the relationship between origins and destinations. This helps understanding the extent of interaction of individual areas with the rest of the country, and also informs how changes in a specific area may impact others - see for example Rowe and Patias (2020) and Rowe (2022). Flow maps are often used to visualise the complex network of mobility flows between areas. A recently developed tool for this end is mapbox. If you want to use mapbox you need to sign up. You can create an account for free to use some basic products. We can use mapbox through the mapdeck package in R.\nSo you have a start-to-end understanding of the process, we will begin from loading the input movement data. We compute the average count by origin-destination pair for April 2020, and prepare a data frame containing origin and destination coordinates.\n\n# read data\ndf20 <- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %>% \n  mutate(GEOMETRY = NULL) %>% \n  dplyr::filter(country == \"CL\") \n\n# compute mean move by origin-destination pair\nflow_df20 <- df20 %>% \n  filter(start_polygon_name != end_polygon_name) %>% \n  group_by(start_polygon_name, end_polygon_name) %>% \n  dplyr::summarise(\n    mean_flow = mean(n_crisis, na.rm = T)\n    ) %>% \n  ungroup()\n\n# create a coordinate data frame for origins\norigin_coordinate_df <- df20 %>% \n  dplyr::select( c(start_polygon_name, start_lat, start_lon)) %>% \n  distinct()\n\n# create a coordinate data frame for destinations\ndestination_coordinate_df <- df20 %>% \n  dplyr::select( c(end_polygon_name, end_lat, end_lon)) %>% \n  distinct()\n\n# join coordinates for origins and destinations\nflow_df20 <- left_join(flow_df20, origin_coordinate_df, by = c(\"start_polygon_name\" = \"start_polygon_name\"))\nflow_df20 <- left_join(flow_df20, destination_coordinate_df, by = c(\"end_polygon_name\" = \"end_polygon_name\"))\n\nFor our illustration, we will focus on the province of Santiago.\n\ndf_santiago <- flow_df20 %>% dplyr::filter(start_polygon_name == \"Santiago\")\n\nhead(df_santiago)\n\n# A tibble: 6 × 7\n  start_polygon_name end_polygon_name mean_flow start_lat start_lon end_lat\n  <chr>              <chr>                <dbl>     <dbl>     <dbl>   <dbl>\n1 Santiago           Antofagasta           33.3     -33.4     -70.5   -24.3\n2 Santiago           Arauco               NaN       -33.4     -70.5   -37.7\n3 Santiago           Arica                 17.8     -33.4     -70.5   -18.7\n4 Santiago           Bío-Bío               18.5     -33.4     -70.5   -37.5\n5 Santiago           Cachapoal            292.      -33.4     -70.5   -34.3\n6 Santiago           Cardenal Caro         13.3     -33.4     -70.5   -34.3\n# ℹ 1 more variable: end_lon <dbl>\n\n\n\n\n\nTo use mapbox, you will need to sign up for an account on the mapbox website. For this workshop, we have generated a key to share but we strongly suggest to create an account as the key will last for a certain period of time. The map generated is interactive. If you can explore it by clicking on it and moving your mouse. If you can also zoom in and out by double-clicking.\nA striking pattern of the map below is the high degree of connectivity of Santiago with the rest of the country. Flows from Santiago not only extend to proximate and adjacent provinces but extend to far provinces in the north and south of the country.\n\nkey <- my_key ## put your own token here\n\nflowmap <- mapdeck( token = key, style = mapdeck_style(\"dark\"),\n                location = c(-3.7, 40.4), zoom = 6, pitch = 45) %>%\n  add_arc(\n    data = df_santiago,\n    layer_id = \"arc_layer\",\n    origin = c(\"start_lon\", \"start_lat\"),\n    destination = c(\"end_lon\", \"end_lat\"),\n    # stroke_from = \"start_polygon_name\",\n    # stroke_to = \"end_polygon_name\",\n    # stroke_width = \"stroke\",\n    palette = \"reds\",\n    legend = list( stroke_from = F, stroke_to = F ),\n  )\n\n# plot the interactive map\nflowmap\n\n\n\n\n\n\n\n\n\n\n\nQuestion 6\n\n\n\nCreate a flow map for your province of interest.\n\n\n\n\n\n\nAppelhans, Tim, Florian Detsch, Christoph Reudenbach, and Stefan Woellauer. 2022. Mapview: Interactive Viewing of Spatial Data in r. https://github.com/r-spatial/mapview.\n\n\nBaddeley, Adrian, Ege Rubak, and Rolf Turner. 2015. Spatial Point Patterns: Methodology and Applications with r. CRC press.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat: Spatial Point Pattern Analysis, Model-Fitting, Simulation, Tests. http://spatstat.org/.\n\n\nBivand, Roger. 2022. Spdep: Spatial Dependence: Weighting Schemes, Statistics.\n\n\nBivand, Roger, and Gianfranco Piras. 2022. Spatialreg: Spatial Regression Analysis. https://CRAN.R-project.org/package=spatialreg.\n\n\nCrameri, Fabio, Grace E. Shephard, and Philip J. Heron. 2020. “The Misuse of Colour in Science Communication.” Nature Communications 11 (1). https://doi.org/10.1038/s41467-020-19160-7.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2023. S2: Spherical Geometry Operators Using the S2 Geometry Library. https://CRAN.R-project.org/package=s2.\n\n\nGonzález-Leonardo, Miguel, Antonio López-Gay, Niall Newsham, Joaquín Recaño, and Francisco Rowe. 2022. “Understanding Patterns of Internal Migration During the COVID-19 Pandemic in Spain.” Population, Space and Place 28 (6). https://doi.org/10.1002/psp.2578.\n\n\nGonzález-Leonardo, Miguel, and Francisco Rowe. 2022. “Visualizing Internal and International Migration in the Spanish Provinces During the COVID-19 Pandemic.” Regional Studies, Regional Science 9 (1): 600–602. https://doi.org/10.1080/21681376.2022.2125824.\n\n\nGonzález-Leonardo, Miguel, Francisco Rowe, and Alberto Fresolone-Caparrós. 2022. “Rural Revival? The Rise in Internal Migration to Rural Areas During the COVID-19 Pandemic. Who Moved and Where?” Journal of Rural Studies 96 (December): 332–42. https://doi.org/10.1016/j.jrurstud.2022.11.006.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019. Geocomputation with r. CRC Press.\n\n\nMaceachren, Alan M., and Menno-Jan Kraak. 1997. “Exploratory Cartographic Visualization: Advancing the Agenda.” Computers & Geosciences 23 (4): 335–43. https://doi.org/10.1016/s0098-3004(97)00018-6.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2022a. Sf: Simple Features for r. https://CRAN.R-project.org/package=sf.\n\n\n———. 2022b. Stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://CRAN.R-project.org/package=stars.\n\n\n———. 2023. Lwgeom: Bindings to Selected Liblwgeom Functions for Simple Features. https://github.com/r-spatial/lwgeom/.\n\n\nPebesma, Edzer J. 2004. “Multivariable Geostatistics in S: The Gstat Package.” Computers & Geosciences 30 (7): 683–91. https://doi.org/10.1016/j.cageo.2004.03.012.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With Applications in r. CRC Press.\n\n\nPebesma, Edzer, and Benedikt Graeler. 2022. Gstat: Spatial and Spatio-Temporal Geostatistical Modelling, Prediction and Simulation. https://github.com/r-spatial/gstat/.\n\n\nRowe, Francisco. 2022. “Using Digital Footprint Data to Monitor Human Mobility and Support Rapid Humanitarian Responses.” Regional Studies, Regional Science 9 (1): 665–68. https://doi.org/10.1080/21681376.2022.2135458.\n\n\n———. 2023. “Big Data.” In, 42–47. Edward Elgar Publishing. https://doi.org/10.4337/9781800883499.ch09.\n\n\nRowe, Francisco, Alessia Calafiore, Daniel Arribas-Bel, Krasen Samardzhiev, and Martin Fleischmann. 2022. “Urban Exodus? Understanding Human Mobility in Britain During the COVID-19 Pandemic Using Meta-Facebook Data.” Population, Space and Place 29 (1). https://doi.org/10.1002/psp.2637.\n\n\nRowe, Francisco, Miguel González-Leonardo, and Tony Champion. 2023. “Virtual Special Issue: Internal Migration in Times of COVID-19.” Population, Space and Place, March. https://doi.org/10.1002/psp.2652.\n\n\nRowe, Francisco, Robin Lovelace, and Adam Dennett. 2022. “Spatial Interaction Modelling: A Manifesto.” http://dx.doi.org/10.31219/osf.io/xcdms.\n\n\nRowe, Francisco, and Nikos Patias. 2020. “Mapping the Spatial Patterns of Internal Migration in Europe.” Regional Studies, Regional Science 7 (1): 390–93. https://doi.org/10.1080/21681376.2020.1811139.\n\n\nSchwartz, Joe et al. 2009. “Bing Maps Tile System.” Microsoft Developer Network Available: Http://Msdn. Microsoft. Com/En-Us/Library/Bb259689. Aspx.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2022. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWang, Yikang, Chen Zhong, Qili Gao, and Carmen Cabrera-Arnau. 2022. “Understanding Internal Migration in the UK Before and During the COVID-19 Pandemic Using Twitter Data.” Urban Informatics 1 (1). https://doi.org/10.1007/s44212-022-00018-w."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Appelhans, Tim, Florian Detsch, Christoph Reudenbach, and Stefan\nWoellauer. 2022. Mapview: Interactive Viewing of Spatial Data in\nr. https://github.com/r-spatial/mapview.\n\n\nBaddeley, Adrian, Ege Rubak, and Rolf Turner. 2015. Spatial Point\nPatterns: Methodology and Applications with r. CRC press.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat:\nSpatial Point Pattern Analysis, Model-Fitting, Simulation, Tests.\nhttp://spatstat.org/.\n\n\nBivand, Roger. 2022. Spdep: Spatial Dependence: Weighting Schemes,\nStatistics.\n\n\nBivand, Roger, and Gianfranco Piras. 2022. Spatialreg: Spatial\nRegression Analysis. https://CRAN.R-project.org/package=spatialreg.\n\n\nCrameri, Fabio, Grace E. Shephard, and Philip J. Heron. 2020. “The\nMisuse of Colour in Science Communication.” Nature\nCommunications 11 (1). https://doi.org/10.1038/s41467-020-19160-7.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2023. S2: Spherical\nGeometry Operators Using the S2 Geometry Library. https://CRAN.R-project.org/package=s2.\n\n\nGonzález-Leonardo, Miguel, Antonio López-Gay, Niall Newsham, Joaquín\nRecaño, and Francisco Rowe. 2022. “Understanding Patterns of\nInternal Migration During the COVID-19 Pandemic in\nSpain.” Population, Space and Place 28 (6). https://doi.org/10.1002/psp.2578.\n\n\nGonzález-Leonardo, Miguel, and Francisco Rowe. 2022. “Visualizing\nInternal and International Migration in the Spanish Provinces During the\nCOVID-19 Pandemic.” Regional Studies, Regional Science 9\n(1): 600–602. https://doi.org/10.1080/21681376.2022.2125824.\n\n\nGonzález-Leonardo, Miguel, Francisco Rowe, and Alberto\nFresolone-Caparrós. 2022. “Rural Revival? The Rise in Internal\nMigration to Rural Areas During the COVID-19 Pandemic. Who Moved and\nWhere?” Journal of Rural Studies 96 (December): 332–42.\nhttps://doi.org/10.1016/j.jrurstud.2022.11.006.\n\n\n“Learn about Your Location Privacy | Privacy Center | Manage Your\nPrivacy on Facebook, Instagram and Messenger | Facebook Privacy.”\nhttps://www.facebook.com/privacy/guide/location/.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019.\nGeocomputation with r. CRC Press.\n\n\nMaas, Paige, Shankar Iyer, Andreas Gros, Wonhee Park, Laura McGorman,\nChaya Nayak, and P. Alex Dow. 2019. “Facebook Disaster Maps:\nAggregate Insights for Crisis Response & Recovery.” In\nProceedings of the 25th ACM SIGKDD International Conference on\nKnowledge Discovery & Data Mining, 3173. KDD ’19. New York, NY,\nUSA: Association for Computing Machinery. https://doi.org/10.1145/3292500.3340412.\n\n\nMaceachren, Alan M., and Menno-Jan Kraak. 1997. “Exploratory\nCartographic Visualization: Advancing the Agenda.” Computers\n& Geosciences 23 (4): 335–43. https://doi.org/10.1016/s0098-3004(97)00018-6.\n\n\nPebesma, Edzer. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2022a. Sf: Simple Features for r. https://CRAN.R-project.org/package=sf.\n\n\n———. 2022b. Stars: Spatiotemporal Arrays, Raster and Vector Data\nCubes. https://CRAN.R-project.org/package=stars.\n\n\n———. 2023. Lwgeom: Bindings to Selected Liblwgeom Functions for\nSimple Features. https://github.com/r-spatial/lwgeom/.\n\n\nPebesma, Edzer J. 2004. “Multivariable Geostatistics in S: The\nGstat Package.” Computers & Geosciences 30 (7):\n683–91. https://doi.org/10.1016/j.cageo.2004.03.012.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With\nApplications in r. CRC Press.\n\n\nPebesma, Edzer, and Benedikt Graeler. 2022. Gstat: Spatial and\nSpatio-Temporal Geostatistical Modelling, Prediction and\nSimulation. https://github.com/r-spatial/gstat/.\n\n\nRowe, Francisco. 2022. “Using Digital Footprint Data to Monitor\nHuman Mobility and Support Rapid Humanitarian Responses.”\nRegional Studies, Regional Science 9 (1): 665–68. https://doi.org/10.1080/21681376.2022.2135458.\n\n\n———. 2023. “Big Data.” In, 42–47. Edward Elgar Publishing.\nhttps://doi.org/10.4337/9781800883499.ch09.\n\n\nRowe, Francisco, Carmen Cabrera-Arnau, and Elisabetta Piestrostefani.\n2023. Population Science. population-science.net.\n\n\nRowe, Francisco, Alessia Calafiore, Daniel Arribas-Bel, Krasen\nSamardzhiev, and Martin Fleischmann. 2022. “Urban Exodus?\nUnderstanding Human Mobility in Britain During the COVID-19\nPandemic Using Meta-Facebook Data.” Population,\nSpace and Place 29 (1). https://doi.org/10.1002/psp.2637.\n\n\nRowe, Francisco, Miguel González-Leonardo, and Tony Champion. 2023.\n“Virtual Special Issue: Internal Migration in Times of\nCOVID-19.” Population, Space and Place,\nMarch. https://doi.org/10.1002/psp.2652.\n\n\nRowe, Francisco, Robin Lovelace, and Adam Dennett. 2022. “Spatial\nInteraction Modelling: A Manifesto.” http://dx.doi.org/10.31219/osf.io/xcdms.\n\n\nRowe, Francisco, and Nikos Patias. 2020. “Mapping the Spatial\nPatterns of Internal Migration in Europe.” Regional Studies,\nRegional Science 7 (1): 390–93. https://doi.org/10.1080/21681376.2020.1811139.\n\n\nSchwartz, Joe et al. 2009. “Bing Maps Tile System.”\nMicrosoft Developer Network Available: Http://Msdn. Microsoft.\nCom/En-Us/Library/Bb259689. Aspx.\n\n\nTennekes, Martijn. 2018. “tmap:\nThematic Maps in R.” Journal of Statistical\nSoftware 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2022. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWang, Yikang, Chen Zhong, Qili Gao, and Carmen Cabrera-Arnau. 2022.\n“Understanding Internal Migration in the UK Before and During the\nCOVID-19 Pandemic Using Twitter Data.” Urban Informatics\n1 (1). https://doi.org/10.1007/s44212-022-00018-w."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Welcome",
    "section": "",
    "text": "This website hosts the materials for the workshop “Using Digital Footprint Data to Measure and Monitor Human Mobility”. This training workshop was designed and is delivered by Prof. Francisco Rowe, Dr. Carmen Cabrera-Arnau, Dr. Miguel González-Leonardo, Ruth Neville and Andrea Nasuto.\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International.\n\nContact\n\nProf. Francisco Rowe, Professor in Population Data Science\nf.rowe-gonzalez [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, United Kingdom"
  },
  {
    "objectID": "overview.html#workshop-structure",
    "href": "overview.html#workshop-structure",
    "title": "1  Come prepared",
    "section": "1.1 Workshop structure",
    "text": "1.1 Workshop structure\n\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n15 min\nWelcome, introduction to workshop activities\n\n\n20 min\nDownloading the workshop materials from Github\n\n\n35 min\nImporting libraries, network theory basics\n\n\n10 min\nComfort break\n\n\n45 min\nThe African road network\n\n\n45 min\nExperiments and percolation\n\n\n10 min\nWrap-up"
  },
  {
    "objectID": "come-prepared.html#workshop-structure",
    "href": "come-prepared.html#workshop-structure",
    "title": "1  Come prepared",
    "section": "1.1 Workshop structure",
    "text": "1.1 Workshop structure\n\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n15 min\nWelcome, introduction to workshop activities\n\n\n20 min\nDownloading the workshop materials from Github\n\n\n35 min\nImporting libraries, network theory basics\n\n\n10 min\nComfort break\n\n\n45 min\nThe African road network\n\n\n45 min\nExperiments and percolation\n\n\n10 min\nWrap-up"
  },
  {
    "objectID": "come-prepared.html#before-the-workshop",
    "href": "come-prepared.html#before-the-workshop",
    "title": "1  Come prepared",
    "section": "1.2 Before the workshop",
    "text": "1.2 Before the workshop\n\n\n\n\n\n\nImportant\n\n\n\nPlease make sure you download and install the most recent version of R, RStudio and Quarto on the computer that you will be using during the workshop, and install the indicated R packages – see detailed instructions below.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll three software packages are open and free to use.\n\n\nR\nYou can download R here. Make sure you select the appropriate version for your Operating System: Windows, MacOS (Apple silicon M1/M2 or older intel Macs). For example, if you use a macOS laptop with an M1 processor, click on ‘Download R for macOS’ and then, click the link to download the installer file (.pkg extension for macOS) under the header ‘For Apple silicon (M1/M2) Macs’. You can then open the installer and follow the instructions that you will be prompted with. For Windows users, click on ‘install R for the first time’ and follow the prompts.\nRStudio\nYou will also need to download RStudio Desktop (or simply RStudio), which is an integrated development environment to help you write code in R more easily. To download RStudio, follow this link and scroll down to the section titled ‘All Installers and Tarballs’. Download the appropriate installer file according to your Operating System. Then, open the installer and follow the installation instructions that you will be prompted with.\nQuarto\nDownload Quarto from this website. Quarto is a publishing system that will allow you to open and work on the computational notebooks for the workshop. On ‘Step 1’ on the website, download the version of Quarto that matches your Operating System. Open the installer file, run it and follow the prompts.\nR packages\nOnce you have installed R, you will need to install some R extensions, known as packages, that will be useful for the applications explored in this workshop. The packages you need to install are:\n\ntidyverse\nggthemes\n…\n\nTo install the packages, open RStudio. On the console window (normally at the bottom left), write the following command: install.packages(\"name of package\"). Make sure you replace “name of package” by the actual name of the package that you want to install e.g. install.packages(\"tidyverse\"). Then, press enter and repeat this process until you have installed all the packages in the list.\nYou can also install all the packages by copying and running the code below:\n\nlist.of.packages.cran &lt;- c(\n   \"tidyverse\",\n   \"ggthemes\"\n)\n\nnew.packages.cran &lt;- list.of.packages.cran[!(list.of.packages.cran %in% installed.packages()[,\"Package\"])]\nif(length(new.packages.cran)) install.packages(new.packages.cran)\n\nfor(i in 1:length(list.of.packages.cran)) {\n  library(list.of.packages.cran[i], character.only = T)\n}\n\nYou can load all the packages by copying and running the code below:\n\ndeps &lt;- list(\n   \"tidyverse\",\n   \"ggthemes\"\n)\n\nfor(lib in deps){library(lib, character.only = TRUE)}\n\n\n\n\n\n\n\nImportant\n\n\n\nFurther instructions on how to download the workshop material from Github will be given during the workshop."
  },
  {
    "objectID": "introduction-networks.html#dependencies",
    "href": "introduction-networks.html#dependencies",
    "title": "2  Introduction to the basics of network analysis",
    "section": "2.1 Dependencies",
    "text": "2.1 Dependencies"
  },
  {
    "objectID": "introduction-networks.html#creating-networks",
    "href": "introduction-networks.html#creating-networks",
    "title": "2  Introduction to the basics of network analysis",
    "section": "2.2 Creating networks",
    "text": "2.2 Creating networks\n\n2.2.1 Starting from the basics\n\n\n2.2.2 Adding attributes\n\n\n2.2.3 Basic visualisation"
  },
  {
    "objectID": "introduction-networks.html#network-metrics",
    "href": "introduction-networks.html#network-metrics",
    "title": "2  Introduction to the basics of network analysis",
    "section": "2.3 Network metrics",
    "text": "2.3 Network metrics\n\n2.3.1 Density\n\n\n2.3.2 Reciprocity\n\n\n2.3.3 Degree\n\n\n2.3.4 Distances\n\n\n2.3.5 Centrality\n\n\n2.3.6 Hubs and authorities"
  },
  {
    "objectID": "african-network.html#data",
    "href": "african-network.html#data",
    "title": "3  The African road network",
    "section": "3.1 Data",
    "text": "3.1 Data"
  },
  {
    "objectID": "african-network.html#generating-networks-from-data-files",
    "href": "african-network.html#generating-networks-from-data-files",
    "title": "3  The African road network",
    "section": "3.2 Generating networks from data files",
    "text": "3.2 Generating networks from data files\n\n3.2.1 Preparing the data to generate an igraph object"
  },
  {
    "objectID": "african-network.html#creating-a-network-from-a-data-frame",
    "href": "african-network.html#creating-a-network-from-a-data-frame",
    "title": "3  The African road network",
    "section": "3.2 Creating a network from a data frame",
    "text": "3.2 Creating a network from a data frame\n\n#Support for simple features, a standardised way to encode spatial vector data\nlibrary(sf)\n#Data manipulation\nlibrary(dplyr)\n# An R package for network manipulation and analysis\nlibrary(igraph)\n# Provides a number of useful functions for working with character strings in R\nlibrary(stringr)\n\n\ndf_nodes &lt;- read.csv(\"https://raw.githubusercontent.com/rafaelprietocuriel/AfricanUrbanNetwork/main/AfricaNetworkNodes.csv\")\n\ndf_edges &lt;- read.csv(\"https://raw.githubusercontent.com/rafaelprietocuriel/AfricanUrbanNetwork/main/AfricaNetworkEdges.csv\")\n\n\ng_africa &lt;- graph_from_data_frame(d = df_edges,\n                                       vertices = df_nodes,\n                                       directed = FALSE)\n\n\nV(g_africa)$name\n\n   [1] \"2320\"    \"5199\"    \"7098\"    \"4220\"    \"4858\"    \"5331\"    \"597\"    \n   [8] \"6509\"    \"2622\"    \"4740\"    \"4903\"    \"32\"      \"145\"     \"2341\"   \n  [15] \"9059\"    \"4519\"    \"631\"     \"4486\"    \"8219\"    \"159\"     \"2333\"   \n  [22] \"4899\"    \"2915\"    \"3853\"    \"2545\"    \"5112\"    \"1547\"    \"2478\"   \n  [29] \"2866\"    \"8682\"    \"5398\"    \"7156\"    \"3743\"    \"8806\"    \"8144\"   \n  [36] \"5845\"    \"4802\"    \"2500\"    \"3778\"    \"5344\"    \"3094\"    \"829\"    \n  [43] \"133\"     \"8382\"    \"7457\"    \"7357\"    \"5317\"    \"6180\"    \"9\"      \n  [50] \"2158\"    \"1822\"    \"2505\"    \"3280\"    \"4291\"    \"6869\"    \"1350\"   \n  [57] \"8177\"    \"6212\"    \"6627\"    \"6224\"    \"3232\"    \"1470\"    \"5275\"   \n  [64] \"1121\"    \"6741\"    \"3525\"    \"6852\"    \"1966\"    \"2195\"    \"7110\"   \n  [71] \"5538\"    \"2905\"    \"8359\"    \"5736\"    \"235\"     \"1589\"    \"3119\"   \n  [78] \"5882\"    \"4030\"    \"5271\"    \"8587\"    \"4226\"    \"5813\"    \"7347\"   \n  [85] \"8156\"    \"1302\"    \"9129\"    \"7876\"    \"7356\"    \"3165\"    \"7132\"   \n  [92] \"8370\"    \"2198\"    \"2031\"    \"29\"      \"6454\"    \"9125\"    \"3988\"   \n  [99] \"3751\"    \"2503\"    \"550\"     \"2280\"    \"8302\"    \"7359\"    \"1975\"   \n [106] \"2204\"    \"608\"     \"5922\"    \"5336\"    \"7327\"    \"4967\"    \"4920\"   \n [113] \"3565\"    \"3835\"    \"7570\"    \"1585\"    \"8957\"    \"7367\"    \"2312\"   \n [120] \"1809\"    \"8197\"    \"8217\"    \"6899\"    \"2802\"    \"6516\"    \"2088\"   \n [127] \"427\"     \"5865\"    \"1727\"    \"6114\"    \"831\"     \"4499\"    \"7887\"   \n [134] \"2322\"    \"403\"     \"6629\"    \"7191\"    \"5963\"    \"5296\"    \"2465\"   \n [141] \"3903\"    \"734\"     \"6252\"    \"4720\"    \"5599\"    \"4713\"    \"1332\"   \n [148] \"3744\"    \"2896\"    \"3079\"    \"5874\"    \"8460\"    \"4655\"    \"6985\"   \n [155] \"1970\"    \"4211\"    \"1968\"    \"7247\"    \"7093\"    \"2268\"    \"4890\"   \n [162] \"7362\"    \"2484\"    \"4583\"    \"1637\"    \"1951\"    \"4815\"    \"3848\"   \n [169] \"7032\"    \"7802\"    \"1226\"    \"8764\"    \"6015\"    \"201\"     \"4232\"   \n [176] \"3445\"    \"3932\"    \"3264\"    \"2616\"    \"3310\"    \"5273\"    \"7583\"   \n [183] \"3965\"    \"1721\"    \"5708\"    \"1098\"    \"8473\"    \"9001\"    \"4614\"   \n [190] \"5779\"    \"17\"      \"2794\"    \"8912\"    \"907\"     \"6243\"    \"155\"    \n [197] \"7881\"    \"5585\"    \"5309\"    \"1300\"    \"1349\"    \"8715\"    \"5918\"   \n [204] \"2468\"    \"3070\"    \"1810\"    \"3573\"    \"3564\"    \"3392\"    \"5880\"   \n [211] \"860\"     \"5875\"    \"8324\"    \"1558\"    \"1710\"    \"4338\"    \"7635\"   \n [218] \"6677\"    \"2647\"    \"5753\"    \"1874\"    \"2486\"    \"2784\"    \"4019\"   \n [225] \"5194\"    \"3675\"    \"587\"     \"9076\"    \"6081\"    \"9177\"    \"2996\"   \n [232] \"4811\"    \"4145\"    \"92\"      \"5357\"    \"8093\"    \"2774\"    \"2452\"   \n [239] \"8541\"    \"4805\"    \"9083\"    \"7431\"    \"1937\"    \"2232\"    \"5615\"   \n [246] \"5299\"    \"2821\"    \"3192\"    \"6000\"    \"6532\"    \"8117\"    \"2579\"   \n [253] \"2557\"    \"9167\"    \"7286\"    \"4531\"    \"7683\"    \"5948\"    \"4907\"   \n [260] \"5592\"    \"49\"      \"5006\"    \"4538\"    \"5850\"    \"5427\"    \"4242\"   \n [267] \"4997\"    \"6328\"    \"7973\"    \"8632\"    \"4851\"    \"4213\"    \"4107\"   \n [274] \"4347\"    \"1102\"    \"1290\"    \"3683\"    \"4870\"    \"1493\"    \"5733\"   \n [281] \"6293\"    \"1305\"    \"1580\"    \"7577\"    \"7371\"    \"8047\"    \"8424\"   \n [288] \"8814\"    \"6475\"    \"2242\"    \"1949\"    \"4693\"    \"8357\"    \"7323\"   \n [295] \"3917\"    \"742\"     \"7163\"    \"3981\"    \"580\"     \"9173\"    \"606\"    \n [302] \"4178\"    \"4277\"    \"5468\"    \"116\"     \"848\"     \"1062\"    \"7945\"   \n [309] \"7673\"    \"1765\"    \"6258\"    \"9054\"    \"6481\"    \"3974\"    \"1006\"   \n [316] \"4836\"    \"2278\"    \"8535\"    \"1525\"    \"2334\"    \"3982\"    \"1891\"   \n [323] \"8486\"    \"2431\"    \"9164\"    \"4248\"    \"7835\"    \"7589\"    \"4961\"   \n [330] \"623\"     \"7801\"    \"2058\"    \"6493\"    \"5610\"    \"4759\"    \"6723\"   \n [337] \"2938\"    \"504\"     \"7153\"    \"1752\"    \"7254\"    \"2918\"    \"6479\"   \n [344] \"3046\"    \"8137\"    \"7777\"    \"3518\"    \"4122\"    \"4514\"    \"6926\"   \n [351] \"4943\"    \"6190\"    \"4709\"    \"938\"     \"5855\"    \"5032\"    \"3829\"   \n [358] \"8711\"    \"3032\"    \"1815\"    \"2025\"    \"5745\"    \"767\"     \"784\"    \n [365] \"8967\"    \"6693\"    \"4212\"    \"7240\"    \"3485\"    \"6201\"    \"4444\"   \n [372] \"3660\"    \"2700\"    \"3442\"    \"3878\"    \"9006\"    \"6621\"    \"7782\"   \n [379] \"1973\"    \"3329\"    \"2908\"    \"1963\"    \"3162\"    \"3526\"    \"5114\"   \n [386] \"2490\"    \"6325\"    \"2267\"    \"2483\"    \"8259\"    \"5812\"    \"5761\"   \n [393] \"7901\"    \"5287\"    \"4400\"    \"8211\"    \"8167\"    \"8478\"    \"4671\"   \n [400] \"1530\"    \"3307\"    \"7498\"    \"98\"      \"3464\"    \"7665\"    \"6329\"   \n [407] \"472\"     \"6974\"    \"3979\"    \"6952\"    \"1627\"    \"5109\"    \"3467\"   \n [414] \"1733\"    \"8980\"    \"7768\"    \"979\"     \"9052\"    \"4354\"    \"6681\"   \n [421] \"8176\"    \"8803\"    \"2201\"    \"186\"     \"6609\"    \"175\"     \"6363\"   \n [428] \"3320\"    \"3293\"    \"5900\"    \"2488\"    \"4431\"    \"1230\"    \"4748\"   \n [435] \"4481\"    \"3814\"    \"8623\"    \"5291\"    \"9114\"    \"526\"     \"641\"    \n [442] \"2303\"    \"4208\"    \"6268\"    \"1\"       \"572\"     \"5443\"    \"497\"    \n [449] \"1899\"    \"8283\"    \"1369\"    \"9096\"    \"6418\"    \"8186\"    \"5631\"   \n [456] \"2476\"    \"5565\"    \"6425\"    \"5853\"    \"6306\"    \"8239\"    \"2986\"   \n [463] \"8231\"    \"1426\"    \"7870\"    \"2317\"    \"8311\"    \"4539\"    \"3993\"   \n [470] \"8786\"    \"8404\"    \"7456\"    \"2276\"    \"5889\"    \"8345\"    \"7328\"   \n [477] \"1377\"    \"5739\"    \"6510\"    \"249\"     \"2435\"    \"4117\"    \"5333\"   \n [484] \"1931\"    \"7883\"    \"3700\"    \"2099\"    \"7363\"    \"3115\"    \"4550\"   \n [491] \"1272\"    \"4200\"    \"2085\"    \"4414\"    \"3821\"    \"1842\"    \"8760\"   \n [498] \"3099\"    \"2740\"    \"2764\"    \"306\"     \"6261\"    \"5741\"    \"4944\"   \n [505] \"7708\"    \"5300\"    \"2517\"    \"5198\"    \"5215\"    \"8468\"    \"5593\"   \n [512] \"561\"     \"6215\"    \"7122\"    \"3054\"    \"5700\"    \"4207\"    \"9118\"   \n [519] \"8796\"    \"3819\"    \"6689\"    \"4850\"    \"4089\"    \"4430\"    \"1621\"   \n [526] \"8290\"    \"1748\"    \"4746\"    \"3627\"    \"347\"     \"7986\"    \"9024\"   \n [533] \"8474\"    \"3005\"    \"1961\"    \"127\"     \"5751\"    \"6313\"    \"4405\"   \n [540] \"7575\"    \"6799\"    \"609\"     \"1354\"    \"1389\"    \"5254\"    \"6851\"   \n [547] \"1454\"    \"5107\"    \"5063\"    \"8427\"    \"9020\"    \"1110\"    \"5221\"   \n [554] \"4491\"    \"8159\"    \"5480\"    \"4119\"    \"7369\"    \"7199\"    \"2480\"   \n [561] \"7092\"    \"2462\"    \"27\"      \"6774\"    \"5482\"    \"2294\"    \"429\"    \n [568] \"2311\"    \"9197\"    \"5643\"    \"5289\"    \"7984\"    \"4589\"    \"2977\"   \n [575] \"2187\"    \"8189\"    \"6172\"    \"3889\"    \"4227\"    \"1303\"    \"2001\"   \n [582] \"3628\"    \"7124\"    \"234\"     \"820\"     \"4751\"    \"5277\"    \"6656\"   \n [589] \"227\"     \"8328\"    \"7009\"    \"5180\"    \"1314\"    \"4846\"    \"6654\"   \n [596] \"2055\"    \"1222\"    \"5362\"    \"7451\"    \"8149\"    \"7607\"    \"3963\"   \n [603] \"5854\"    \"7012\"    \"2180\"    \"4105\"    \"5746\"    \"3126\"    \"5348\"   \n [610] \"4692\"    \"7598\"    \"4296\"    \"7430\"    \"5966\"    \"2167\"    \"4989\"   \n [617] \"7798\"    \"3144\"    \"7113\"    \"8331\"    \"4656\"    \"3277\"    \"8162\"   \n [624] \"426\"     \"1835\"    \"2264\"    \"6565\"    \"7370\"    \"1281\"    \"5011\"   \n [631] \"1840\"    \"6700\"    \"6195\"    \"5668\"    \"5837\"    \"2485\"    \"3306\"   \n [638] \"2641\"    \"6905\"    \"5325\"    \"8553\"    \"7013\"    \"7794\"    \"4463\"   \n [645] \"2786\"    \"28\"      \"7088\"    \"4441\"    \"7149\"    \"3028\"    \"4653\"   \n [652] \"5444\"    \"6626\"    \"5172\"    \"3278\"    \"185\"     \"3820\"    \"3368\"   \n [659] \"8675\"    \"6924\"    \"63\"      \"1595\"    \"7659\"    \"4902\"    \"8379\"   \n [666] \"2296\"    \"7005\"    \"5151\"    \"1299\"    \"4618\"    \"4900\"    \"6281\"   \n [673] \"8183\"    \"3276\"    \"4601\"    \"3847\"    \"607\"     \"8112\"    \"1669\"   \n [680] \"384\"     \"5038\"    \"3412\"    \"8043\"    \"4377\"    \"2079\"    \"2661\"   \n [687] \"5076\"    \"4255\"    \"5678\"    \"6889\"    \"1624\"    \"2461\"    \"60\"     \n [694] \"7453\"    \"272\"     \"8655\"    \"5456\"    \"6178\"    \"3291\"    \"8897\"   \n [701] \"6777\"    \"4919\"    \"2348\"    \"4970\"    \"4289\"    \"3999\"    \"759\"    \n [708] \"1581\"    \"3365\"    \"5484\"    \"8090\"    \"2838\"    \"9005\"    \"5189\"   \n [715] \"8458\"    \"8716\"    \"4764\"    \"2656\"    \"3052\"    \"5152\"    \"6726\"   \n [722] \"2835\"    \"542\"     \"2482\"    \"3180\"    \"3318\"    \"5992\"    \"6551\"   \n [729] \"7182\"    \"5396\"    \"3765\"    \"6396\"    \"8527\"    \"3985\"    \"6649\"   \n [736] \"4015\"    \"1832\"    \"2047\"    \"1846\"    \"8072\"    \"2926\"    \"3634\"   \n [743] \"5673\"    \"7157\"    \"7366\"    \"2106\"    \"9067\"    \"3134\"    \"2664\"   \n [750] \"5898\"    \"7374\"    \"1687\"    \"2897\"    \"2513\"    \"4324\"    \"4250\"   \n [757] \"7879\"    \"5778\"    \"4010\"    \"3801\"    \"2566\"    \"7500\"    \"6008\"   \n [764] \"3372\"    \"2038\"    \"314\"     \"1788\"    \"1351\"    \"1866\"    \"7454\"   \n [771] \"6894\"    \"6785\"    \"4939\"    \"2553\"    \"6670\"    \"4603\"    \"7559\"   \n [778] \"7250\"    \"6141\"    \"8723\"    \"6318\"    \"4392\"    \"6558\"    \"4745\"   \n [785] \"5832\"    \"588\"     \"1297\"    \"8499\"    \"4133\"    \"8233\"    \"3528\"   \n [792] \"4898\"    \"3394\"    \"9162\"    \"3269\"    \"2458\"    \"3934\"    \"7806\"   \n [799] \"8215\"    \"4622\"    \"2221\"    \"573\"     \"7479\"    \"8208\"    \"8341\"   \n [806] \"6136\"    \"3766\"    \"7218\"    \"7461\"    \"3888\"    \"4959\"    \"5117\"   \n [813] \"5316\"    \"2497\"    \"1415\"    \"4095\"    \"4617\"    \"7118\"    \"3567\"   \n [820] \"2609\"    \"3989\"    \"7868\"    \"8387\"    \"6231\"    \"2275\"    \"2469\"   \n [827] \"3747\"    \"4077\"    \"2087\"    \"8184\"    \"2489\"    \"5301\"    \"1134\"   \n [834] \"6790\"    \"5178\"    \"7987\"    \"1072\"    \"2956\"    \"8303\"    \"2811\"   \n [841] \"225\"     \"6238\"    \"4488\"    \"936\"     \"7311\"    \"7727\"    \"1962\"   \n [848] \"7799\"    \"264\"     \"3671\"    \"2056\"    \"5055\"    \"7828\"    \"8389\"   \n [855] \"1164\"    \"5340\"    \"9003\"    \"2630\"    \"1920\"    \"5792\"    \"7087\"   \n [862] \"3001\"    \"2054\"    \"355\"     \"6941\"    \"1545\"    \"4016\"    \"5061\"   \n [869] \"5590\"    \"8057\"    \"3257\"    \"1650\"    \"6780\"    \"2224\"    \"2080\"   \n [876] \"4587\"    \"6382\"    \"8355\"    \"4497\"    \"3148\"    \"1097\"    \"2260\"   \n [883] \"381\"     \"3405\"    \"5656\"    \"6157\"    \"6462\"    \"5409\"    \"7458\"   \n [890] \"7114\"    \"6742\"    \"8693\"    \"3197\"    \"7245\"    \"5949\"    \"539\"    \n [897] \"3606\"    \"3359\"    \"8538\"    \"8039\"    \"9072\"    \"105\"     \"3245\"   \n [904] \"7329\"    \"6406\"    \"3459\"    \"8060\"    \"3387\"    \"3447\"    \"6850\"   \n [911] \"5529\"    \"9015\"    \"8531\"    \"6779\"    \"343\"     \"7593\"    \"3890\"   \n [918] \"4843\"    \"8903\"    \"894\"     \"2406\"    \"6004\"    \"1364\"    \"400\"    \n [925] \"2432\"    \"2925\"    \"2021\"    \"1432\"    \"660\"     \"8371\"    \"7966\"   \n [932] \"4701\"    \"7381\"    \"5449\"    \"1107\"    \"2815\"    \"7701\"    \"3295\"   \n [939] \"3092\"    \"214\"     \"4193\"    \"8978\"    \"8494\"    \"3803\"    \"10\"     \n [946] \"2470\"    \"2858\"    \"5901\"    \"827\"     \"2771\"    \"4718\"    \"9009\"   \n [953] \"7164\"    \"1501\"    \"365\"     \"9007\"    \"1032\"    \"8099\"    \"3647\"   \n [960] \"217\"     \"2107\"    \"5782\"    \"8188\"    \"709\"     \"2281\"    \"7529\"   \n [967] \"8695\"    \"2946\"    \"7581\"    \"6512\"    \"4203\"    \"6207\"    \"1079\"   \n [974] \"5500\"    \"8330\"    \"1763\"    \"2442\"    \"1797\"    \"8979\"    \"717\"    \n [981] \"2216\"    \"2400\"    \"5652\"    \"5250\"    \"8710\"    \"2392\"    \"2922\"   \n [988] \"5627\"    \"3696\"    \"5723\"    \"8019\"    \"7650\"    \"8308\"    \"1359\"   \n [995] \"8781\"    \"901\"     \"6362\"    \"570\"     \"8819\"    \"3931\"    \"1366\"   \n[1002] \"8936\"    \"2244\"    \"2102\"    \"7206\"    \"915\"     \"8087\"    \"4412\"   \n[1009] \"6090\"    \"1446\"    \"1935\"    \"1718\"    \"964\"     \"367\"     \"7046\"   \n[1016] \"7067\"    \"8395\"    \"9093\"    \"799\"     \"8380\"    \"7246\"    \"1787\"   \n[1023] \"3986\"    \"8703\"    \"3347\"    \"1855\"    \"5732\"    \"8253\"    \"3063\"   \n[1030] \"6717\"    \"5605\"    \"2911\"    \"4581\"    \"2467\"    \"3038\"    \"3693\"   \n[1037] \"3939\"    \"1086\"    \"3433\"    \"2523\"    \"5814\"    \"1731\"    \"6233\"   \n[1044] \"7503\"    \"5293\"    \"1898\"    \"6385\"    \"6067\"    \"3399\"    \"7592\"   \n[1051] \"4054\"    \"5848\"    \"6256\"    \"737\"     \"2454\"    \"1821\"    \"5052\"   \n[1058] \"3133\"    \"8744\"    \"8205\"    \"961\"     \"2246\"    \"1078\"    \"2852\"   \n[1065] \"8507\"    \"1695\"    \"6288\"    \"5555\"    \"2507\"    \"6925\"    \"7166\"   \n[1072] \"5894\"    \"2029\"    \"3093\"    \"122\"     \"2591\"    \"4611\"    \"7267\"   \n[1079] \"2781\"    \"5750\"    \"15\"      \"3322\"    \"966\"     \"5525\"    \"2593\"   \n[1086] \"1681\"    \"6192\"    \"4586\"    \"3663\"    \"6675\"    \"6173\"    \"2009\"   \n[1093] \"7177\"    \"5625\"    \"9019\"    \"2865\"    \"2600\"    \"8084\"    \"8405\"   \n[1100] \"2042\"    \"4607\"    \"7126\"    \"1435\"    \"1522\"    \"5621\"    \"8866\"   \n[1107] \"7059\"    \"1639\"    \"332\"     \"9166\"    \"358\"     \"1813\"    \"7474\"   \n[1114] \"3116\"    \"2393\"    \"165\"     \"6515\"    \"346\"     \"4875\"    \"5932\"   \n[1121] \"8902\"    \"1694\"    \"6789\"    \"327\"     \"8194\"    \"5601\"    \"3346\"   \n[1128] \"2456\"    \"5059\"    \"7508\"    \"9077\"    \"1494\"    \"2114\"    \"8770\"   \n[1135] \"4204\"    \"7854\"    \"6766\"    \"218\"     \"4660\"    \"837\"     \"6\"      \n[1142] \"528\"     \"2339\"    \"4905\"    \"8514\"    \"4887\"    \"436\"     \"7616\"   \n[1149] \"6339\"    \"6848\"    \"7189\"    \"3076\"    \"5426\"    \"2466\"    \"1322\"   \n[1156] \"433\"     \"8309\"    \"1468\"    \"1739\"    \"566\"     \"847\"     \"8245\"   \n[1163] \"2682\"    \"1845\"    \"3772\"    \"3230\"    \"5654\"    \"8928\"    \"6849\"   \n[1170] \"5196\"    \"5141\"    \"250\"     \"3625\"    \"4350\"    \"6162\"    \"6105\"   \n[1177] \"348\"     \"6460\"    \"4195\"    \"2174\"    \"6177\"    \"409\"     \"5893\"   \n[1184] \"7443\"    \"1828\"    \"4677\"    \"8808\"    \"2988\"    \"8204\"    \"6092\"   \n[1191] \"4852\"    \"2675\"    \"9168\"    \"5491\"    \"3691\"    \"4885\"    \"1010\"   \n[1198] \"4800\"    \"8748\"    \"435\"     \"5334\"    \"4435\"    \"684\"     \"7595\"   \n[1205] \"5920\"    \"7756\"    \"2525\"    \"3183\"    \"4700\"    \"8049\"    \"4540\"   \n[1212] \"3282\"    \"1477\"    \"7752\"    \"9122\"    \"6437\"    \"5993\"    \"1768\"   \n[1219] \"1651\"    \"6713\"    \"9046\"    \"7387\"    \"4064\"    \"5236\"    \"8451\"   \n[1226] \"7468\"    \"3948\"    \"6898\"    \"2970\"    \"5162\"    \"5000\"    \"5820\"   \n[1233] \"6221\"    \"3364\"    \"5349\"    \"2389\"    \"5991\"    \"262\"     \"3970\"   \n[1240] \"8965\"    \"4710\"    \"2345\"    \"3439\"    \"1433\"    \"4129\"    \"6383\"   \n[1247] \"424\"     \"7827\"    \"7360\"    \"3679\"    \"3739\"    \"1519\"    \"4735\"   \n[1254] \"8196\"    \"465\"     \"487\"     \"2471\"    \"8706\"    \"4163\"    \"7875\"   \n[1261] \"3831\"    \"1356\"    \"8388\"    \"4936\"    \"1505\"    \"4829\"    \"3651\"   \n[1268] \"3338\"    \"5120\"    \"5469\"    \"943\"     \"5494\"    \"2061\"    \"1682\"   \n[1275] \"4043\"    \"2091\"    \"7965\"    \"1038\"    \"6600\"    \"7923\"    \"8762\"   \n[1282] \"6863\"    \"5677\"    \"6386\"    \"7186\"    \"1336\"    \"3270\"    \"2481\"   \n[1289] \"318\"     \"1288\"    \"4114\"    \"8915\"    \"4190\"    \"3323\"    \"1550\"   \n[1296] \"1307\"    \"555\"     \"5175\"    \"4859\"    \"378\"     \"6007\"    \"2745\"   \n[1303] \"2299\"    \"1508\"    \"7420\"    \"2477\"    \"2995\"    \"5804\"    \"2344\"   \n[1310] \"9021\"    \"4473\"    \"3067\"    \"5554\"    \"1264\"    \"1938\"    \"4741\"   \n[1317] \"4075\"    \"8794\"    \"6433\"    \"6802\"    \"5016\"    \"4127\"    \"6348\"   \n[1324] \"853\"     \"6977\"    \"6332\"    \"7345\"    \"7438\"    \"6992\"    \"3784\"   \n[1331] \"1662\"    \"469\"     \"6197\"    \"3416\"    \"8008\"    \"9105\"    \"2748\"   \n[1338] \"8247\"    \"2666\"    \"6664\"    \"6219\"    \"5163\"    \"261\"     \"6228\"   \n[1345] \"1515\"    \"2119\"    \"8263\"    \"5202\"    \"1344\"    \"7034\"    \"4760\"   \n[1352] \"2625\"    \"4527\"    \"3561\"    \"8509\"    \"8054\"    \"4937\"    \"6230\"   \n[1359] \"5337\"    \"1685\"    \"6289\"    \"2861\"    \"4172\"    \"256\"     \"6641\"   \n[1366] \"3910\"    \"7573\"    \"8522\"    \"143\"     \"4993\"    \"4450\"    \"8314\"   \n[1373] \"7853\"    \"7743\"    \"8832\"    \"937\"     \"5367\"    \"8577\"    \"8699\"   \n[1380] \"4766\"    \"7400\"    \"3713\"    \"8721\"    \"8154\"    \"3507\"    \"5282\"   \n[1387] \"6557\"    \"6324\"    \"5658\"    \"5687\"    \"1804\"    \"4536\"    \"2092\"   \n[1394] \"5891\"    \"8795\"    \"6934\"    \"2394\"    \"5915\"    \"4218\"    \"5931\"   \n[1401] \"8501\"    \"2220\"    \"5764\"    \"7179\"    \"11\"      \"1291\"    \"3403\"   \n[1408] \"224\"     \"6426\"    \"4511\"    \"7836\"    \"5218\"    \"1764\"    \"1465\"   \n[1415] \"7652\"    \"9199\"    \"9186\"    \"674\"     \"1076\"    \"7448\"    \"5327\"   \n[1422] \"8165\"    \"3193\"    \"2233\"    \"46\"      \"5290\"    \"1675\"    \"640\"    \n[1429] \"5721\"    \"7630\"    \"3665\"    \"1476\"    \"8999\"    \"4263\"    \"4988\"   \n[1436] \"1461\"    \"4346\"    \"7499\"    \"8457\"    \"5986\"    \"4946\"    \"7224\"   \n[1443] \"2961\"    \"1819\"    \"7011\"    \"7190\"    \"6810\"    \"8946\"    \"4551\"   \n[1450] \"2166\"    \"3505\"    \"6096\"    \"3490\"    \"8982\"    \"6076\"    \"1909\"   \n[1457] \"2036\"    \"6765\"    \"3236\"    \"1216\"    \"7580\"    \"5971\"    \"6277\"   \n[1464] \"2613\"    \"5957\"    \"3707\"    \"5890\"    \"2498\"    \"3007\"    \"3824\"   \n[1471] \"4197\"    \"8213\"    \"2608\"    \"7694\"    \"554\"     \"4002\"    \"1355\"   \n[1478] \"3923\"    \"2904\"    \"6569\"    \"6984\"    \"6441\"    \"6031\"    \"2073\"   \n[1485] \"3964\"    \"3190\"    \"4915\"    \"9040\"    \"5503\"    \"6961\"    \"6435\"   \n[1492] \"5021\"    \"1099\"    \"5951\"    \"4669\"    \"220\"     \"7735\"    \"1772\"   \n[1499] \"1311\"    \"5345\"    \"2733\"    \"7813\"    \"8829\"    \"5705\"    \"8190\"   \n[1506] \"1696\"    \"6311\"    \"5872\"    \"6074\"    \"5393\"    \"8062\"    \"4807\"   \n[1513] \"2993\"    \"8597\"    \"2572\"    \"715\"     \"7925\"    \"6302\"    \"3873\"   \n[1520] \"7941\"    \"7460\"    \"7475\"    \"5257\"    \"8397\"    \"7677\"    \"248\"    \n[1527] \"6874\"    \"2617\"    \"6897\"    \"8566\"    \"294\"     \"6806\"    \"3311\"   \n[1534] \"2041\"    \"3065\"    \"1009\"    \"1882\"    \"6729\"    \"7617\"    \"4504\"   \n[1541] \"3103\"    \"4947\"    \"8830\"    \"7791\"    \"5401\"    \"136\"     \"4886\"   \n[1548] \"1843\"    \"9017\"    \"8893\"    \"2385\"    \"740\"     \"2796\"    \"6303\"   \n[1555] \"6276\"    \"6963\"    \"1723\"    \"2685\"    \"8351\"    \"2584\"    \"1932\"   \n[1562] \"2582\"    \"99\"      \"5227\"    \"1771\"    \"5616\"    \"359\"     \"402\"    \n[1569] \"6794\"    \"6473\"    \"5630\"    \"2353\"    \"2248\"    \"1623\"    \"2150\"   \n[1576] \"630\"     \"3727\"    \"8516\"    \"1990\"    \"8737\"    \"3019\"    \"5209\"   \n[1583] \"8822\"    \"4788\"    \"9066\"    \"3622\"    \"4931\"    \"6299\"    \"5962\"   \n[1590] \"2375\"    \"4591\"    \"3026\"    \"2879\"    \"1090\"    \"2648\"    \"7232\"   \n[1597] \"7480\"    \"3018\"    \"582\"     \"8896\"    \"5903\"    \"7385\"    \"8268\"   \n[1604] \"4012\"    \"8449\"    \"4648\"    \"4066\"    \"7042\"    \"3004\"    \"4297\"   \n[1611] \"310\"     \"6767\"    \"4073\"    \"3746\"    \"4425\"    \"1429\"    \"4535\"   \n[1618] \"2128\"    \"5824\"    \"8261\"    \"7982\"    \"6923\"    \"7268\"    \"3849\"   \n[1625] \"5383\"    \"4566\"    \"2189\"    \"8542\"    \"4252\"    \"5822\"    \"304\"    \n[1632] \"2238\"    \"2881\"    \"1437\"    \"4023\"    \"3249\"    \"8783\"    \"1045\"   \n[1639] \"3812\"    \"6077\"    \"9106\"    \"6132\"    \"3872\"    \"3946\"    \"4228\"   \n[1646] \"639\"     \"2193\"    \"8343\"    \"2492\"    \"3043\"    \"8985\"    \"6265\"   \n[1653] \"4147\"    \"350\"     \"8220\"    \"8366\"    \"399\"     \"3487\"    \"5773\"   \n[1660] \"7759\"    \"5185\"    \"8676\"    \"2746\"    \"7682\"    \"4423\"    \"7886\"   \n[1667] \"2941\"    \"8552\"    \"2105\"    \"1959\"    \"6202\"    \"6341\"    \"1762\"   \n[1674] \"4410\"    \"3522\"    \"330\"     \"6542\"    \"510\"     \"5174\"    \"6571\"   \n[1681] \"8278\"    \"1431\"    \"2848\"    \"236\"     \"4108\"    \"8152\"    \"7749\"   \n[1688] \"2404\"    \"2654\"    \"7471\"    \"1860\"    \"7305\"    \"602\"     \"7476\"   \n[1695] \"6983\"    \"467\"     \"6503\"    \"1409\"    \"5650\"    \"2048\"    \"6763\"   \n[1702] \"8569\"    \"1831\"    \"5330\"    \"4415\"    \"8198\"    \"7160\"    \"3689\"   \n[1709] \"8226\"    \"4799\"    \"4938\"    \"8221\"    \"2846\"    \"7663\"    \"4942\"   \n[1716] \"2828\"    \"3552\"    \"2602\"    \"6153\"    \"1670\"    \"1658\"    \"1743\"   \n[1723] \"3450\"    \"1584\"    \"7776\"    \"5048\"    \"5888\"    \"533\"     \"3886\"   \n[1730] \"8835\"    \"8635\"    \"8450\"    \"9031\"    \"7392\"    \"8077\"    \"7820\"   \n[1737] \"728\"     \"4076\"    \"7256\"    \"2801\"    \"817\"     \"5970\"    \"8113\"   \n[1744] \"7864\"    \"2574\"    \"2148\"    \"1737\"    \"6480\"    \"3799\"    \"1905\"   \n[1751] \"1533\"    \"509\"     \"8377\"    \"3704\"    \"8607\"    \"2669\"    \"3227\"   \n[1758] \"6234\"    \"6209\"    \"8664\"    \"1115\"    \"7151\"    \"6938\"    \"500\"    \n[1765] \"2667\"    \"3839\"    \"1481\"    \"3209\"    \"7803\"    \"6975\"    \"3045\"   \n[1772] \"2362\"    \"4294\"    \"5641\"    \"2989\"    \"253\"     \"7072\"    \"8834\"   \n[1779] \"8448\"    \"1638\"    \"1514\"    \"8625\"    \"1541\"    \"7771\"    \"6357\"   \n[1786] \"2464\"    \"9180\"    \"8934\"    \"4684\"    \"6489\"    \"5069\"    \"5835\"   \n[1793] \"1744\"    \"5791\"    \"3736\"    \"722\"     \"1247\"    \"4396\"    \"6844\"   \n[1800] \"6439\"    \"8825\"    \"3143\"    \"2887\"    \"6017\"    \"3417\"    \"2913\"   \n[1807] \"1339\"    \"1980\"    \"3015\"    \"2357\"    \"7646\"    \"8216\"    \"8222\"   \n[1814] \"6413\"    \"9112\"    \"7878\"    \"6296\"    \"8070\"    \"3863\"    \"6665\"   \n[1821] \"6706\"    \"3681\"    \"4704\"    \"725\"     \"3040\"    \"5256\"    \"1596\"   \n[1828] \"1450\"    \"6645\"    \"6965\"    \"4348\"    \"1047\"    \"9084\"    \"8400\"   \n[1835] \"4757\"    \"488\"     \"6506\"    \"329\"     \"7501\"    \"2340\"    \"6379\"   \n[1842] \"971\"     \"430\"     \"8094\"    \"6065\"    \"7805\"    \"5422\"    \"8713\"   \n[1849] \"3158\"    \"7061\"    \"2563\"    \"1120\"    \"5425\"    \"2596\"    \"6199\"   \n[1856] \"2898\"    \"7860\"    \"1083\"    \"6108\"    \"2424\"    \"8095\"    \"241\"    \n[1863] \"9065\"    \"7514\"    \"8867\"    \"5852\"    \"6056\"    \"1075\"    \"4582\"   \n[1870] \"7599\"    \"2203\"    \"1503\"    \"2637\"    \"1801\"    \"2269\"    \"3247\"   \n[1877] \"7758\"    \"6636\"    \"8862\"    \"2997\"    \"3807\"    \"2003\"    \"3519\"   \n[1884] \"5065\"    \"7152\"    \"5704\"    \"5497\"    \"1512\"    \"2626\"    \"543\"    \n[1891] \"5399\"    \"6871\"    \"2297\"    \"781\"     \"5057\"    \"918\"     \"5613\"   \n[1898] \"2539\"    \"1873\"    \"2718\"    \"9181\"    \"6274\"    \"8319\"    \"3159\"   \n[1905] \"7899\"    \"7824\"    \"6420\"    \"4034\"    \"8890\"    \"6760\"    \"5798\"   \n[1912] \"5058\"    \"7549\"    \"7262\"    \"4005\"    \"8726\"    \"7261\"    \"7380\"   \n[1919] \"216\"     \"7220\"    \"5389\"    \"5526\"    \"7914\"    \"5358\"    \"479\"    \n[1926] \"2522\"    \"1679\"    \"2271\"    \"4628\"    \"3600\"    \"4596\"    \"4664\"   \n[1933] \"2316\"    \"7565\"    \"4283\"    \"4668\"    \"2364\"    \"4489\"    \"4625\"   \n[1940] \"4240\"    \"6606\"    \"8335\"    \"3992\"    \"8671\"    \"4954\"    \"933\"    \n[1947] \"2133\"    \"8820\"    \"6204\"    \"6906\"    \"6087\"    \"2365\"    \"1488\"   \n[1954] \"7358\"    \"2284\"    \"6294\"    \"501\"     \"949\"     \"1783\"    \"4866\"   \n[1961] \"2342\"    \"1645\"    \"2081\"    \"4397\"    \"3687\"    \"7183\"    \"7804\"   \n[1968] \"2836\"    \"5956\"    \"3902\"    \"6285\"    \"5666\"    \"4426\"    \"8990\"   \n[1975] \"1971\"    \"4233\"    \"1510\"    \"3703\"    \"3609\"    \"2547\"    \"8336\"   \n[1982] \"1706\"    \"4332\"    \"7641\"    \"7588\"    \"5928\"    \"5310\"    \"1273\"   \n[1989] \"173\"     \"4513\"    \"8415\"    \"4020\"    \"7687\"    \"959\"     \"4526\"   \n[1996] \"1483\"    \"699\"     \"2205\"    \"810\"     \"6694\"    \"1957\"    \"7188\"   \n[2003] \"7969\"    \"6692\"    \"6079\"    \"3838\"    \"326\"     \"7797\"    \"7418\"   \n[2010] \"5382\"    \"121\"     \"1722\"    \"4981\"    \"6440\"    \"4465\"    \"5258\"   \n[2017] \"7192\"    \"5511\"    \"7393\"    \"8709\"    \"8807\"    \"405\"     \"2440\"   \n[2024] \"1796\"    \"4067\"    \"4475\"    \"8096\"    \"2800\"    \"8168\"    \"3060\"   \n[2031] \"6492\"    \"3413\"    \"3369\"    \"336\"     \"7413\"    \"8900\"    \"668\"    \n[2038] \"3782\"    \"4904\"    \"7572\"    \"4251\"    \"3937\"    \"1705\"    \"4868\"   \n[2045] \"6758\"    \"3085\"    \"4795\"    \"5897\"    \"6747\"    \"7896\"    \"8453\"   \n[2052] \"3594\"    \"8939\"    \"8055\"    \"7962\"    \"903\"     \"7410\"    \"4516\"   \n[2059] \"2934\"    \"1456\"    \"179\"     \"7891\"    \"2757\"    \"4060\"    \"2434\"   \n[2066] \"1147\"    \"7412\"    \"5356\"    \"4594\"    \"2117\"    \"5783\"    \"7129\"   \n[2073] \"4687\"    \"441\"     \"4976\"    \"7467\"    \"7344\"    \"1342\"    \"8860\"   \n[2080] \"8361\"    \"5953\"    \"6646\"    \"3901\"    \"9163\"    \"7125\"    \"4301\"   \n[2087] \"5438\"    \"6762\"    \"3961\"    \"6813\"    \"1188\"    \"8727\"    \"3833\"   \n[2094] \"8142\"    \"395\"     \"7488\"    \"6072\"    \"4665\"    \"1071\"    \"7496\"   \n[2101] \"6653\"    \"3797\"    \"2823\"    \"8614\"    \"5132\"    \"7274\"    \"451\"    \n[2108] \"7142\"    \"4395\"    \"8073\"    \"1591\"    \"1467\"    \"748\"     \"4647\"   \n[2115] \"461\"     \"7888\"    \"7120\"    \"5234\"    \"1528\"    \"6647\"    \"1615\"   \n[2122] \"199\"     \"7320\"    \"6860\"    \"8333\"    \"2877\"    \"8696\"    \"8864\"   \n[2129] \"2820\"    \"8020\"    \"4860\"    \"4832\"    \"3792\"    \"6597\"    \"6725\"   \n[2136] \"4188\"    \"89\"      \"1674\"    \"2803\"    \"6663\"    \"1715\"    \"6175\"   \n[2143] \"1257\"    \"8865\"    \"5510\"    \"5789\"    \"8409\"    \"5192\"    \"8274\"   \n[2150] \"3229\"    \"1552\"    \"558\"     \"8004\"    \"8510\"    \"2184\"    \"7944\"   \n[2157] \"2448\"    \"7405\"    \"4753\"    \"3657\"    \"1930\"    \"2686\"    \"1000053\"\n[2164] \"1000139\" \"1000245\" \"1000307\" \"1000309\" \"1000311\" \"1000312\" \"1000313\"\n[2171] \"1000314\" \"1000319\" \"1000507\" \"1000508\" \"1000509\" \"1000517\" \"1000518\"\n[2178] \"1000559\" \"1000567\" \"1000588\" \"1000607\" \"1000612\" \"1000697\" \"1000701\"\n[2185] \"1000702\" \"1000703\" \"1000705\" \"1000711\" \"1000761\" \"1000767\" \"1000768\"\n[2192] \"1000769\" \"1000772\" \"1000773\" \"1000778\" \"1000782\" \"1000783\" \"1000789\"\n[2199] \"1000823\" \"1000828\" \"1000863\" \"1000998\" \"1001018\" \"1001050\" \"1001145\"\n[2206] \"1001157\" \"1001196\" \"1001202\" \"1001230\" \"1001231\" \"1001245\" \"1001249\"\n[2213] \"1001256\" \"1001258\" \"1001284\" \"1001287\" \"1001290\" \"1001315\" \"1001318\"\n[2220] \"1001407\" \"1001408\" \"1001412\" \"1001548\" \"1001733\" \"1001736\" \"1001819\"\n[2227] \"1001822\" \"1001823\" \"1001847\" \"1001896\" \"1001979\" \"1002055\" \"1002243\"\n[2234] \"1002264\" \"1002280\" \"1002285\" \"1002342\" \"1002367\" \"1002368\" \"1002369\"\n[2241] \"1002370\" \"1002371\" \"1002374\" \"1002437\" \"1002445\" \"1002523\" \"1002524\"\n[2248] \"1002544\" \"1002550\" \"1002643\" \"1002650\" \"1002657\" \"1002718\" \"1002732\"\n[2255] \"1002779\" \"1002781\" \"1002789\" \"1002874\" \"1002959\" \"1002960\" \"1002962\"\n[2262] \"1003011\" \"1003038\" \"1003081\" \"1003094\" \"1003359\" \"1003367\" \"1003381\"\n[2269] \"1003385\" \"1003437\" \"1003441\" \"1003470\" \"1003487\" \"1003562\" \"1003564\"\n[2276] \"1003575\" \"1003577\" \"1003580\" \"1003582\" \"1003588\" \"1003625\" \"1003692\"\n[2283] \"1003757\" \"1003805\" \"1003922\" \"1003976\" \"1004005\" \"1004010\" \"1004049\"\n[2290] \"1004077\" \"1004089\" \"1004090\" \"1004103\" \"1004117\" \"1004118\" \"1004213\"\n[2297] \"1004221\" \"1004224\" \"1004227\" \"1004232\" \"1004278\" \"1004409\" \"1004499\"\n[2304] \"1004512\" \"1004541\" \"1004624\" \"1004669\" \"1004672\" \"1004791\" \"1004870\"\n[2311] \"1004873\" \"1004893\" \"1004897\" \"1004898\" \"1004943\" \"1004960\" \"1005044\"\n[2318] \"1005079\" \"1005087\" \"1005088\" \"1005195\" \"1005209\" \"1005220\" \"1005238\"\n[2325] \"1005239\" \"1005250\" \"1005255\" \"1005256\" \"1005282\" \"1005284\" \"1005312\"\n[2332] \"1005382\" \"1005383\" \"1005395\" \"1005435\" \"1005436\" \"1005437\" \"1005629\"\n[2339] \"1005632\" \"1005657\" \"1005706\" \"1005761\" \"1005777\" \"1005818\" \"1005863\"\n[2346] \"1006005\" \"1006077\" \"1006103\" \"1006106\" \"1006117\" \"1006321\" \"1006352\"\n[2353] \"1006510\" \"1006532\" \"1006539\" \"1006541\" \"1006545\" \"1006579\" \"1006661\"\n[2360] \"1006744\" \"1006745\" \"1006747\" \"1006748\" \"1006777\" \"1006863\" \"1006866\"\n[2367] \"1006873\" \"1006878\" \"1006896\" \"1006945\" \"1007135\" \"1007136\" \"1007233\"\n[2374] \"1007249\" \"1007266\" \"1007293\" \"1007301\" \"1007304\" \"1007310\" \"1007316\"\n[2381] \"1007395\" \"1007400\" \"1007421\" \"1007424\" \"1007438\" \"1007506\" \"1007531\"\n[2388] \"1007560\" \"1007574\" \"1007578\" \"1007591\" \"1007607\" \"1007665\" \"1007682\"\n[2395] \"1007702\" \"1007738\" \"1007766\" \"1007795\" \"1007799\" \"1007806\" \"1007825\"\n[2402] \"1007830\" \"1007835\" \"1007837\" \"1007841\" \"1007849\" \"1007867\" \"1007878\"\n[2409] \"1008305\" \"1008306\" \"1008311\" \"1008312\" \"1008317\" \"1008320\" \"1008323\"\n[2416] \"1008326\" \"1008366\" \"1008390\" \"1008444\" \"1008503\" \"1008510\" \"1008596\"\n[2423] \"1008672\" \"1008677\" \"1008678\" \"1008679\" \"1008686\" \"1008823\" \"1008915\"\n[2430] \"1008937\" \"1008939\" \"1008987\" \"1009005\" \"1009075\" \"1009079\" \"1009096\"\n[2437] \"1009101\" \"1009102\" \"1009318\" \"1009555\" \"1009557\" \"1009585\" \"1009586\"\n[2444] \"1009603\" \"1009612\" \"1009622\" \"1009623\" \"1009664\" \"1010065\" \"1010431\"\n[2451] \"1010460\" \"1010493\" \"1010497\" \"1010507\" \"1010512\" \"1010540\" \"1010542\"\n[2458] \"1010723\" \"1010729\" \"1010738\" \"1011118\" \"1011265\" \"1011287\" \"1011288\"\n[2465] \"1011293\" \"1011409\" \"1011410\" \"1011439\" \"1011458\" \"1011473\" \"1011494\"\n[2472] \"1011505\" \"1011506\" \"1011588\" \"1011591\" \"1011603\" \"1011701\" \"1011703\"\n[2479] \"1011706\" \"1011744\" \"1011772\" \"1011806\" \"1011847\" \"1011850\" \"1011852\"\n[2486] \"1011855\" \"1011933\" \"1011935\" \"1011940\" \"1011946\" \"1011998\" \"1012019\"\n[2493] \"1012145\" \"1012146\" \"1012158\" \"1012189\" \"1012310\" \"1012312\" \"1012395\"\n[2500] \"1012396\" \"1012419\" \"1012427\" \"1012429\" \"1012437\" \"1012447\" \"1012455\"\n[2507] \"1012547\" \"1012553\" \"1012554\" \"1012625\" \"1012787\" \"1012894\" \"1012904\"\n[2514] \"1012922\" \"1012949\" \"1012966\" \"1012967\" \"1013012\" \"1013081\" \"1013117\"\n[2521] \"1013139\" \"1013147\" \"1013157\" \"1013174\" \"1013177\" \"1013189\" \"1013191\"\n[2528] \"1013208\" \"1013221\" \"1013222\" \"1013227\" \"1013306\" \"1013310\" \"1013483\"\n[2535] \"1013485\" \"1013496\" \"1013609\" \"1013614\" \"1013690\" \"1013698\" \"1013988\"\n[2542] \"1014566\" \"1014583\" \"1014610\" \"1014674\" \"1014922\" \"1014928\" \"1014938\"\n[2549] \"1015093\" \"1015097\" \"1015180\" \"1015315\" \"1015338\" \"1015356\" \"1015370\"\n[2556] \"1015376\" \"1015479\" \"1015480\" \"1015490\" \"1015712\" \"1016055\" \"1016061\"\n[2563] \"1016163\" \"1016170\" \"1016294\" \"1016360\" \"1016405\" \"1016452\" \"1016457\"\n[2570] \"1016479\" \"1016494\" \"1016623\" \"1016624\" \"1016628\" \"1016818\" \"1016819\"\n[2577] \"1016837\" \"1016862\" \"1016878\" \"1016892\" \"1016935\" \"1016941\" \"1017144\"\n[2584] \"1017202\" \"1017207\" \"1017307\" \"1017308\" \"1017311\" \"1017375\" \"1017688\"\n[2591] \"1017691\" \"1017751\" \"1017775\" \"1017875\" \"1017993\" \"1018239\" \"1018242\"\n[2598] \"1018265\" \"1018269\" \"1018326\" \"1018345\" \"1018375\" \"1018474\" \"1018482\"\n[2605] \"1018491\" \"1018531\" \"1018533\" \"1018534\" \"1018618\" \"1018785\" \"1018795\"\n[2612] \"1018809\" \"1018856\" \"1019089\" \"1019114\" \"1019431\" \"1019488\" \"1019598\"\n[2619] \"1019870\" \"1019921\" \"1019924\" \"1020075\" \"1020215\" \"1020237\" \"1020263\"\n[2626] \"1021139\" \"1021148\" \"1021152\" \"1021279\" \"1022099\" \"1022322\" \"1022323\"\n[2633] \"1022324\" \"1022923\" \"1023367\" \"1023368\" \"1023437\" \"1023459\" \"1023567\"\n[2640] \"1023674\" \"1023756\" \"1023986\" \"1024008\" \"1024081\" \"1024109\" \"1024302\"\n[2647] \"1024794\" \"1026303\" \"1026787\" \"1026931\" \"1026933\" \"1027029\" \"1027083\"\n[2654] \"1027090\" \"1027191\" \"1027239\" \"1027251\" \"1027299\" \"1027507\" \"1027887\"\n[2661] \"1027890\" \"1027978\" \"1028057\" \"1028447\" \"1028449\" \"1029101\" \"1029311\"\n[2668] \"1029869\" \"1029897\" \"1030079\" \"1030094\" \"1030413\" \"1030419\" \"1030457\"\n[2675] \"1030681\" \"1030698\" \"1030803\" \"1030811\" \"1030863\" \"1030943\" \"1030967\"\n[2682] \"1031347\" \"1031603\" \"1031903\" \"1031961\" \"1032047\" \"1032165\" \"1032240\"\n[2689] \"1032391\" \"1032399\" \"1032411\" \"1032596\" \"1032649\" \"1032653\" \"1032679\"\n[2696] \"1032852\" \"1033527\" \"1033711\" \"1033741\" \"1033755\" \"1033883\" \"1033897\"\n[2703] \"1033933\" \"1033949\" \"1034087\" \"1034165\" \"1034181\" \"1034241\" \"1034823\"\n[2710] \"1034889\" \"1035047\" \"1035071\" \"1035181\" \"1035207\" \"1035493\" \"1035875\"\n[2717] \"1035895\" \"1035929\" \"1036023\" \"1036025\" \"1036119\" \"1036157\" \"1036163\"\n[2724] \"1036261\" \"1036337\" \"1036355\" \"1036395\" \"1036473\" \"1036519\" \"1036550\"\n[2731] \"1036713\" \"1036719\" \"1037051\" \"1037755\" \"1037999\" \"1038001\" \"1038471\"\n[2738] \"1038577\" \"1038917\" \"1039301\" \"1039305\" \"1039333\" \"1039357\" \"1039365\"\n[2745] \"1039427\" \"1039429\" \"1039433\" \"1039519\" \"1039541\" \"1039545\" \"1039959\"\n[2752] \"1040009\" \"1040013\" \"1040083\" \"1040215\" \"1040237\" \"1040269\" \"1040553\"\n[2759] \"1040723\" \"1041085\" \"1041133\" \"1041191\" \"1041364\" \"1041480\" \"1041487\"\n[2766] \"1041495\" \"1041517\" \"1041539\" \"1041599\" \"1041671\" \"1041824\" \"1041831\"\n[2773] \"1041869\" \"1041999\" \"1042093\" \"1042095\" \"1042184\" \"1042249\" \"1042283\"\n[2780] \"1042287\" \"1042425\" \"1042483\" \"1042499\" \"1042807\" \"1042814\" \"1043201\"\n[2787] \"1043361\" \"1043531\" \"1043781\" \"1044145\" \"1044161\" \"1044241\" \"1044267\"\n[2794] \"1044299\" \"1044425\" \"1044489\" \"1044555\" \"1044581\" \"1044789\" \"1044917\"\n[2801] \"1044925\" \"1044939\" \"1045072\" \"1045411\" \"1045429\" \"1045607\" \"1045645\"\n[2808] \"1045699\" \"1045885\" \"1045938\" \"1045977\" \"1046093\" \"1046332\" \"1046373\"\n[2815] \"1046439\" \"1046533\" \"1046563\" \"1046613\" \"1046619\" \"1046789\" \"1046839\"\n[2822] \"1046901\" \"1046941\" \"1046943\" \"1046953\" \"1046955\" \"1046971\" \"1047099\"\n[2829] \"1047591\" \"1047623\" \"1047745\" \"1047807\" \"1048081\" \"1048089\" \"1048093\"\n[2836] \"1048097\" \"1048693\" \"1048707\" \"1048725\" \"1049621\" \"1049629\" \"1049703\"\n[2843] \"1049731\" \"1049863\" \"1050345\" \"1050361\" \"1050431\" \"1050434\" \"1050451\"\n[2850] \"1050455\" \"1050461\" \"1050465\" \"1050481\" \"1050489\" \"1050637\" \"1050653\"\n[2857] \"1050703\" \"1050891\" \"1050899\" \"1050913\" \"1051177\" \"1051197\" \"1051341\"\n[2864] \"1051459\" \"1051967\" \"1051972\" \"1051973\" \"1052449\" \"1052469\" \"1052541\"\n[2871] \"1052665\" \"1052795\" \"1052913\" \"1052920\" \"1053039\" \"1053145\" \"1053153\"\n[2878] \"1053205\" \"1053255\" \"1053357\" \"1053383\" \"1053403\" \"1053477\" \"1053619\"\n[2885] \"1053625\" \"1053633\" \"1053899\" \"1053902\" \"1053903\" \"1053905\" \"1053911\"\n[2892] \"1053931\" \"1053934\" \"1053957\" \"1054077\" \"1054237\" \"1054253\" \"1054282\"\n[2899] \"1054284\" \"1054285\" \"1054286\" \"1054291\" \"1054303\" \"1054307\" \"1054321\"\n[2906] \"1054324\" \"1054327\" \"1054329\" \"1054335\" \"1054351\" \"1054365\" \"1054396\"\n[2913] \"1054541\" \"1054547\" \"1054548\" \"1054575\" \"1054613\" \"1054691\" \"1054810\"\n[2920] \"1054823\" \"1054825\" \"1054863\" \"1054921\" \"1054949\" \"1054954\" \"1055003\"\n[2927] \"1055015\" \"1055035\" \"1055063\" \"1055065\" \"1055067\" \"1055079\" \"1055081\"\n[2934] \"1055130\" \"1055134\" \"1055139\" \"1055190\" \"1055243\" \"1055273\" \"1055295\"\n[2941] \"1055297\" \"1055307\" \"1055343\" \"1055367\" \"1055377\" \"1055380\" \"1055386\"\n[2948] \"1055412\" \"1055415\" \"1055432\" \"1055555\" \"1055565\" \"1055570\" \"1055643\"\n[2955] \"1055839\" \"1055842\" \"1055868\" \"1055874\" \"1055879\" \"1055883\" \"1055891\"\n[2962] \"1055897\" \"1055903\" \"1055917\" \"1055954\" \"1055958\" \"1055997\" \"1055999\"\n[2969] \"1056035\" \"1056043\" \"1056045\" \"1056054\" \"1056103\" \"1056109\" \"1056113\"\n[2976] \"1056119\" \"1056124\" \"1056127\" \"1056128\" \"1056171\" \"1056174\" \"1056191\"\n[2983] \"1056192\" \"1056197\" \"1056199\" \"1056200\" \"1056207\" \"1056226\" \"1056255\"\n[2990] \"1056258\" \"1056261\" \"1056265\" \"1056273\" \"1056282\" \"1056321\" \"1056322\"\n[2997] \"1056329\" \"1056347\" \"1056349\" \"1056359\" \"1056361\" \"1056363\" \"1056365\"\n[3004] \"1056367\" \"1056370\" \"1056373\" \"1056374\" \"1056375\" \"1056377\" \"1056381\"\n[3011] \"1056382\" \"1056384\" \"1056387\" \"1056388\" \"1056391\" \"1056395\" \"1056399\"\n[3018] \"1056413\" \"1056414\" \"1056419\" \"1056440\" \"1056514\" \"1056525\" \"1056527\"\n[3025] \"1056541\" \"1056543\" \"1056544\" \"1056545\" \"1056553\" \"1056558\" \"1056569\"\n[3032] \"1056605\" \"1056609\" \"1056612\" \"1056624\" \"1056648\" \"1056663\" \"1056669\"\n[3039] \"1056675\" \"1056683\" \"1056686\" \"1056701\" \"1056756\" \"1056839\" \"1056843\"\n[3046] \"1056846\" \"1056889\" \"1056893\" \"1056899\" \"1056919\" \"1056923\" \"1056929\"\n[3053] \"1056979\" \"1056983\" \"1056985\" \"1056988\" \"1056989\" \"1056990\" \"1057009\"\n[3060] \"1057011\" \"1057015\" \"1057018\" \"1057029\" \"1057037\" \"1057042\" \"1057051\"\n[3067] \"1057064\" \"1057073\" \"1057103\" \"1057109\" \"1057123\" \"1057128\" \"1057129\"\n[3074] \"1057153\" \"1057163\" \"1057167\" \"1057183\" \"1057201\" \"1057247\" \"1057248\"\n[3081] \"1057279\" \"1057281\" \"1057317\" \"1057318\" \"1057320\" \"1057339\" \"1057342\"\n[3088] \"1057345\" \"1057349\" \"1057350\" \"1057378\" \"1057535\" \"1057687\" \"1057689\"\n[3095] \"1057693\" \"1057697\" \"1057705\" \"1057706\" \"1057741\" \"1057761\" \"1057762\"\n[3102] \"1057767\" \"1057771\" \"1057772\" \"1057773\" \"1057776\" \"1057789\" \"1057790\"\n[3109] \"1057791\" \"1057841\" \"1057915\" \"1057927\" \"1057930\" \"1057939\" \"1057963\"\n[3116] \"1057968\" \"1057991\" \"1058097\" \"1058127\" \"1058129\" \"1058148\" \"1058215\"\n[3123] \"1058219\" \"1058220\" \"1058232\" \"1058277\" \"1058281\" \"1058327\" \"1058409\"\n[3130] \"1058410\" \"1058418\" \"1058565\" \"1058579\" \"1058584\" \"1058815\" \"1058820\"\n[3137] \"1058824\" \"1058843\" \"1058856\" \"1058857\" \"1058888\" \"1058909\" \"1058917\"\n[3144] \"1058966\" \"1058997\" \"1058999\" \"1059015\" \"1059095\" \"1059102\" \"1059221\"\n[3151] \"1059307\" \"1059310\" \"1059314\" \"1059316\" \"1059324\" \"1059335\" \"1059368\"\n[3158] \"1059391\" \"1059397\" \"1059405\" \"1059408\" \"1059455\" \"1059465\" \"1059572\"\n[3165] \"1059573\" \"1059578\" \"1059623\" \"1059659\" \"1059673\" \"1059721\" \"1059724\"\n[3172] \"1059747\" \"1059762\" \"1059816\" \"1059818\" \"1059856\" \"1059885\" \"1059901\"\n[3179] \"1059957\" \"1059959\" \"1060003\" \"1060025\" \"1060077\" \"1060085\" \"1060087\"\n[3186] \"1060088\" \"1060097\" \"1060099\" \"1060177\" \"1060178\" \"1060196\" \"1060218\"\n[3193] \"1060313\" \"1060413\" \"1060414\" \"1060424\" \"1060433\" \"1060437\" \"1060717\"\n[3200] \"1060735\" \"1060765\" \"1060821\" \"1060831\" \"1060833\" \"1060834\" \"1060881\"\n[3207] \"1060933\" \"1060935\" \"1060949\" \"1061016\" \"1061167\" \"1061168\" \"1061177\"\n[3214] \"1061206\" \"1061213\" \"1061239\" \"1061285\" \"1061369\" \"1061377\" \"1061381\"\n[3221] \"1061395\" \"1061407\" \"1061419\" \"1061425\" \"1061426\" \"1061431\" \"1061466\"\n[3228] \"1061480\" \"1061482\" \"1061556\" \"1061557\" \"1061573\" \"1061579\" \"1061603\"\n[3235] \"1061605\" \"1061607\" \"1061668\" \"1061736\" \"1061742\" \"1061941\" \"1061978\"\n[3242] \"1062093\" \"1062128\" \"1062317\" \"1062326\" \"1062413\" \"1062431\" \"1062551\"\n[3249] \"1062565\" \"1062611\" \"1062623\" \"1062664\" \"1062683\" \"1062709\" \"1062712\"\n[3256] \"1062713\" \"1062737\" \"1062739\" \"1062753\" \"1062755\" \"1062768\" \"1062804\"\n[3263] \"1062815\" \"1062849\" \"1062855\" \"1062860\" \"1062866\" \"1062916\" \"1062971\"\n[3270] \"1062978\" \"1062992\" \"1062997\" \"1063133\" \"1063207\" \"1063208\" \"1063214\"\n[3277] \"1063317\" \"1063391\" \"1063410\" \"1063434\" \"1063454\" \"1063473\" \"1063481\"\n[3284] \"1063482\" \"1063494\" \"1063499\" \"1063521\" \"1063523\" \"1063540\" \"1063548\"\n[3291] \"1063554\" \"1063564\" \"1063596\" \"1063679\" \"1063698\" \"1063709\" \"1063714\"\n[3298] \"1063768\" \"1063774\" \"1063824\" \"1063828\" \"1063837\" \"1063841\" \"1063853\"\n[3305] \"1063878\" \"1063909\" \"1063966\" \"1063993\" \"1063996\" \"1064065\" \"1064099\"\n[3312] \"1064133\" \"1064245\" \"1064375\" \"1064433\" \"1064566\" \"1064629\" \"1064632\"\n[3319] \"1064665\" \"1064780\" \"1064840\" \"1064902\" \"1065005\" \"1065076\" \"1065141\"\n[3326] \"1065169\" \"1065213\" \"1065265\" \"1065287\" \"1065533\" \"1065673\" \"1065894\"\n[3333] \"1065895\" \"1065944\" \"1065969\" \"1065974\" \"1065989\" \"1065992\" \"1065999\"\n[3340] \"1066005\" \"1066074\" \"1066076\" \"1066081\" \"1066083\" \"1066084\" \"1066095\"\n[3347] \"1066096\" \"1066098\" \"1066099\" \"1066100\" \"1066105\" \"1066223\" \"1066329\"\n[3354] \"1066335\" \"1066368\" \"1066396\" \"1066415\" \"1066482\" \"1066483\" \"1066486\"\n[3361] \"1066506\" \"1066543\" \"1066589\" \"1066592\" \"1066597\" \"1066621\" \"1066632\"\n[3368] \"1066635\" \"1066697\" \"1066711\" \"1066725\" \"1066756\" \"1066761\" \"1066765\"\n[3375] \"1066795\" \"1066832\" \"1066855\" \"1066869\" \"1066883\" \"1066905\" \"1066926\"\n[3382] \"1066931\" \"1066938\" \"1066953\" \"1066959\" \"1066965\" \"1066967\" \"1066970\"\n[3389] \"1067055\" \"1067073\" \"1067132\" \"1067155\" \"1067171\" \"1067199\" \"1067217\"\n[3396] \"1067253\" \"1067254\" \"1067255\" \"1067256\" \"1067263\" \"1067268\" \"1067277\"\n[3403] \"1067284\" \"1067301\" \"1067308\" \"1067316\" \"1067321\" \"1067337\" \"1067355\"\n[3410] \"1067373\" \"1067399\" \"1067416\" \"1067462\" \"1067494\" \"1067499\" \"1067515\"\n[3417] \"1067533\" \"1067561\" \"1067593\" \"1067597\" \"1067598\" \"1067749\" \"1067779\"\n[3424] \"1067788\" \"1067797\" \"1067819\" \"1067857\" \"1067863\" \"1067869\" \"1067871\"\n[3431] \"1067872\" \"1067873\" \"1067904\" \"1067909\" \"1067916\" \"1067934\" \"1067939\"\n[3438] \"1067960\" \"1067962\" \"1067975\" \"1067978\" \"1067993\" \"1067997\" \"1068009\"\n[3445] \"1068035\" \"1068041\" \"1068043\" \"1068044\" \"1068047\" \"1068057\" \"1068063\"\n[3452] \"1068065\" \"1068068\" \"1068075\" \"1068091\" \"1068107\" \"1068109\" \"1068135\"\n[3459] \"1068141\" \"1068149\" \"1068153\" \"1068157\" \"1068162\" \"1068165\" \"1068211\"\n[3466] \"1068216\" \"1068315\" \"1068325\" \"1068326\" \"1068379\" \"1068380\" \"1068381\"\n[3473] \"1068382\" \"1068389\" \"1068390\" \"1068406\" \"1068444\" \"1068465\" \"1068481\"\n[3480] \"1068515\" \"1068518\" \"1068519\" \"1068534\" \"1068547\" \"1068548\" \"1068599\"\n[3487] \"1068625\" \"1068683\" \"1068693\" \"1068701\" \"1068702\" \"1068718\" \"1068763\"\n[3494] \"1068773\" \"1068777\" \"1068791\" \"1068823\" \"1068825\" \"1068835\" \"1068838\"\n[3501] \"1068847\" \"1068849\" \"1068851\" \"1068861\" \"1068873\" \"1068926\" \"1068934\"\n[3508] \"1068941\" \"1068948\" \"1068951\" \"1068957\" \"1068961\" \"1068971\" \"1068993\"\n[3515] \"1069003\" \"1069015\" \"1069021\" \"1069056\" \"1069065\" \"1069083\" \"1069084\"\n[3522] \"1069085\" \"1069115\" \"1069127\" \"1069131\" \"1069134\" \"1069142\" \"1069151\"\n[3529] \"1069153\" \"1069165\" \"1069166\" \"1069181\" \"1069189\" \"1069209\" \"1069219\"\n[3536] \"1069221\" \"1069223\" \"1069245\" \"1069251\" \"1069255\" \"1069265\" \"1069279\"\n[3543] \"1069302\" \"1069317\" \"1069349\" \"1069353\" \"1069358\" \"1069371\" \"1069503\"\n[3550] \"1069521\" \"1069557\" \"1069563\" \"1069615\" \"1069619\" \"1069621\" \"1069663\"\n[3557] \"1069705\" \"1069707\" \"1069726\" \"1069737\" \"1069771\" \"1069819\" \"1069823\"\n[3564] \"1069849\" \"1069850\" \"1069921\" \"1069946\" \"1069959\" \"1070023\" \"1070039\"\n[3571] \"1070185\" \"1070221\" \"1070233\" \"1070241\" \"1070247\" \"1070248\" \"1070250\"\n[3578] \"1070311\" \"1070409\" \"1070429\" \"1070435\" \"1070439\" \"1070496\" \"1070531\"\n[3585] \"1070619\" \"1070644\" \"1070655\" \"1070699\" \"1070759\" \"1070892\" \"1071041\"\n[3592] \"1071043\" \"1071050\" \"1071183\" \"1071277\" \"1071278\" \"1071307\" \"1071361\"\n[3599] \"1071435\" \"1071513\" \"1071514\" \"1071539\" \"1071597\" \"1071670\" \"1071681\"\n[3606] \"1071792\" \"1071973\" \"1072001\" \"1072074\" \"1072117\" \"1072134\" \"1072159\"\n[3613] \"1072195\" \"1072213\" \"1072226\" \"1072257\" \"1072266\" \"1072285\" \"1072297\"\n[3620] \"1072446\" \"1072449\" \"1072454\" \"1072515\" \"1072516\" \"1072525\" \"1072527\"\n[3627] \"1072538\" \"1072547\" \"1072562\" \"1072569\" \"1072573\" \"1072597\" \"1072711\"\n[3634] \"1072719\" \"1072721\" \"1072723\" \"1072727\" \"1072731\" \"1072851\" \"1072961\"\n[3641] \"1072972\" \"1072983\" \"1072999\" \"1073086\" \"1073101\" \"1073179\" \"1073200\"\n[3648] \"1073209\" \"1073243\" \"1073251\" \"1073277\" \"1073281\" \"1073310\" \"1073313\"\n[3655] \"1073319\" \"1073325\" \"1073340\" \"1073341\" \"1073367\" \"1073413\" \"1073422\"\n[3662] \"1073436\" \"1073458\" \"1073459\" \"1073537\" \"1073539\" \"1073540\" \"1073556\"\n[3669] \"1073647\" \"1073668\" \"1073731\" \"1073734\" \"1073797\" \"1074018\" \"1074033\"\n[3676] \"1074043\" \"1074050\" \"1074055\" \"1074126\" \"1074137\" \"1074143\" \"1074147\"\n[3683] \"1074161\" \"1074168\" \"1074242\" \"1074243\" \"1074273\" \"1074275\" \"1074283\"\n[3690] \"1074375\" \"1074387\" \"1074388\" \"1074403\" \"1074497\" \"1074565\" \"1074567\"\n[3697] \"1074595\" \"1074597\" \"1074642\" \"1074859\" \"1074883\" \"1074948\" \"1074979\"\n[3704] \"1075027\" \"1075039\" \"1075103\" \"1075214\" \"1075217\" \"1075247\" \"1075299\"\n[3711] \"1075303\" \"1075317\" \"1075323\" \"1075387\" \"1075395\" \"1075440\" \"1075447\"\n[3718] \"1075468\" \"1075549\" \"1075550\" \"1075556\" \"1075564\" \"1075566\" \"1075645\"\n[3725] \"1075669\" \"1075671\" \"1075677\" \"1075853\" \"1075930\" \"1075934\" \"1076012\"\n[3732] \"1076032\" \"1076046\" \"1076055\" \"1076091\" \"1076122\" \"1076151\" \"1076211\"\n[3739] \"1076219\" \"1076223\" \"1076224\" \"1076229\" \"1076249\" \"1076281\" \"1076299\"\n[3746] \"1076355\" \"1076361\" \"1076395\" \"1076418\" \"1076429\" \"1076454\" \"1076493\"\n[3753] \"1076513\" \"1076515\" \"1076529\" \"1076530\" \"1076549\" \"1076576\" \"1076582\"\n[3760] \"1076595\" \"1076596\" \"1076604\" \"1076663\" \"1076672\" \"1076680\" \"1076700\"\n[3767] \"1076712\" \"1076714\" \"1076723\" \"1076731\" \"1076735\" \"1076743\" \"1076751\"\n[3774] \"1076774\" \"1076792\" \"1076820\" \"1076897\" \"1076911\" \"1076914\" \"1076926\"\n[3781] \"1076949\" \"1076970\" \"1077013\" \"1077025\" \"1077027\" \"1077031\" \"1077077\"\n[3788] \"1077080\" \"1077083\" \"1077347\" \"1077365\" \"1077461\" \"1077470\" \"1077491\"\n[3795] \"1077495\" \"1077577\" \"1077599\" \"1077602\" \"1077615\" \"1077617\" \"1077618\"\n[3802] \"1077638\" \"1077687\" \"1077697\" \"1077721\" \"1077725\" \"1077729\" \"1077748\"\n[3809] \"1077759\" \"1077768\" \"1077828\" \"1077888\" \"1077889\" \"1078003\" \"1078028\"\n[3816] \"1078031\" \"1078073\" \"1078080\" \"1078139\" \"1078233\" \"1078253\" \"1078261\"\n[3823] \"1078287\" \"1078321\" \"1078486\" \"1078505\" \"1078511\" \"1078727\" \"1078769\"\n[3830] \"1078801\" \"1078822\" \"1078884\" \"1078914\" \"1078927\" \"1078928\" \"1078969\"\n[3837] \"1078973\" \"1078975\" \"1078978\" \"1079051\" \"1079055\" \"1079064\" \"1079067\"\n[3844] \"1079073\" \"1079077\" \"1079093\" \"1079095\" \"1079119\" \"1079137\" \"1079152\"\n[3851] \"1079154\" \"1079168\" \"1079209\" \"1079217\" \"1079226\" \"1079279\" \"1079284\"\n[3858] \"1079285\" \"1079287\" \"1079290\" \"1079309\" \"1079348\" \"1079353\" \"1079356\"\n[3865] \"1079357\" \"1079358\" \"1079360\" \"1079367\" \"1079378\" \"1079387\" \"1079393\"\n[3872] \"1079394\" \"1079413\" \"1079417\" \"1079427\" \"1079430\" \"1079445\" \"1079473\"\n[3879] \"1079479\" \"1079480\" \"1079493\" \"1079519\" \"1079548\" \"1079581\" \"1079615\"\n[3886] \"1079623\" \"1079640\" \"1079653\" \"1079690\" \"1079719\" \"1079727\" \"1079737\"\n[3893] \"1079777\" \"1079791\" \"1079876\" \"1079945\" \"1080033\" \"1080068\" \"1080084\"\n[3900] \"1080110\" \"1080111\" \"1080113\" \"1080158\" \"1080216\" \"1080241\" \"1080255\"\n[3907] \"1080265\" \"1080291\" \"1080303\" \"1080316\" \"1080366\" \"1080373\" \"1080394\"\n[3914] \"1080425\" \"1080489\" \"1080505\" \"1080509\" \"1080515\" \"1080655\" \"1080669\"\n[3921] \"1080783\" \"1080841\" \"1080857\" \"1080896\" \"1081077\" \"1081079\" \"1081081\"\n[3928] \"1081125\" \"1081145\" \"1081146\" \"1081173\" \"1081207\" \"1081333\" \"1081337\"\n[3935] \"1081349\" \"1081361\" \"1081419\" \"1081441\" \"1081492\" \"1081525\" \"1081529\"\n[3942] \"1081539\" \"1081558\" \"1081565\" \"1081696\" \"1081704\" \"1081733\" \"1081739\"\n[3949] \"1081743\" \"1081766\" \"1081784\" \"1081795\" \"1081796\" \"1082027\" \"1082031\"\n[3956] \"1082032\" \"1082069\" \"1082111\" \"1082135\" \"1082137\" \"1082138\" \"1082151\"\n[3963] \"1082209\" \"1082231\" \"1082323\" \"1082326\" \"1082332\" \"1082334\" \"1082335\"\n[3970] \"1082339\" \"1082342\" \"1082345\" \"1082351\" \"1082356\" \"1082405\" \"1082409\"\n[3977] \"1082411\" \"1082412\" \"1082425\" \"1082455\" \"1082500\" \"1082512\" \"1082598\"\n[3984] \"1082656\" \"1082733\" \"1082761\" \"1082945\" \"1082949\" \"1082953\" \"1082985\"\n[3991] \"1082997\" \"1083037\" \"1083040\" \"1083047\" \"1083049\" \"1083077\" \"1083080\"\n[3998] \"1083097\" \"1083230\" \"1083249\" \"1083371\" \"1083376\" \"1083504\" \"1083521\"\n[4005] \"1083523\" \"1083559\" \"1083570\" \"1083575\" \"1083605\" \"1083625\" \"1083715\"\n[4012] \"1083747\" \"1083760\" \"1083767\" \"1083798\" \"1083832\" \"1083835\" \"1083846\"\n[4019] \"1083922\" \"1083977\" \"1083983\" \"1084021\" \"1084067\" \"1084078\" \"1084111\"\n[4026] \"1084174\" \"1084295\" \"1084302\" \"1084381\" \"1084393\" \"1084413\" \"1084462\"\n[4033] \"1084521\" \"1084585\" \"1084591\" \"1084665\" \"1084671\" \"1084705\" \"1084716\"\n[4040] \"1084727\" \"1084728\" \"1084735\" \"1084769\" \"1084770\" \"1084779\" \"1084780\"\n[4047] \"1084852\" \"1084853\" \"1084876\" \"1084983\" \"1084988\" \"1084997\" \"1085154\"\n[4054] \"1085217\" \"1085222\" \"1085241\" \"1085254\" \"1085271\" \"1085423\" \"1085427\"\n[4061] \"1085522\" \"1085541\" \"1085586\" \"1085605\" \"1085618\" \"1085645\" \"1085651\"\n[4068] \"1085667\" \"1085670\" \"1085690\" \"1085761\" \"1085772\" \"1085859\" \"1085862\"\n[4075] \"1085863\" \"1085869\" \"1085883\" \"1085894\" \"1085934\" \"1085936\" \"1085940\"\n[4082] \"1085959\" \"1086001\" \"1086069\" \"1086163\" \"1086367\" \"1086421\" \"1086530\"\n[4089] \"1086597\" \"1086605\" \"1086658\" \"1086813\" \"1086975\" \"1086990\" \"1087093\"\n[4096] \"1087108\" \"1087169\" \"1087171\" \"1087177\" \"1087216\" \"1087251\" \"1087261\"\n[4103] \"1087374\" \"1087428\" \"1087438\" \"1087487\" \"1087603\" \"1087622\" \"1087782\"\n[4110] \"1087835\" \"1087885\" \"1087897\" \"1088029\" \"1088031\" \"1088091\" \"1088209\"\n[4117] \"1088315\" \"1088320\" \"1088423\" \"1088427\" \"1088457\" \"1088479\" \"1088480\"\n[4124] \"1088515\" \"1088521\" \"1088579\" \"1088679\" \"1088682\" \"1088733\" \"1088734\"\n[4131] \"1088741\" \"1088743\" \"1088745\" \"1088753\" \"1088756\" \"1088792\" \"1088810\"\n[4138] \"1088860\" \"1088889\" \"1088891\" \"1088907\" \"1088940\" \"1088959\" \"1088987\"\n[4145] \"1089089\" \"1089140\" \"1089146\" \"1089197\" \"1089273\" \"1089290\" \"1089297\"\n[4152] \"1089352\" \"1089410\" \"1089411\" \"1089416\" \"1089793\" \"1089804\" \"1089821\"\n[4159] \"1089925\" \"1089929\" \"1089950\" \"1089957\" \"1089965\" \"1089979\" \"1090008\"\n[4166] \"1090057\" \"1090074\" \"1090125\" \"1090157\" \"1090285\" \"1090291\" \"1090296\"\n[4173] \"1090301\" \"1090363\" \"1090383\" \"1090408\" \"1090439\" \"1090463\" \"1090535\"\n[4180] \"1090557\" \"1090603\" \"1090687\" \"1090688\" \"1090896\" \"1091123\" \"1091236\"\n[4187] \"1091368\" \"1091538\" \"1091563\" \"1091669\" \"1091777\" \"1091795\" \"1091813\"\n[4194] \"1091977\" \"1092032\" \"1092138\" \"1092196\" \"1092269\" \"1092285\" \"1092291\"\n[4201] \"1092292\" \"1092423\" \"1092424\" \"1092471\" \"1092476\" \"1092548\" \"1092553\"\n[4208] \"1092556\" \"1092566\" \"1092581\" \"1092585\" \"1092603\" \"1092683\" \"1092722\"\n[4215] \"1092823\" \"1092835\" \"1092851\" \"1092867\" \"1092900\" \"1092947\" \"1093329\"\n[4222] \"1093467\" \"1093469\" \"1093523\" \"1093541\" \"1093544\" \"1093565\" \"1093668\"\n[4229] \"1093679\" \"1093816\" \"1093832\" \"1093915\" \"1093974\" \"1094285\" \"1094332\"\n[4236] \"1094363\" \"1094471\" \"1094482\" \"1094597\" \"1094707\" \"1094711\" \"1094713\"\n[4243] \"1094719\" \"1094844\" \"1094903\" \"1094907\" \"1094947\" \"1095033\" \"1095086\"\n[4250] \"1095194\" \"1095195\" \"1095201\" \"1095205\" \"1095316\" \"1095320\" \"1095346\"\n[4257] \"1095373\" \"1095389\" \"1095395\" \"1095436\" \"1095553\" \"1095645\" \"1095666\"\n[4264] \"1095670\" \"1095671\" \"1095882\" \"1095895\" \"1095898\" \"1095903\" \"1095906\"\n[4271] \"1095907\" \"1095910\" \"1095966\" \"1096027\" \"1096043\" \"1096057\" \"1096166\"\n[4278] \"1096191\" \"1096345\" \"1096371\" \"1096377\" \"1096480\" \"1096536\" \"1096546\"\n[4285] \"1096567\" \"1096633\" \"1096684\" \"1096698\" \"1096706\" \"1096736\" \"1096738\"\n[4292] \"1096789\" \"1096792\" \"1096930\" \"1097022\" \"1097051\" \"1097108\" \"1097111\"\n[4299] \"1097203\" \"1097207\" \"1097252\" \"1097309\" \"1097346\" \"1097383\" \"1097387\"\n[4306] \"1097567\" \"1097613\" \"1097655\" \"1097669\" \"1097671\" \"1097679\" \"1097683\"\n[4313] \"1097700\" \"1097706\" \"1097862\" \"1097909\" \"1097911\" \"1098065\" \"1098088\"\n[4320] \"1098149\" \"1098155\" \"1098158\" \"1098163\" \"1098166\" \"1098175\" \"1098197\"\n[4327] \"1098511\" \"1098550\" \"1098636\" \"1098638\" \"1098668\" \"1098743\" \"1098803\"\n[4334] \"1098809\" \"1098818\" \"1098828\" \"1098925\" \"1098930\" \"1098937\" \"1099089\"\n[4341] \"1099104\" \"1099105\" \"1099137\" \"1099170\" \"1099181\" \"1099187\" \"1099217\"\n[4348] \"1099233\" \"1099240\" \"1099251\" \"1099285\" \"1099291\" \"1099293\" \"1099387\"\n[4355] \"1099448\" \"1099481\" \"1099482\" \"1099589\" \"1099609\" \"1099615\" \"1099633\"\n[4362] \"1099653\" \"1099654\" \"1099699\" \"1099703\" \"1099790\" \"1099869\" \"1099903\"\n[4369] \"1099934\" \"1100172\" \"1100192\" \"1100235\" \"1100274\" \"1100339\" \"1100431\"\n[4376] \"1100485\" \"1100566\" \"1100589\" \"1100613\" \"1100641\" \"1100989\" \"1101005\"\n[4383] \"1101047\" \"1101075\" \"1101088\" \"1101105\" \"1101113\" \"1101115\" \"1101117\"\n[4390] \"1101125\" \"1101127\" \"1101172\" \"1101191\" \"1101211\" \"1101310\" \"1101353\"\n[4397] \"1101390\" \"1101447\" \"1101458\" \"1101974\" \"1102191\" \"1102329\" \"1102447\"\n[4404] \"1102451\" \"1102524\" \"1102533\" \"1102541\" \"1102647\" \"1102649\" \"1102654\"\n[4411] \"1102655\" \"1102665\" \"1102698\" \"1102715\" \"1102837\" \"1102891\" \"1102894\"\n[4418] \"1102895\" \"1102957\" \"1102988\" \"1103037\" \"1103097\" \"1103137\" \"1103308\"\n[4425] \"1103310\" \"1103311\" \"1103342\" \"1103384\" \"1103411\" \"1103493\" \"1103682\"\n[4432] \"1103690\" \"1103701\" \"1103721\" \"1103743\" \"1103746\" \"1103749\" \"1103795\"\n[4439] \"1103837\" \"1103975\" \"1103983\" \"1104021\" \"1104183\" \"1104214\" \"1104241\"\n[4446] \"1104305\" \"1104348\" \"1104367\" \"1104511\" \"1104619\" \"1104622\" \"1104651\"\n[4453] \"1104781\" \"1104819\" \"1104822\" \"1105107\" \"1105119\" \"1105145\" \"1105161\"\n[4460] \"1105291\" \"1105293\" \"1105397\" \"1105420\" \"1105495\" \"1105501\" \"1105502\"\n[4467] \"1105516\" \"1105562\" \"1105627\" \"1105794\" \"1106018\" \"1106067\" \"1106081\"\n[4474] \"1106188\" \"1106201\" \"1106219\" \"1106226\" \"1106421\" \"1106637\" \"1106656\"\n[4481] \"1106661\" \"1106729\" \"1106841\" \"1106845\" \"1106856\" \"1106861\" \"1106863\"\n[4488] \"1107277\" \"1107297\" \"1107485\" \"1107491\" \"1107510\" \"1107715\" \"1107812\"\n[4495] \"1107840\" \"1107870\" \"1107918\" \"1107945\" \"1108001\" \"1108013\" \"1108014\"\n[4502] \"1108055\" \"1108062\" \"1108088\" \"1108117\" \"1108151\" \"1108159\" \"1108227\"\n[4509] \"1108231\" \"1108244\" \"1108272\" \"1108298\" \"1108318\" \"1108329\" \"1108335\"\n[4516] \"1108388\" \"1108402\" \"1108423\" \"1108519\" \"1108671\" \"1108696\" \"1108929\"\n[4523] \"1108961\" \"1108985\" \"1109055\" \"1109106\" \"1109175\" \"1109185\" \"1109196\"\n[4530] \"1109275\" \"1109293\" \"1109324\" \"1109631\" \"1109649\" \"1109997\" \"1110010\"\n[4537] \"1110061\" \"1110067\" \"1110147\" \"1110231\" \"1110253\" \"1110257\" \"1110279\"\n[4544] \"1110307\" \"1110321\" \"1110379\" \"1110565\" \"1110624\" \"1110672\" \"1110706\"\n[4551] \"1110875\" \"1110880\" \"1110929\" \"1110968\" \"1111193\" \"1111199\" \"1111200\"\n[4558] \"1111263\" \"1111291\" \"1111471\" \"1111601\" \"1111611\" \"1111621\" \"1111622\"\n[4565] \"1111692\" \"1111719\" \"1111757\" \"1111789\" \"1111868\" \"1111895\" \"1111911\"\n[4572] \"1111925\" \"1111989\" \"1112095\" \"1112141\" \"1112142\" \"1112161\" \"1112230\"\n[4579] \"1112261\" \"1112381\" \"1112537\" \"1112538\" \"1112586\" \"1112595\" \"1112652\"\n[4586] \"1112700\" \"1112701\" \"1112729\" \"1112768\" \"1112777\" \"1112860\" \"1112976\"\n[4593] \"1113103\" \"1113127\" \"1113138\" \"1113147\" \"1113156\" \"1113221\" \"1113318\"\n[4600] \"1113385\" \"1113635\" \"1113742\" \"1113786\" \"1113823\" \"1113973\" \"1114310\"\n[4607] \"1114385\" \"1114469\" \"1114576\" \"1114582\" \"1114665\" \"1114823\" \"1114842\"\n[4614] \"1114933\" \"1114942\" \"1114991\" \"1115076\" \"1115093\" \"1115096\" \"1115149\"\n[4621] \"1115156\" \"1115158\" \"1115178\" \"1115303\" \"1115416\" \"1115456\" \"1115542\"\n[4628] \"1115732\" \"1115738\" \"1115849\" \"1115895\" \"1115941\" \"1115953\" \"1115955\"\n[4635] \"1116249\" \"1116281\" \"1116285\" \"1116351\" \"1116380\" \"1116435\" \"1116436\"\n[4642] \"1116473\" \"1116479\" \"1116491\" \"1116545\" \"1116907\" \"1116973\" \"1116990\"\n[4649] \"1116991\" \"1116992\" \"1117047\" \"1117183\" \"1117256\" \"1117343\" \"1117384\"\n[4656] \"1117464\" \"1117466\" \"1117471\" \"1117476\" \"1117639\" \"1117674\" \"1117831\"\n[4663] \"1117874\" \"1117951\" \"1117990\" \"1117996\" \"1118119\" \"1118231\" \"1118307\"\n[4670] \"1118310\" \"1118311\" \"1118579\" \"1118695\" \"1118711\" \"1118774\" \"1118839\"\n[4677] \"1118840\" \"1118894\" \"1118917\" \"1118931\" \"1118932\" \"1119045\" \"1119292\"\n[4684] \"1119512\" \"1119530\" \"1119567\" \"1119596\" \"1119641\" \"1119911\" \"1120071\"\n[4691] \"1120075\" \"1120141\" \"1120157\" \"1120167\" \"1120273\" \"1120280\" \"1120321\"\n[4698] \"1120367\" \"1120434\" \"1120544\" \"1120796\" \"1120876\" \"1120964\" \"1121096\"\n[4705] \"1121192\" \"1121228\" \"1121252\" \"1121383\" \"1121454\" \"1121483\" \"1121506\"\n[4712] \"1121527\" \"1121550\" \"1121818\" \"1121890\" \"1121925\" \"1121940\" \"1122042\"\n[4719] \"1122082\" \"1122146\" \"1122217\" \"1122363\" \"1122379\" \"1122401\" \"1122463\"\n[4726] \"1122508\" \"1122625\" \"1122673\" \"1122773\" \"1123059\" \"1123157\" \"1123317\"\n[4733] \"1123324\" \"1123430\" \"1123439\" \"1123507\" \"1123843\" \"1123897\" \"1123943\"\n[4740] \"1123993\" \"1124012\" \"1124095\" \"1124125\" \"1124284\" \"1124290\" \"1124419\"\n[4747] \"1124443\" \"1124590\" \"1124608\" \"1124611\" \"1124726\" \"1124814\" \"1125002\"\n[4754] \"1125015\" \"1125021\" \"1125121\" \"1125305\" \"1125316\" \"1125323\" \"1125369\"\n[4761] \"1125372\" \"1125394\" \"1125455\" \"1125480\" \"1125484\" \"1125561\" \"1125905\"\n[4768] \"1125968\" \"1126065\" \"1126097\" \"1126119\" \"1126141\" \"1126416\" \"1126451\"\n[4775] \"1126475\" \"1126555\" \"1126563\" \"1126564\" \"1126567\" \"1126588\" \"1126647\"\n[4782] \"1126762\" \"1126923\" \"1126977\" \"1126995\" \"1127017\" \"1127018\" \"1127020\"\n[4789] \"1127036\" \"1127095\" \"1127107\" \"1127133\" \"1127469\" \"1127479\" \"1127485\"\n[4796] \"1127537\" \"1127580\" \"1127596\" \"1127677\" \"1127734\" \"1127968\" \"1128117\"\n[4803] \"1128251\" \"1128253\" \"1128265\" \"1128465\" \"1128493\" \"1128679\" \"1128740\"\n[4810] \"1128761\" \"1128840\" \"1128961\" \"1129023\" \"1129172\" \"1129213\" \"1129455\"\n[4817] \"1129477\" \"1129511\" \"1129663\" \"1129665\" \"1129719\" \"1129762\" \"1129814\"\n[4824] \"1129873\" \"1129903\" \"1129915\" \"1129946\" \"1129998\" \"1130007\" \"1130128\"\n[4831] \"1130359\" \"1130537\" \"1130902\" \"1130944\" \"1130972\" \"1131125\" \"1131197\"\n[4838] \"1131228\" \"1131324\" \"1131412\" \"1131413\" \"1131501\" \"1131568\" \"1131625\"\n[4845] \"1131665\" \"1131821\" \"1132139\" \"1132248\" \"1132306\" \"1132400\" \"1132443\"\n[4852] \"1132511\" \"1132537\" \"1132579\" \"1132736\" \"1132767\" \"1133071\" \"1133203\"\n[4859] \"1133226\" \"1133538\" \"1133562\" \"1133718\" \"1133784\" \"1133794\" \"1133907\"\n[4866] \"1133940\" \"1133943\" \"1133953\" \"1133954\" \"1133961\" \"1133969\" \"1134067\"\n[4873] \"1134279\" \"1134312\" \"1134435\" \"1134459\" \"1134539\" \"1134552\" \"1134562\"\n[4880] \"1134581\" \"1134765\" \"1134916\" \"1134989\" \"1135051\" \"1135107\" \"1135222\"\n[4887] \"1135301\" \"1135477\" \"1135595\" \"1135648\" \"1135750\" \"1135794\" \"1135899\"\n[4894] \"1135908\" \"1135976\" \"1136110\" \"1136193\" \"1136298\" \"1136376\" \"1136459\"\n[4901] \"1136609\" \"1136676\" \"1136763\" \"1136805\" \"1136821\" \"1137007\" \"1137161\"\n[4908] \"1137303\" \"1137332\" \"1137619\" \"1137713\" \"1137745\" \"1137879\" \"1137947\"\n[4915] \"1138144\" \"1138277\" \"1138353\" \"1138762\" \"1138801\" \"1139026\" \"1139060\"\n[4922] \"1139196\" \"1139327\" \"1139328\" \"1139454\" \"1139589\" \"1139594\" \"1139650\"\n[4929] \"1139817\" \"1139844\" \"1140181\" \"1140182\" \"1140189\" \"1140285\" \"1140291\"\n[4936] \"1140326\" \"1140380\" \"1140602\" \"1140619\" \"1140621\" \"1140711\" \"1140735\"\n[4943] \"1140855\" \"1141002\" \"1141105\" \"1141129\" \"1141492\" \"1141521\" \"1141536\"\n[4950] \"1141572\" \"1141705\" \"1141707\" \"1141756\" \"1141768\" \"1141858\" \"1141883\"\n[4957] \"1141921\" \"1141990\" \"1142033\" \"1142157\" \"1142225\" \"1142251\" \"1142252\"\n[4964] \"1142337\" \"1142347\" \"1142352\" \"1142421\" \"1142456\" \"1142473\" \"1142560\"\n[4971] \"1142561\" \"1142562\" \"1142664\" \"1142722\" \"1142735\" \"1142886\" \"1142906\"\n[4978] \"1143012\" \"1143141\" \"1143249\" \"1143497\" \"1143520\" \"1143718\" \"1143789\"\n[4985] \"1143827\" \"1143828\" \"1143934\" \"1144097\" \"1144324\" \"1144353\" \"1144354\"\n[4992] \"1144517\" \"1144613\" \"1144625\" \"1144871\" \"1144880\" \"1144884\" \"1144902\"\n[4999] \"1144932\" \"1145177\" \"1145182\" \"1145220\" \"1145241\" \"1145363\" \"1145413\"\n[5006] \"1145448\" \"1145449\" \"1145457\" \"1145502\" \"1145611\" \"1145622\" \"1145656\"\n[5013] \"1146028\" \"1146043\" \"1146058\" \"1146067\" \"1146148\" \"1146329\" \"1146487\"\n[5020] \"1146568\" \"1146676\" \"1146757\" \"1146862\" \"1146938\" \"1146941\" \"1147029\"\n[5027] \"1147069\" \"1147235\" \"1147277\" \"1147311\" \"1147397\" \"1147408\" \"1147636\"\n[5034] \"1147662\" \"1147811\" \"1147898\" \"1148097\" \"1148135\" \"1148213\" \"1148288\"\n[5041] \"1148344\" \"1148372\" \"1148377\" \"1148466\" \"1148535\" \"1148607\" \"1148728\"\n[5048] \"1148946\" \"1149296\" \"1149318\" \"1149326\" \"1149360\" \"1149372\" \"1149384\"\n[5055] \"1149497\" \"1149501\" \"1149528\" \"1149611\" \"1149710\" \"1149972\" \"1150087\"\n[5062] \"1150114\" \"1150204\" \"1150205\" \"1150238\" \"1150264\" \"1150289\" \"1150293\"\n[5069] \"1150296\" \"1150297\" \"1150308\" \"1150313\" \"1150320\" \"1150328\" \"1150407\"\n[5076] \"1150431\" \"1150443\" \"1150566\" \"1150776\" \"1150925\" \"1150928\" \"1151226\"\n[5083] \"1151297\" \"1151300\" \"1151414\" \"1151538\" \"1151572\" \"1151594\" \"1151615\"\n[5090] \"1151784\" \"1151797\" \"1151821\" \"1151922\" \"1151966\" \"1152163\" \"1152454\"\n[5097] \"1152490\" \"1152669\" \"1152695\" \"1152925\" \"1152963\" \"1153282\" \"1153305\"\n[5104] \"1153311\" \"1153503\" \"1153675\" \"1153695\" \"1153713\" \"1153853\" \"1154098\"\n[5111] \"1154300\" \"1154321\" \"1154347\" \"1154378\" \"1154698\" \"1155184\" \"1155250\"\n[5118] \"1155461\" \"1155473\" \"1155486\" \"1155560\" \"1155561\" \"1155562\" \"1155567\"\n[5125] \"1155616\" \"1155628\" \"1155641\" \"1155642\" \"1155712\" \"1155929\" \"1156236\"\n[5132] \"1156463\" \"1157038\" \"1157182\" \"1157293\" \"1157338\" \"1157339\" \"1157391\"\n[5139] \"1157431\" \"1157612\" \"1157641\" \"1157677\" \"1158033\" \"1158064\" \"1158105\"\n[5146] \"1158125\" \"1158161\" \"1158314\" \"1158360\" \"1158586\" \"1158600\" \"1158689\"\n[5153] \"1158789\" \"1159028\" \"1159267\" \"1159268\" \"1159452\" \"1159494\" \"1160213\"\n[5160] \"1160227\" \"1160347\" \"1160473\" \"1160662\" \"1160767\" \"1160769\" \"1160782\"\n[5167] \"1161447\" \"1162227\" \"1162228\" \"1162595\" \"1162709\" \"1162792\" \"1162851\"\n[5174] \"1163444\" \"1163671\" \"1164445\" \"1165048\" \"1165253\" \"1165447\" \"1165731\"\n[5181] \"1165842\" \"1165885\" \"1165888\" \"1165939\" \"1166028\" \"1166219\" \"1166432\"\n[5188] \"1166481\" \"1167028\" \"1167160\" \"1167239\" \"1167359\" \"1167425\" \"1167667\"\n[5195] \"1167761\" \"1167802\" \"1167811\" \"1168261\" \"1168263\" \"1168272\" \"1168363\"\n[5202] \"1168396\" \"1168503\" \"1169047\" \"1169065\" \"1169459\" \"1169476\" \"1169486\"\n[5209] \"1169986\" \"1170039\" \"1170493\" \"1170509\" \"1170610\" \"1170673\" \"1170932\"\n[5216] \"1171013\" \"1171240\" \"1171483\" \"1171707\" \"1171708\" \"1171915\" \"1171999\"\n[5223] \"1172012\" \"1172665\" \"1172948\" \"1173016\" \"1173057\" \"1173165\" \"1173373\"\n[5230] \"1174412\" \"1174465\" \"1174831\" \"1174900\" \"1175737\" \"1175908\" \"1176086\"\n[5237] \"1176325\" \"1176759\" \"1176793\" \"1176889\" \"1176892\" \"1176894\" \"1177430\"\n[5244] \"1177536\" \"1177629\" \"1177980\" \"1177986\" \"1177990\" \"1178318\" \"1178382\"\n[5251] \"1178677\" \"1178753\" \"1178834\" \"1178928\" \"1178983\" \"1179015\" \"1179059\"\n[5258] \"1179131\" \"1179141\" \"1179435\" \"1179618\" \"1180372\" \"1180649\" \"1180820\"\n[5265] \"1180866\" \"1180969\" \"1180991\" \"1181175\" \"1181280\" \"1181447\" \"1181596\"\n[5272] \"1181724\" \"1181935\" \"1182017\" \"1182038\" \"1182047\" \"1182050\" \"1182053\"\n[5279] \"1182119\" \"1182179\" \"1182279\" \"1182281\" \"1182285\" \"1182521\" \"1183018\"\n[5286] \"1183093\" \"1183153\" \"1183299\" \"1183323\" \"1183781\" \"1183784\" \"1183872\"\n[5293] \"1184107\" \"1184497\" \"1184545\" \"1184597\" \"1184859\" \"1184997\" \"1185425\"\n[5300] \"1185437\" \"1185439\" \"1185537\" \"1185624\" \"1185829\" \"1186019\" \"1186135\"\n[5307] \"1186746\" \"1187044\" \"1187224\" \"1187231\" \"1187989\" \"1188075\" \"1188239\"\n[5314] \"1188266\" \"1188407\" \"1188414\" \"1188635\" \"1189414\" \"1189544\" \"1190449\"\n[5321] \"1190450\" \"1190681\" \"1190901\" \"1191531\" \"1191625\" \"1192047\" \"1192149\"\n[5328] \"1192307\" \"1192531\" \"1192754\" \"1192798\" \"1193048\" \"1193083\" \"1193252\"\n[5335] \"1193551\" \"1194258\" \"1194278\" \"1194361\" \"1194838\" \"1195247\" \"1195377\"\n[5342] \"1195710\" \"1195715\" \"1195836\" \"1195933\" \"1196014\" \"1196118\" \"1196315\"\n[5349] \"1197086\" \"1198062\" \"1198068\" \"1198173\" \"1198892\" \"1199050\" \"1199121\"\n[5356] \"1199957\" \"1200086\" \"1200637\" \"1202066\" \"1205921\" \"1205925\" \"1206441\"\n[5363] \"1207192\" \"1208782\" \"1208801\" \"1209038\" \"1209307\" \"1210373\" \"1210387\"\n[5370] \"1210400\" \"1210751\" \"1210873\" \"1211075\" \"1211507\" \"1211513\" \"1211883\"\n[5377] \"1211884\" \"1212327\" \"1213302\" \"1214585\" \"1215951\" \"1217337\" \"1217345\"\n[5384] \"1217349\" \"1217920\" \"1218158\" \"1218525\" \"1218643\" \"1218649\" \"1219806\"\n[5391] \"1219894\" \"1219898\" \"1220537\" \"1220793\" \"1221490\" \"1221895\" \"1222148\"\n[5398] \"1222247\" \"1222328\" \"1222512\" \"1222633\" \"1222690\" \"1222845\" \"1222846\"\n[5405] \"1223051\" \"1223607\" \"1223629\" \"1223763\" \"1224675\" \"1225015\" \"1225209\"\n[5412] \"1225336\" \"1225391\" \"1225608\" \"1225650\" \"1225725\" \"1225931\" \"1225977\"\n[5419] \"1226094\" \"1226178\" \"1226191\" \"1226271\" \"1226354\" \"1226577\" \"1226621\"\n[5426] \"1226707\" \"1226961\" \"1227210\" \"1227591\" \"1227851\" \"1227877\" \"1227880\"\n[5433] \"1227893\" \"1227915\" \"1227933\" \"1228111\" \"1228293\" \"1228457\" \"1228729\"\n[5440] \"1228739\" \"1228849\" \"1228985\" \"1229194\" \"1229683\" \"1230074\" \"1230714\"\n[5447] \"1231579\" \"1231689\" \"1232085\" \"1232591\" \"1232921\" \"1233183\" \"1233191\"\n[5454] \"1233607\" \"1233773\" \"1233851\" \"1234749\" \"1235803\" \"1235818\" \"1235923\"\n[5461] \"1235924\" \"1235955\" \"1236028\" \"1236037\" \"1236452\" \"1236623\" \"1237197\"\n[5468] \"1237318\" \"1237798\" \"1237924\" \"1238171\" \"1238580\" \"1239732\" \"1239790\"\n[5475] \"1239946\" \"1240440\" \"1240557\" \"1240558\" \"1240773\" \"1242039\" \"1242818\"\n[5482] \"1243367\" \"1243911\" \"1246425\" \"1250541\" \"1251187\" \"1251697\" \"1251949\"\n[5489] \"1252119\" \"1252303\" \"1252394\" \"1254296\" \"1254319\" \"1254956\" \"1255101\"\n[5496] \"1255609\" \"1256642\" \"1257419\" \"1258455\" \"1259107\" \"1259245\" \"1260587\"\n[5503] \"1261042\" \"1262074\" \"1262675\" \"1262945\" \"1263068\" \"1263095\" \"1264697\"\n[5510] \"1264711\" \"1265323\" \"1265399\" \"1265608\" \"1265755\" \"1266051\" \"1266459\"\n[5517] \"1266683\" \"1267561\" \"1267605\" \"1267609\" \"1267883\" \"1268175\" \"1268709\"\n[5524] \"1268735\" \"1268763\" \"1268777\" \"1268885\" \"1269250\" \"1269433\" \"1269559\"\n[5531] \"1269587\" \"1269601\" \"1269639\" \"1269655\" \"1269727\" \"1269825\" \"1269879\"\n[5538] \"1269895\" \"1269955\" \"1270019\" \"1270229\" \"1270237\" \"1270369\" \"1270511\"\n[5545] \"1270535\" \"1270851\" \"1271133\" \"1271235\" \"1271323\" \"1271409\" \"1271421\"\n[5552] \"1271489\" \"1271545\" \"1271615\" \"1271635\" \"1271777\" \"1271779\" \"1271905\"\n[5559] \"1272051\" \"1272215\" \"1272219\" \"1272221\" \"1272229\" \"1272241\" \"1272319\"\n[5566] \"1272349\" \"1272451\" \"1272473\" \"1272619\" \"1272627\" \"1272697\" \"1272929\"\n[5573] \"1273277\" \"1273371\" \"1273383\" \"1273447\" \"1273571\" \"1273881\" \"1274059\"\n[5580] \"1274131\" \"1274143\" \"1274223\" \"1274355\" \"1274401\" \"1274639\" \"1274709\"\n[5587] \"1274823\" \"1274901\" \"1274904\" \"1274907\" \"1274937\" \"1275323\" \"1275383\"\n[5594] \"1275409\" \"1275539\" \"1275569\" \"1275591\" \"1275615\" \"1275717\" \"1275881\"\n[5601] \"1275921\" \"1275973\" \"1276031\" \"1276043\" \"1276063\" \"1276199\" \"1276417\"\n[5608] \"1276585\" \"1276645\" \"1276723\" \"1276819\" \"1277039\" \"1277087\" \"1277377\"\n[5615] \"1277477\" \"1277517\" \"1277655\" \"1277881\" \"1277897\" \"1278251\" \"1278349\"\n[5622] \"1278555\" \"1278583\" \"1278655\" \"1278706\" \"1278811\" \"1279107\" \"1279135\"\n[5629] \"1279137\" \"1279331\" \"1279335\" \"1279423\" \"1279521\" \"1279603\" \"1279613\"\n[5636] \"1279629\" \"1279637\" \"1279653\" \"1279709\" \"1279723\" \"1279745\" \"1279799\"\n[5643] \"1279907\" \"1279979\" \"1280051\" \"1280053\" \"1280061\" \"1280177\" \"1280247\"\n[5650] \"1280291\" \"1280351\" \"1280563\" \"1280575\" \"1280577\" \"1280589\" \"1280653\"\n[5657] \"1280701\" \"1280829\" \"1280835\" \"1280847\" \"1281007\" \"1281151\" \"1281211\"\n[5664] \"1281225\" \"1281229\" \"1281302\" \"1281351\" \"1281405\" \"1281561\" \"1281578\"\n[5671] \"1281607\" \"1281919\" \"1281929\" \"1281941\" \"1282025\" \"1282091\" \"1282119\"\n[5678] \"1282195\" \"1282331\" \"1282379\" \"1282447\" \"1282475\" \"1282497\" \"1282727\"\n[5685] \"1282895\" \"1282947\" \"1283051\" \"1283097\" \"1283149\" \"1283205\" \"1283225\"\n[5692] \"1283259\" \"1283289\" \"1283441\" \"1283447\" \"1283467\" \"1283485\" \"1283505\"\n[5699] \"1283513\" \"1283529\" \"1283533\" \"1283535\" \"1283559\" \"1283565\" \"1283595\"\n[5706] \"1283609\" \"1283641\" \"1283651\" \"1283657\" \"1283661\" \"1283665\" \"1283671\"\n[5713] \"1283687\" \"1283689\" \"1283715\" \"1283745\" \"1283757\" \"1283801\" \"1283805\"\n[5720] \"1283819\" \"1283867\" \"1283997\" \"1284213\" \"1284255\" \"1284499\" \"1284523\"\n[5727] \"1284709\" \"1284719\" \"1284721\" \"1285091\" \"1285139\" \"1285187\" \"1285287\"\n[5734] \"1285295\" \"1285347\" \"1285853\" \"1285899\" \"1285925\" \"1285939\" \"1285979\"\n[5741] \"1286017\" \"1286033\" \"1286283\" \"1286285\" \"1286385\" \"1286389\" \"1286403\"\n[5748] \"1286733\" \"1286821\" \"1286847\" \"1286871\" \"1286935\" \"1287085\" \"1287097\"\n[5755] \"1287133\" \"1287147\" \"1287153\" \"1287303\" \"1287323\" \"1287341\" \"1287363\"\n[5762] \"1287445\" \"1287453\" \"1287499\" \"1287505\" \"1287509\" \"1287535\" \"1287539\"\n[5769] \"1287651\" \"1287655\" \"1287659\" \"1287681\" \"1287727\" \"1287909\" \"1287919\"\n[5776] \"1287965\" \"1288177\" \"1288321\" \"1288463\" \"1288483\" \"1288487\" \"1288621\"\n[5783] \"1288633\" \"1288637\" \"1288705\" \"1288707\" \"1288715\" \"1288755\" \"1288765\"\n[5790] \"1288775\" \"1288779\" \"1288783\" \"1288849\" \"1288859\" \"1288933\" \"1288941\"\n[5797] \"1289059\" \"1289065\" \"1289149\" \"1289159\" \"1289219\" \"1289223\" \"1289293\"\n[5804] \"1289423\" \"1289557\" \"1289561\" \"1289615\" \"1289617\" \"1289699\" \"1289725\"\n[5811] \"1289789\" \"1289823\" \"1289847\" \"1289859\" \"1289997\" \"1290011\" \"1290013\"\n[5818] \"1290021\" \"1290027\" \"1290031\" \"1290073\" \"1290085\" \"1290105\" \"1290133\"\n[5825] \"1290203\" \"1290259\" \"1290287\" \"1290293\" \"1290311\" \"1290321\" \"1290329\"\n[5832] \"1290349\" \"1290523\" \"1290537\" \"1290553\" \"1290589\" \"1290593\" \"1290605\"\n[5839] \"1290639\" \"1290649\" \"1290669\" \"1290765\" \"1290813\" \"1290819\" \"1290861\"\n[5846] \"1290863\" \"1290927\" \"1291033\" \"1291039\" \"1291111\" \"1291113\" \"1291155\"\n[5853] \"1291255\" \"1291293\" \"1291395\" \"1291405\" \"1291519\" \"1291645\" \"1291663\"\n[5860] \"1291665\" \"1291673\" \"1291697\" \"1291719\" \"1291735\" \"1291745\" \"1291799\"\n[5867] \"1291837\" \"1291839\" \"1291935\" \"1292009\" \"1292051\" \"1292059\" \"1292097\"\n[5874] \"1292099\" \"1292107\" \"1292177\" \"1292201\" \"1292233\" \"1292315\" \"1292325\"\n[5881] \"1292353\" \"1292371\" \"1292397\" \"1292501\" \"1292587\" \"1292705\" \"1292755\"\n[5888] \"1292773\" \"1292895\" \"1292917\" \"1292965\" \"1293079\" \"1293109\" \"1293177\"\n[5895] \"1293205\" \"1293267\" \"1293269\" \"1293271\" \"1293275\" \"1293359\" \"1293387\"\n[5902] \"1293689\" \"1293773\" \"1293855\" \"1293871\" \"1293949\" \"1294025\" \"1294033\"\n[5909] \"1294067\" \"1294096\" \"1294113\" \"1294145\" \"1294149\" \"1294171\" \"1294275\"\n[5916] \"1294317\" \"1294395\" \"1294407\" \"1294455\" \"1294555\" \"1294601\" \"1294653\"\n[5923] \"1294771\" \"1294789\" \"1294887\" \"1294987\" \"1294989\" \"1295033\" \"1295185\"\n[5930] \"1295289\" \"1295339\" \"1295381\" \"1295401\" \"1295409\" \"1295485\" \"1295533\"\n[5937] \"1295537\" \"1295567\" \"1295609\" \"1295615\" \"1295671\" \"1295683\" \"1295791\"\n[5944] \"1295997\" \"1296013\" \"1296039\" \"1296075\" \"1296223\" \"1296224\" \"1296268\"\n[5951] \"1296270\" \"1296271\" \"1296272\" \"1296335\" \"1296394\" \"1296413\" \"1296414\"\n[5958] \"1296418\" \"1296430\" \"1296456\" \"1296458\" \"1296460\" \"1296472\" \"1296474\"\n[5965] \"1296516\" \"1296517\" \"1296527\" \"1296528\" \"1296604\" \"1296708\" \"1296821\"\n[5972] \"1296831\" \"1296839\" \"1296840\" \"1296849\" \"1296855\" \"1296856\" \"1296977\"\n[5979] \"1297009\" \"1297029\" \"1297044\" \"1297085\" \"1297093\" \"1297098\" \"1297131\"\n[5986] \"1297154\" \"1297157\" \"1297160\" \"1297161\" \"1297367\" \"1297399\" \"1297437\"\n[5993] \"1297438\" \"1297439\" \"1297463\" \"1297495\" \"1297496\" \"1297525\" \"1297573\"\n[6000] \"1297574\" \"1297575\" \"1297589\" \"1297615\" \"1297703\" \"1297730\" \"1297744\"\n[6007] \"1297745\" \"1297767\" \"1297776\" \"1297786\" \"1297809\" \"1297835\" \"1297878\"\n[6014] \"1297895\" \"1297940\" \"1297957\" \"1297964\" \"1297997\" \"1297998\" \"1298000\"\n[6021] \"1298008\" \"1298009\" \"1298011\" \"1298012\" \"1298024\" \"1298026\" \"1298063\"\n[6028] \"1298067\" \"1298079\" \"1298151\" \"1298154\" \"1298156\" \"1298165\" \"1298191\"\n[6035] \"1298249\" \"1298376\" \"1298377\" \"1298493\" \"1298501\" \"1298517\" \"1298518\"\n[6042] \"1298528\" \"1298551\" \"1298554\" \"1298599\" \"1298635\" \"1298637\" \"1298797\"\n[6049] \"1298800\" \"1298802\" \"1298895\" \"1298985\" \"1299090\" \"1299093\" \"1299094\"\n[6056] \"1299131\" \"1299161\" \"1299227\" \"1299332\" \"1299431\" \"1299432\" \"1299461\"\n[6063] \"1299471\" \"1299478\" \"1299492\" \"1299494\" \"1299498\" \"1299528\" \"1299543\"\n[6070] \"1299587\" \"1299627\" \"1299628\" \"1299629\" \"1299637\" \"1299775\" \"1299811\"\n[6077] \"1299829\" \"1299841\" \"1299842\" \"1299850\" \"1299907\" \"1299910\" \"1299934\"\n[6084] \"1299959\" \"1300067\" \"1300073\" \"1300128\" \"1300240\" \"1300261\" \"1300286\"\n[6091] \"1300309\" \"1300337\" \"1300361\" \"1300376\" \"1300501\" \"1300503\" \"1300519\"\n[6098] \"1300524\" \"1300597\" \"1300598\" \"1300608\" \"1300614\" \"1300664\" \"1300674\"\n[6105] \"1300677\" \"1300721\" \"1300729\" \"1300759\" \"1300762\" \"1300773\" \"1300778\"\n[6112] \"1300831\" \"1300845\" \"1300890\" \"1300908\" \"1300918\" \"1300947\" \"1300957\"\n[6119] \"1300987\" \"1301017\" \"1301038\" \"1301062\" \"1301063\" \"1301131\" \"1301133\"\n[6126] \"1301159\" \"1301303\" \"1301306\" \"1301420\" \"1301426\" \"1301449\" \"1301520\"\n[6133] \"1301606\" \"1301621\" \"1301688\" \"1301700\" \"1301707\" \"1301732\" \"1301755\"\n[6140] \"1301757\" \"1301768\" \"1301778\" \"1301798\" \"1301936\" \"1301937\" \"1301943\"\n[6147] \"1301944\" \"1302016\" \"1302017\" \"1302032\" \"1302091\" \"1302603\" \"1302631\"\n[6154] \"1302649\" \"1302737\" \"1302738\" \"1302739\" \"1302750\" \"1302846\" \"1302866\"\n[6161] \"1302883\" \"1302937\" \"1302940\" \"1302949\" \"1303027\" \"1303096\" \"1303111\"\n[6168] \"1303112\" \"1303191\" \"1303278\" \"1303279\" \"1303308\" \"1303312\" \"1303331\"\n[6175] \"1303333\" \"1303406\" \"1303433\" \"1303439\" \"1303440\" \"1303524\" \"1303539\"\n[6182] \"1303541\" \"1303585\" \"1303605\" \"1303637\" \"1303660\" \"1303746\" \"1303866\"\n[6189] \"1303877\" \"1303945\" \"1303948\" \"1304069\" \"1304121\" \"1304194\" \"1304305\"\n[6196] \"1304353\" \"1304379\" \"1304531\" \"1304551\" \"1304557\" \"1304575\" \"1304612\"\n[6203] \"1304786\" \"1304885\" \"1304961\" \"1305049\" \"1305081\" \"1305122\" \"1305133\"\n[6210] \"1305136\" \"1305209\" \"1305233\" \"1305251\" \"1305263\" \"1305397\" \"1305411\"\n[6217] \"1305438\" \"1305663\" \"1305815\" \"1305866\" \"1306094\" \"1306108\" \"1306109\"\n[6224] \"1306153\" \"1306261\" \"1306283\" \"1306328\" \"1306485\" \"1306511\" \"1306512\"\n[6231] \"1306515\" \"1306519\" \"1306523\" \"1306545\" \"1306572\" \"1306606\" \"1306670\"\n[6238] \"1306691\" \"1306708\" \"1306764\" \"1306773\" \"1306846\" \"1306910\" \"1306927\"\n[6245] \"1306972\" \"1307184\" \"1307185\" \"1307189\" \"1307246\" \"1307249\" \"1307267\"\n[6252] \"1307328\" \"1307399\" \"1307437\" \"1307595\" \"1307641\" \"1307677\" \"1307682\"\n[6259] \"1307706\" \"1307710\" \"1307715\" \"1307729\" \"1307760\" \"1307905\" \"1307960\"\n[6266] \"1307965\" \"1308037\" \"1308093\" \"1308113\" \"1308158\" \"1308243\" \"1308289\"\n[6273] \"1308292\" \"1308445\" \"1308480\" \"1308577\" \"1308585\" \"1308625\" \"1308660\"\n[6280] \"1308735\" \"1308812\" \"1308820\" \"1309000\" \"1309021\" \"1309176\" \"1309266\"\n[6287] \"1309435\" \"1309436\" \"1309469\" \"1309472\" \"1309497\" \"1309498\" \"1309652\"\n[6294] \"1309821\" \"1309822\" \"1309823\" \"1309959\" \"1310045\" \"1310142\" \"1310229\"\n[6301] \"1310238\" \"1310245\" \"1310342\" \"1310397\" \"1310460\" \"1310523\" \"1310548\"\n[6308] \"1310556\" \"1310565\" \"1310641\" \"1310840\" \"1310856\" \"1310919\" \"1310920\"\n[6315] \"1311025\" \"1311031\" \"1311141\" \"1311179\" \"1311248\" \"1311302\" \"1311349\"\n[6322] \"1311350\" \"1311401\" \"1311551\" \"1311565\" \"1311625\" \"1311747\" \"1311765\"\n[6329] \"1311776\" \"1311799\" \"1311806\" \"1311921\" \"1312003\" \"1312031\" \"1312148\"\n[6336] \"1312194\" \"1312246\" \"1312291\" \"1312473\" \"1312486\" \"1312531\" \"1312684\"\n[6343] \"1312735\" \"1312839\" \"1312853\" \"1312858\" \"1312895\" \"1312915\" \"1312936\"\n[6350] \"1312981\" \"1313446\" \"1313479\" \"1313631\" \"1313666\" \"1313750\" \"1313911\"\n[6357] \"1313921\" \"1313985\" \"1314019\" \"1314151\" \"1314152\" \"1314157\" \"1314158\"\n[6364] \"1314175\" \"1314439\" \"1314570\" \"1314783\" \"1314882\" \"1315149\" \"1315363\"\n[6371] \"1315581\" \"1315599\" \"1315683\" \"1315687\" \"1315853\" \"1315856\" \"1315929\"\n[6378] \"1316256\" \"1316300\" \"1316431\" \"1316604\" \"1316617\" \"1316618\" \"1316660\"\n[6385] \"1316763\" \"1316765\" \"1316839\" \"1316937\" \"1316997\" \"1317024\" \"1317066\"\n[6392] \"1317277\" \"1317314\" \"1317414\" \"1317485\" \"1317521\" \"1317677\" \"1317763\"\n[6399] \"1317812\" \"1317876\" \"1317899\" \"1317910\" \"1317925\" \"1317932\" \"1318156\"\n[6406] \"1318292\" \"1318347\" \"1318349\" \"1318351\" \"1318475\" \"1318567\" \"1318611\"\n[6413] \"1318705\" \"1318861\" \"1318901\" \"1318932\" \"1318933\" \"1318935\" \"1318937\"\n[6420] \"1319207\" \"1319326\" \"1319329\" \"1319356\" \"1319517\" \"1319524\" \"1319556\"\n[6427] \"1319609\" \"1319610\" \"1319613\" \"1319633\" \"1319636\" \"1319753\" \"1319765\"\n[6434] \"1319919\" \"1319963\" \"1319974\" \"1320205\" \"1320258\" \"1320276\" \"1320323\"\n[6441] \"1320357\" \"1320392\" \"1320401\" \"1320439\" \"1320459\" \"1320631\" \"1320633\"\n[6448] \"1320660\" \"1320661\" \"1320769\" \"1320966\" \"1321029\" \"1321030\" \"1321033\"\n[6455] \"1321044\" \"1321104\" \"1321363\" \"1321529\" \"1321580\" \"1321646\" \"1321738\"\n[6462] \"1322043\" \"1322044\" \"1322085\" \"1322143\" \"1322179\" \"1322301\" \"1322302\"\n[6469] \"1322345\" \"1322359\" \"1322365\" \"1322373\" \"1322565\" \"1322725\" \"1322735\"\n[6476] \"1322798\" \"1322832\" \"1323121\" \"1323124\" \"1323202\" \"1323319\" \"1323436\"\n[6483] \"1323677\" \"1323770\" \"1323805\" \"1323850\" \"1324002\" \"1324085\" \"1324140\"\n[6490] \"1324465\" \"1324470\" \"1324574\" \"1324648\" \"1324911\" \"1325088\" \"1325259\"\n[6497] \"1325263\" \"1325293\" \"1325349\" \"1325359\" \"1325361\" \"1325391\" \"1325663\"\n[6504] \"1325815\" \"1325829\" \"1325883\" \"1325975\" \"1326143\" \"1326284\" \"1326290\"\n[6511] \"1326309\" \"1326315\" \"1326601\" \"1326603\" \"1326663\" \"1326931\" \"1326992\"\n[6518] \"1327126\" \"1327187\" \"1327295\" \"1327321\" \"1327376\" \"1327614\" \"1327730\"\n[6525] \"1327852\" \"1327949\" \"1328140\" \"1328156\" \"1328157\" \"1328158\" \"1328166\"\n[6532] \"1328184\" \"1328220\" \"1328237\" \"1328241\" \"1328263\" \"1328265\" \"1328362\"\n[6539] \"1328485\" \"1328511\" \"1328515\" \"1328516\" \"1328780\" \"1328859\" \"1328873\"\n[6546] \"1329011\" \"1329031\" \"1329359\" \"1329477\" \"1329808\" \"1329852\" \"1329912\"\n[6553] \"1329946\" \"1329995\" \"1330004\" \"1330118\" \"1330119\" \"1330363\" \"1330380\"\n[6560] \"1330553\" \"1330608\" \"1330709\" \"1330740\" \"1331011\" \"1331483\" \"1331853\"\n[6567] \"1331878\" \"1332049\" \"1332062\" \"1332121\" \"1332476\" \"1332580\" \"1332601\"\n[6574] \"1333345\" \"1333795\" \"1334130\" \"1334320\" \"1334417\" \"1334419\" \"1334424\"\n[6581] \"1334433\" \"1334476\" \"1334479\" \"1334594\" \"1335027\" \"1335338\" \"1335374\"\n[6588] \"1335385\" \"1335584\" \"1335706\" \"1335738\" \"1335922\" \"1335965\" \"1335966\"\n[6595] \"1336029\" \"1336040\" \"1336180\" \"1336325\" \"1336569\" \"1336714\" \"1336913\"\n[6602] \"1336919\" \"1337132\" \"1337611\" \"1337627\" \"1337735\" \"1337827\" \"1338328\"\n[6609] \"1338360\" \"1338553\" \"1338647\" \"1338809\" \"1338817\" \"1339164\" \"1339504\"\n[6616] \"1339538\" \"1339746\" \"1339908\" \"1339924\" \"1340343\" \"1340760\" \"1341725\"\n[6623] \"1341817\" \"1342272\" \"1342309\" \"1342313\" \"1342344\" \"1342465\" \"1342491\"\n[6630] \"1342663\" \"1342876\" \"1343282\" \"1343488\" \"1343674\" \"1343935\" \"1343936\"\n[6637] \"1343938\" \"1344220\" \"1344809\" \"1344936\" \"1345376\" \"1345545\" \"1345546\"\n[6644] \"1345726\" \"1345983\" \"1345993\" \"1345994\" \"1346187\" \"1347500\" \"1348216\"\n[6651] \"1348609\" \"1349132\" \"1349261\" \"1349309\" \"1349342\" \"1349409\" \"1350017\"\n[6658] \"1350046\" \"1350127\" \"1350465\" \"1350606\" \"1351290\" \"1351566\" \"1353018\"\n[6665] \"1353047\" \"1353319\" \"1353408\" \"1353598\" \"1353682\" \"1353751\" \"1353995\"\n[6672] \"1354011\" \"1354111\" \"1355428\" \"1355503\" \"1355724\" \"1355779\" \"1356308\"\n[6679] \"1356536\" \"1356542\" \"1357073\" \"1357143\" \"1357165\" \"1357243\" \"1357245\"\n[6686] \"1359505\" \"1359555\" \"1359642\" \"1359821\" \"1359955\" \"1359983\" \"1360275\"\n[6693] \"1360443\" \"1360568\" \"1361199\" \"1361559\" \"1362335\" \"1362591\" \"1362609\"\n[6700] \"1363288\" \"1363452\" \"1363597\" \"1364637\" \"1364681\" \"1365399\" \"1365406\"\n[6707] \"1365536\" \"1365904\" \"1366916\" \"1367259\" \"1367373\" \"1368427\" \"1368437\"\n[6714] \"1368713\" \"1368714\" \"1368827\" \"1368878\" \"1368899\" \"1369135\" \"1369945\"\n[6721] \"1370081\" \"1371034\" \"1371621\" \"1371622\" \"1372033\" \"1372670\" \"1373314\"\n[6728] \"1373662\" \"1373688\" \"1374139\" \"1374987\" \"1375645\" \"1376489\" \"1376619\"\n[6735] \"1377829\" \"1378900\" \"1379078\" \"1380319\" \"1380517\" \"1380706\" \"1380985\"\n[6742] \"1382035\" \"1382254\" \"1382423\" \"1382599\" \"1384885\" \"1385200\" \"1385829\"\n[6749] \"1385905\" \"1386443\" \"1387769\" \"1387867\" \"1388151\" \"1388373\" \"1389915\"\n[6756] \"1390048\" \"1390053\" \"1390692\" \"1390837\" \"1392524\" \"1393479\" \"1394147\"\n[6763] \"1394259\" \"1394279\" \"1394297\" \"1394770\" \"1396340\" \"1398485\" \"1399626\"\n[6770] \"1399627\" \"1399663\" \"1399664\" \"1399805\" \"1400612\" \"1401599\" \"1401867\"\n[6777] \"1402179\" \"1405170\" \"1405890\" \"1406207\" \"1406247\" \"1406260\" \"1406430\"\n[6784] \"1406433\" \"1406448\" \"1406509\" \"1406611\" \"1406951\" \"1408405\" \"1408465\"\n[6791] \"1409040\" \"1409174\" \"1409198\" \"1409222\" \"1409239\" \"1409322\" \"1409351\"\n[6798] \"1409421\" \"1409561\" \"1409581\" \"1409609\" \"1409769\" \"1410138\" \"1410245\"\n[6805] \"1410453\" \"1410603\" \"1410831\" \"1410957\" \"1411021\" \"1411493\" \"1411649\"\n[6812] \"1411863\" \"1411919\" \"1411961\" \"1411965\" \"1412071\" \"1412079\" \"1412297\"\n[6819] \"1412515\" \"1412568\" \"1412799\" \"1412921\" \"1412951\" \"1412980\" \"1413209\"\n[6826] \"1413233\" \"1413239\" \"1413269\" \"1413275\" \"1413277\" \"1413291\" \"1413297\"\n[6833] \"1413339\" \"1413399\" \"1413419\" \"1413452\" \"1413669\" \"1413767\" \"1413843\"\n[6840] \"1414061\" \"1414275\" \"1414348\" \"1414529\" \"1414752\" \"1414813\" \"1414843\"\n[6847] \"1414977\" \"1415097\" \"1415197\" \"1415571\" \"1415606\" \"1415713\" \"1415729\"\n[6854] \"1415777\" \"1415953\" \"1416191\" \"1416311\" \"1416439\" \"1416487\" \"1416655\"\n[6861] \"1416865\" \"1417291\" \"1417341\" \"1417387\" \"1417391\" \"1417431\" \"1417929\"\n[6868] \"1418199\" \"1418235\" \"1418247\" \"1418251\" \"1418259\" \"1418281\" \"1418383\"\n[6875] \"1418407\" \"1418487\" \"1418757\" \"1418769\" \"1418777\" \"1418789\" \"1418793\"\n[6882] \"1418799\" \"1418841\" \"1418843\" \"1418853\" \"1418935\" \"1418959\" \"1418975\"\n[6889] \"1419177\" \"1419401\" \"1419445\" \"1419453\" \"1419541\" \"1419561\" \"1419605\"\n[6896] \"1419717\" \"1419719\" \"1419727\" \"1419729\" \"1419743\" \"1419745\" \"1419773\"\n[6903] \"1419777\" \"1419801\" \"1419823\" \"1419837\" \"1419843\" \"1419879\" \"1419893\"\n[6910] \"1419959\" \"1420079\" \"1420123\" \"1420131\" \"1420193\" \"1420201\" \"1420293\"\n[6917] \"1420379\" \"1420541\" \"1420583\" \"1420631\" \"1420851\" \"1420913\" \"1420915\"\n[6924] \"1421117\" \"1421169\" \"1421213\" \"1421343\" \"1421383\" \"1421385\" \"1421421\"\n[6931] \"1421537\" \"1421639\" \"1421661\" \"1421679\" \"1421779\" \"1421781\" \"1421815\"\n[6938] \"1421882\" \"1421893\" \"1422003\" \"1422053\" \"1422153\" \"1422357\" \"1422393\"\n[6945] \"1422513\" \"1422523\" \"1422559\" \"1422749\" \"1423285\" \"1423465\" \"1423469\"\n[6952] \"1423471\" \"1423573\" \"1423593\" \"1423599\" \"1423623\" \"1423665\" \"1423695\"\n[6959] \"1423717\" \"1424019\" \"1424137\" \"1424185\" \"1424191\" \"1424217\" \"1424225\"\n[6966] \"1424545\" \"1424569\" \"1424669\" \"1424753\" \"1424763\" \"1424889\" \"1425123\"\n[6973] \"1425163\" \"1425213\" \"1425277\" \"1426333\" \"1426345\" \"1426385\" \"1426405\"\n[6980] \"1426487\" \"1426621\" \"1426681\" \"1426785\" \"1426799\" \"1426821\" \"1426855\"\n[6987] \"1426893\" \"1426921\" \"1426993\" \"1427091\" \"1427116\" \"1427252\" \"1427253\"\n[6994] \"1427275\" \"1427327\" \"1427389\" \"1427413\" \"1427449\" \"1427479\" \"1427506\"\n[7001] \"1427615\" \"1427635\" \"1427637\" \"1427867\" \"1427897\" \"1427983\" \"1428105\"\n[7008] \"1428155\" \"1428209\" \"1428283\" \"1428307\" \"1428321\" \"1428341\" \"1428353\"\n[7015] \"1428377\" \"1428461\" \"1428741\" \"1428797\" \"1428863\" \"1428953\" \"1428971\"\n[7022] \"1429025\" \"1429155\" \"1429183\" \"1429243\" \"1429375\" \"1429423\" \"1429437\"\n[7029] \"1429467\" \"1429639\" \"1429713\" \"1429755\" \"1429759\" \"1429819\" \"1429923\"\n[7036] \"1429931\" \"1429939\" \"1429951\" \"1429955\" \"1429961\" \"1429977\" \"1430069\"\n[7043] \"1430181\" \"1430203\" \"1430205\" \"1430259\" \"1430283\" \"1430301\" \"1430359\"\n[7050] \"1430361\" \"1430391\" \"1430413\" \"1430425\" \"1430435\" \"1430443\" \"1430583\"\n[7057] \"1430591\" \"1430599\" \"1430603\" \"1430643\" \"1430649\" \"1430661\" \"1430673\"\n[7064] \"1430683\" \"1430689\" \"1430761\" \"1430763\" \"1430817\" \"1430865\" \"1430881\"\n[7071] \"1430885\" \"1430905\" \"1431007\" \"1431029\" \"1431073\" \"1431077\" \"1431085\"\n[7078] \"1431127\" \"1431147\" \"1431159\" \"1431229\" \"1431241\" \"1431267\" \"1431285\"\n[7085] \"1431349\" \"1431385\" \"1431447\" \"1431459\" \"1431477\" \"1431491\" \"1431671\"\n[7092] \"1431717\" \"1431735\" \"1432141\" \"1432253\" \"1432389\" \"1432497\" \"1432563\"\n[7099] \"1432587\" \"1432591\" \"1432619\" \"1432625\" \"1432657\" \"1432691\" \"1432751\"\n[7106] \"1432783\" \"1432801\" \"1432811\" \"1432901\" \"1433061\" \"1433141\" \"1433229\"\n[7113] \"1433231\" \"1433237\" \"1433261\" \"1433399\" \"1433401\" \"1433479\" \"1433493\"\n[7120] \"1433535\" \"1433563\" \"1433567\" \"1433597\" \"1433619\" \"1433639\" \"1433663\"\n[7127] \"1433699\" \"1433729\" \"1433745\" \"1433895\" \"1433897\" \"1433961\" \"1433977\"\n[7134] \"1433999\" \"1434079\" \"1434121\" \"1434139\" \"1434193\" \"1434213\" \"1434215\"\n[7141] \"1434249\" \"1434267\" \"1434325\" \"1434341\" \"1434343\" \"1434349\" \"1434411\"\n[7148] \"1434417\" \"1434421\" \"1434423\" \"1434441\" \"1434467\" \"1434567\" \"1434929\"\n[7155] \"1434933\" \"1434965\" \"1434977\" \"1434989\" \"1434993\" \"1435007\" \"1435041\"\n[7162] \"1435059\" \"1435067\" \"1435139\" \"1435153\" \"1435169\" \"1435173\" \"1435177\"\n[7169] \"1435181\" \"1435189\" \"1435193\" \"1435205\" \"1435261\" \"1435279\" \"1435291\"\n[7176] \"1435295\" \"1435301\" \"1435311\" \"1435321\" \"1435341\" \"1435343\" \"1435369\"\n[7183] \"1435373\" \"1435375\" \"1435377\" \"1435397\" \"1435421\" \"1435499\" \"1435503\"\n[7190] \"1435571\" \"1435579\" \"1435601\" \"1435709\" \"1435717\" \"1435799\" \"1435833\"\n[7197] \"1435897\" \"1436037\" \"1436039\" \"1436047\" \"1436083\" \"1436095\" \"1436151\"\n[7204] \"1436153\" \"1436161\" \"1436163\" \"1436253\" \"1436349\" \"1436361\" \"1436388\"\n[7211] \"1436669\" \"1436671\" \"1436719\" \"1436807\" \"1436809\" \"1436861\" \"1436973\"\n[7218] \"1437053\" \"1437189\" \"1437239\" \"1437293\" \"1437297\" \"1437317\" \"1437335\"\n[7225] \"1437377\" \"1437387\" \"1437389\" \"1437435\" \"1437463\" \"1437479\" \"1437519\"\n[7232] \"1437635\" \"1437669\" \"1437715\" \"1437941\" \"1437985\" \"1437999\" \"1438051\"\n[7239] \"1438071\" \"1438119\" \"1438231\" \"1438261\" \"1438303\" \"1438317\" \"1438381\"\n[7246] \"1438401\" \"1438411\" \"1438449\" \"1438483\" \"1438485\" \"1438489\" \"1438545\"\n[7253] \"1438647\" \"1438679\" \"1438787\" \"1438931\" \"1438947\" \"1438959\" \"1438961\"\n[7260] \"1439009\" \"1439035\" \"1439201\" \"1439265\" \"1439275\" \"1439305\" \"1439351\"\n[7267] \"1439389\" \"1439405\" \"1439559\" \"1439585\" \"1439669\" \"1439707\" \"1439731\"\n[7274] \"1439733\" \"1439755\" \"1439761\" \"1439769\" \"1439803\" \"1439805\" \"1439911\"\n[7281] \"1439981\" \"1440051\" \"1440057\" \"1440233\" \"1440325\" \"1440415\" \"1440483\"\n[7288] \"1440525\" \"1440547\" \"1440563\" \"1440643\" \"1440887\" \"1440919\" \"1440931\"\n[7295] \"1440959\" \"1440985\" \"1441077\" \"1441079\" \"1441083\" \"1441109\" \"1441119\"\n[7302] \"1441139\" \"1441153\" \"1441165\" \"1441209\" \"1441235\" \"1441265\" \"1441273\"\n[7309] \"1441305\" \"1441325\" \"1441331\" \"1441361\" \"1441387\" \"1441395\" \"1441425\"\n[7316] \"1441463\" \"1441477\" \"1441495\" \"1441499\" \"1441523\" \"1441531\" \"1441547\"\n[7323] \"1441561\" \"1441563\" \"1441581\" \"1441615\" \"1441631\" \"1441633\" \"1441639\"\n[7330] \"1441677\" \"1441697\" \"1441725\" \"1441727\" \"1441741\" \"1441749\" \"1441757\"\n[7337] \"1441779\" \"1441807\" \"1441815\" \"1441843\" \"1441893\" \"1441975\" \"1442151\"\n[7344] \"1442169\" \"1442309\" \"1442359\" \"1442387\" \"1442455\" \"1442481\" \"1442497\"\n[7351] \"1442673\" \"1442677\" \"1442763\" \"1442773\" \"1442829\" \"1442885\" \"1442895\"\n[7358] \"1442923\" \"1442993\" \"1443005\" \"1443013\"\n\n\n\nvertex_attr_names(g_africa)\n\n[1] \"name\"       \"agglosName\" \"x\"          \"y\"          \"Pop2015\"   \n[6] \"ISO3\"       \"Region\"     \"Between\"    \"degree\"    \n\n\n\nedge_attr_names(g_africa)\n\n[1] \"l\"       \"h\"       \"time\"    \"timeU\"   \"timeUCB\" \"border\" \n\n\n\n3.2.1 Visualising the African road network as a spatial network\n\nplot(g_africa) \n\n\n\n\n\nV(g_africa)$size &lt;- 0.4*(V(g_africa)$Pop2015/100000)^0.4\n\nplot(g_africa, vertex.size=V(g_africa)$size, edge.arrow.size=.15, edge.arrow.width=.2, edge.curved=0.1, edge.width=1, edge.color =\"gray90\",\nvertex.color=\"red\", vertex.frame.color=\"red\",\nvertex.label=\" \", vertex.label.color=\"black\",\nvertex.label.cex=.65)"
  },
  {
    "objectID": "african-network.html#experiments",
    "href": "african-network.html#experiments",
    "title": "3  The African road network",
    "section": "3.3 Experiments",
    "text": "3.3 Experiments"
  },
  {
    "objectID": "african-network.html#network-metrics",
    "href": "african-network.html#network-metrics",
    "title": "3  The African road network",
    "section": "3.3 Network metrics",
    "text": "3.3 Network metrics\n\n3.3.1 Density\n\nedge_density(g_africa, loops=FALSE)\n\n[1] 0.0003381142\n\n\n\n\n3.3.2 Reciprocity\n\nreciprocity(g_africa)\n\n[1] 1\n\n\n\n\n3.3.3 Degree\n\n# Compute degree of the nodes given by v belonging to graph g_US, in this case the in-degree\ndeg &lt;- degree(g_africa, v=V(g_africa))\n\n# Produces histogram of the frequency of nodes with a certain in-degree\nhist(deg, breaks = 30, main=\"Histogram of node degree\")\n\n\n\n\n\nV(g_africa)$agglosName[degree(g_africa)==max(degree(g_africa))]\n\n[1] \"Duduza Central\"\n\nV(g_africa)$name[degree(g_africa)==max(degree(g_africa))]\n\n[1] \"2896\"\n\n\n\ndegree(g_africa, v=c(\"2896\"), mode=\"in\")\n\n2896 \n  13 \n\n\n\n\n3.3.4 Distances\n\nshortest_paths(g_africa, \nfrom = V(g_africa)$agglosName==\"Cairo\",\nto = V(g_africa)$agglosName==\"Lagos\",\nweights=NA, #If weights=NULL and the graph has a weight edge attribute, then the weigth attribute is used. If this is NA then no weights are used (even if the graph has a weight attribute)\noutput = \"both\") # outputs both path nodes and edges\n\n$vpath\n$vpath[[1]]\n+ 59/7361 vertices, named, from 9bfe4aa:\n [1] 2320    8796    1023674 1015370 1299090 1299093 1301757 1057349 1308445\n[10] 1326309 1319765 1319556 1140285 384     1322302 1322301 1305663 1082455\n[19] 1128117 1097655 1083037 1101127 1101105 1111692 1099482 1099481 1057687\n[28] 1069131 1066967 1066959 1180969 1127095 8328    1288    234     8290   \n[37] 1057841 1935    2828    2865    6741    3183    6569    2811    1189414\n[46] 1072547 7803    1113823 49      5048    2507    1120071 7367    1336325\n[55] 1297437 1297438 1454    5480    5199   \n\n\n$epath\n$epath[[1]]\n+ 58/9159 edges from 9bfe4aa (vertex names):\n [1] 2320   --8796    8796   --1023674 1015370--1023674 1015370--1299090\n [5] 1299090--1299093 1299093--1301757 1057349--1301757 1057349--1308445\n [9] 1308445--1326309 1319765--1326309 1319556--1319765 1140285--1319556\n[13] 384    --1140285 384    --1322302 1322301--1322302 1305663--1322301\n[17] 1082455--1305663 1082455--1128117 1097655--1128117 1083037--1097655\n[21] 1083037--1101127 1101105--1101127 1101105--1111692 1099482--1111692\n[25] 1099481--1099482 1057687--1099481 1057687--1069131 1066967--1069131\n[29] 1066959--1066967 1066959--1180969 1127095--1180969 8328   --1127095\n[33] 8328   --1288    234    --1288    8290   --234     8290   --1057841\n[37] 1935   --1057841 1935   --2828    2865   --2828    6741   --2865   \n+ ... omitted several edges\n\n\n$predecessors\nNULL\n\n$inbound_edges\nNULL\n\n\n\ndiameter(g_africa, directed=TRUE, weights=NA)\n\n[1] 138\n\n\n\nmean_distance(g_africa, directed=TRUE, weights=NA)\n\n[1] 55.8602\n\n\n\n\n3.3.5 Centrality\n\n\n3.3.6 Hubs and authorities"
  },
  {
    "objectID": "percolation.html#introduction",
    "href": "percolation.html#introduction",
    "title": "4  Percolation theory",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\n\n4.1.1 Percolation based on nodes\n\n\n4.1.2 Percolation based on edges"
  },
  {
    "objectID": "percolation.html#uncovering-hierarchical-structures",
    "href": "percolation.html#uncovering-hierarchical-structures",
    "title": "4  Percolation theory",
    "section": "4.2 Uncovering hierarchical structures",
    "text": "4.2 Uncovering hierarchical structures"
  },
  {
    "objectID": "percolation.html#measuring-network-robustness",
    "href": "percolation.html#measuring-network-robustness",
    "title": "4  Percolation theory",
    "section": "4.3 Measuring network robustness",
    "text": "4.3 Measuring network robustness"
  },
  {
    "objectID": "percolation.html#uncovering-the-hierarchical-structure-of-the-african-road-network",
    "href": "percolation.html#uncovering-the-hierarchical-structure-of-the-african-road-network",
    "title": "4  Percolation theory",
    "section": "4.2 Uncovering the hierarchical structure of the African road network",
    "text": "4.2 Uncovering the hierarchical structure of the African road network"
  }
]