# Percolation theory

## Dependencies

We first load all the libraries required for this section.

```{r}
#| warning: false
# Load required packages
library(igraph)    # for network analysis
library(ggplot2)
library(ggraph)
library(patchwork)
library(tidygraph)
library(RColorBrewer)
library(rnaturalearth)
library(sf)
```


## Introduction

The term percolation normally refers to the process whereby a fluid moves slowly through a porous material, for example, the percolation of rain water through rocks gives rise to aquifers. The study and modelling of this infiltration process in physics, chemistry and material science is known as percolation theory. If you think about it, a rock can be modelled as a three-dimensional lattice (if the rock was cube-shaped, this lattice would be like a Rubik cube but instead of being $3 \times 3\times 3$, it is $n\times n \times n$). Then, the pores in the rock would be represented by "open sites" in this lattice (this would correspond to missing pieces in the Rubik cube) and the bits of the rock where there is material and therefore, no chance for the water to go through, would be represented by "closed sites" (this would correspond to pieces in the Rubik cube that are actually present). A typical question in percolation theory would then be as follows. If sites may be open with probability $p$ or closed with probability $1-p$ and these probabilities are assumed to be independent for each site, what is the probability that the water can go through the top to the bottom of the rock for a given value of $p$?

In recent decades, the mathematical study of percolation has been applied in a more general way, to understand the behavior of connected clusters or pathways in any system that can be modelled as a lattice or as a network. While the formulation of the percolation models varies slightly from lattices to networks, it follows the same principles. For example, let's consider the spread of a certain pandemic, where contagion between two humans may take place with probability $p$ if an infected individual spends more than 10 minutes at less than 2 meters away from a healthy one. Then, we can think of the pandemic as a fluid moving slowly, but instead of going through a porous rock, it goes through a social network of people. The people can be modelled as the nodes of the social network, and edges are present between two individuals if they spend long enough in close physical contact. Then, each edge or connection has an associated probability of contagion $p$. Applying percolation theory, we could answer the question of "what are the chances that the pandemic makes its way from city A to city B given the structure of the network and the fact that the probability of contagion is $p$?"

Percolation theory can therefore be used in a variety of contexts to better understand the properties of a system characterised by the connections between its components. Here, we use percolation models to improve our understanding of the structure and resilience of the African road network.

As before, we start by loading the data corresponding to the nodes and edges of the African road network:

```{r}
# Read edge and node data from URLs
df_edges <- read.csv("https://raw.githubusercontent.com/rafaelprietocuriel/AfricanUrbanNetwork/main/AfricaNetworkEdges.csv")
df_nodes <- read.csv("https://raw.githubusercontent.com/rafaelprietocuriel/AfricanUrbanNetwork/main/AfricaNetworkNodes.csv", encoding='UTF-8')
```

In order to ensure timely completion of this workshop, we will use a subset of the African network, specifically focusing on nodes from the South region. This adjustment is necessary as running the code on the entire network would exceed the allocated time frame. However, you are encouraged to explore running the code on the complete network at your own convenience.

We start by selecting the nodes belonging to the South region. This can be easily done with the `subset()` function.

```{r}
# Filter the data frame df_nodes to only include rows where the 'Region' column is equal to "South"
df_nodes <- subset(df_nodes, Region == "South")
```

Similarly, we can select the only the edges where both extrema are nodes belongin to the South region.

```{r}
# Filter the data frame df_edges to only include rows where the 'from' column is in the list of Agglomeration_ID values from df_nodes
df_edges <- subset(df_edges, from %in% df_nodes$Agglomeration_ID)

# Filter the data frame df_edges to only include rows where the 'to' column is in the list of Agglomeration_ID values from df_nodes
df_edges <- subset(df_edges, to %in% df_nodes$Agglomeration_ID)
```

Like before, we can create an undirected graph from the redefined data frames of nodes and edges.

```{r}
# Create an undirected graph 'G' from a data frame 'df_edges' representing edges and a data frame 'df_nodes' representing vertices
G <- graph_from_data_frame(d = df_edges,
                           vertices = df_nodes,
                           directed = FALSE)
```

We can visualise this sub-network by running the code below. Note that instead of using the base R function `plot()`, we are now using `ggraph`, which is an R package used for creating and visualising graphs and networks. It is built on top of the popular `ggplot2` package, which is used for creating a wider range of statistical graphics in R.

```{r}
V(G)$size <- 0.5*(V(G)$Pop2015/10000)^0.4

custom_layout <- data.frame(
name = V(G)$name,  # Node names from the graph
x = df_nodes$x,  # Custom x-coordinates
y = df_nodes$y   # Custom y-coordinates
)

# Plot the graph 'G_' with specific visual attributes
plotG <- ggraph(as_tbl_graph(G), custom_layout) +
  geom_edge_link() +
  geom_node_point(aes(colour="red", size=V(G)$size)) +
  theme(legend.position = "none") +
  coord_fixed()

plotG
```

The countries belonging to the South region are Botswana, Eswatini, Lesotho, Namibia, South Africa. To give more geographical context to the above visualisation, we will add the outlines of these countries as a base layer for this plot. The shapes for the world countries can be downloaded as simple feature objects (similar to a data frame but it also includes geographic information) using the `ne_download` function from the `rnaturalearth` package. We store the simple feature in the variable `world`, which we then filter to include only the countries of interest.

```{r}

world <- ne_download(scale = "small", category = "cultural", type = "admin_0_countries", returnclass = "sf")
target_countries <- c("Botswana", "eSwatini", "Lesotho", "Namibia", "South Africa")
world_subset <- world[world$SOVEREIGNT %in% target_countries, ]
```
The plot from above can be modified to also include the base layer

```{r}
# Plot the graph 'G' with specific visual attributes
plotG <- ggraph(as_tbl_graph(G), custom_layout) +
  geom_edge_link() +
  geom_node_point(aes(colour="red", size=V(G)$size)) +
  theme(legend.position = "none") +
  geom_sf(data = world_subset, fill = NA, color = "black") 

plotG
```

## Modelling community formation in the African road network

At the end of the previous session, we used the fast greedy algorithm to detect communities based on the topology of the African road network. We used an R implementation of the fast greedy algorithm through the built-in function `cluter_fast_greedy()`. While a built-in function gives us results in a very straightforward way, it also makes the process less transparent. In this section, we implement a percolation theory approach to model the formation of communities of nodes (cities) as the connectivity properties of the network are varied.

### Percolation at three threshold values

Following a percolation approach, we start with the original network representing the cities and roads of Southern Africa, but with no edges. Then, we add back edges according to whether they satisfy certain criterion. In this case, an edge is added back if the time to travel from one end to the other considering the presence of a border is below a critical value (i.e. if the attribute `timeUCB` is below a certain threshold value). Below, we perform this process for three different values of the threshold value, which are 60, 120 and 180 minutes.

```{r}

df_nodes_perco_60 <- df_nodes
df_edges_perco_60 <- subset(df_edges, timeUCB < 60)

G_perco_60 <- graph_from_data_frame(d = df_edges_perco_60,
                         vertices = df_nodes_perco_60,
                         directed = FALSE)

```

```{r}

df_nodes_perco_120 <- df_nodes
df_edges_perco_120 <- subset(df_edges, timeUCB < 120)

G_perco_120 <- graph_from_data_frame(d = df_edges_perco_120,
                         vertices = df_nodes_perco_120,
                         directed = FALSE)

```

```{r}

df_nodes_perco_180 <- df_nodes
df_edges_perco_180 <- subset(df_edges, timeUCB < 180)

G_perco_180 <- graph_from_data_frame(d = df_edges_perco_180,
                         vertices = df_nodes_perco_180,
                         directed = FALSE)

```


### Visualising the results

We also obtain visualisations for the three critical travel times. In these visualisations, we color the nodes so that nodes belonging to the same connected component share the same color. A connected component is a group of nodes where you can travel from any node to any other node by following the edges. We store the visualisations for each of the three critical travel times in the variables `plot_60`, `plot_120` and `plot_180`. Then, we plot them together using the `patchwork` package, which allows to create figures with several plots simply by running `plot_60 + plot_120 + plot_180`.

```{r}

# Find connected components
component_info_60 <- components(G_perco_60)

# Create a data frame with node names and corresponding colors
df_nodes_perco_60$component_ID = component_info_60$membership

# Define a color palette for connected components (replace with your own colors)
component_colors_60 <- sample(rainbow(component_info_60$no), replace=FALSE)

# Assign colors to nodes based on connected component
node_colors_60 <- component_colors_60[component_info_60$membership]

# Create a data frame with node names and corresponding colors
df_nodes_perco_60$color = node_colors_60

df_nodes_perco_60$degree = degree(G_perco_60)

df_nodes_perco_60$color[df_nodes_perco_60$degree == 0] <- "gray"

V(G_perco_60)$size <- 0.5*(V(G_perco_60)$Pop2015/10000)^0.4

custom_layout <- data.frame(
name = V(G_perco_60)$name,  # Node names from the graph
x = df_nodes_perco_60$x,  # Custom x-coordinates
y = df_nodes_perco_60$y   # Custom y-coordinates
)

# Plot the graph 'G_' with specific visual attributes
plot_60 <- ggraph(as_tbl_graph(G_perco_60), custom_layout) +
  geom_edge_link() +
  geom_node_point(aes(color = factor(df_nodes_perco_60$color), 
                      size = V(G_perco_60)$size)) +
                  scale_color_identity() +
                  theme(legend.position = "none") +
  geom_sf(data = world_subset, fill = NA, color = "black")

```

```{r}

# Find connected components
component_info_120 <- components(G_perco_120)

# Create a data frame with node names and corresponding colors
df_nodes_perco_120$component_ID = component_info_120$membership

# Define a color palette for connected components (replace with your own colors)
component_colors_120 <- sample(rainbow(component_info_120$no), replace=FALSE)

# Assign colors to nodes based on connected component
node_colors_120 <- component_colors_120[component_info_120$membership]

# Create a data frame with node names and corresponding colors
df_nodes_perco_120$color = node_colors_120

df_nodes_perco_120$degree = degree(G_perco_120)

df_nodes_perco_120$color[df_nodes_perco_120$degree == 0] <- "gray"

V(G_perco_120)$size <- 0.5*(V(G_perco_120)$Pop2015/10000)^0.4

custom_layout <- data.frame(
name = V(G_perco_120)$name,  # Node names from the graph
x = df_nodes_perco_120$x,  # Custom x-coordinates
y = df_nodes_perco_120$y   # Custom y-coordinates
)

# Plot the graph 'G_' with specific visual attributes
plot_120 <- ggraph(as_tbl_graph(G_perco_120), custom_layout) +
  geom_edge_link() +
  geom_node_point(aes(color = factor(df_nodes_perco_120$color), 
                      size = V(G_perco_120)$size)) +
                  scale_color_identity() +
                  theme(legend.position = "none") +
  geom_sf(data = world_subset, fill = NA, color = "black")

```

```{r}
# Find connected components
component_info_180 <- components(G_perco_180)

# Create a data frame with node names and corresponding colors
df_nodes_perco_180$component_ID = component_info_180$membership

# Define a color palette for connected components (replace with your own colors)
component_colors_180 <- sample(rainbow(component_info_180$no), replace=FALSE)

# Assign colors to nodes based on connected component
node_colors_180 <- component_colors_180[component_info_180$membership]

# Create a data frame with node names and corresponding colors
df_nodes_perco_180$color = node_colors_180

df_nodes_perco_180$degree = degree(G_perco_180)

df_nodes_perco_180$color[df_nodes_perco_180$degree == 0] <- "gray"

V(G_perco_180)$size <- 0.5*(V(G_perco_180)$Pop2015/10000)^0.4

custom_layout <- data.frame(
name = V(G_perco_180)$name,  # Node names from the graph
x = df_nodes_perco_180$x,  # Custom x-coordinates
y = df_nodes_perco_180$y   # Custom y-coordinates
)

# Plot the graph 'G_' with specific visual attributes
plot_180 <- ggraph(as_tbl_graph(G_perco_180), custom_layout) +
  geom_edge_link() +
  geom_node_point(aes(color = factor(df_nodes_perco_180$color), 
                      size = V(G_perco_180)$size)) +
                  scale_color_identity() +
                  theme(legend.position = "none") +
  geom_sf(data = world_subset, fill = NA, color = "black")

```

```{r}
plot_60 + plot_120 + plot_180
```


## Analysing network resilience

A percolation theory approach can help us understand how a network responds to the removal of its components. Typically, a percolation algorithm or process is run where in each iteration, the value of a percolation parameter that controls the removal of nodes or edges is updated, and nodes or edges are removed accordingly. In each iteration, key resilience metrics are measured. One of the most used resilience metrics is the number of nodes in the largest connected component after the removal of nodes or edges. This metric is known as the size of the giant connected component (GCC). In many cases, we observe that for certain values of the percolation parameter, abrupt changes occur in the size of the GCC, showing that some sort of failure occurs in the network that qualitatively changes its connectivity structure. 

Below we demonstrate this type of analysis. Our percolation parameter of choice is the time of travel through each edge taking into account the presence of borders. Remember, this variable is encoded by the `timeUCB` field in the `df_edges` data frame. In each iteration of the percolation process, edges with `timeUCB` above the value of the percolation parameter are removed from the network.

### The percolation algorithm

We start by creating some empty data structures where we will be storing information about the network and the percolation parameter in each iteration of our percolation algorithm. This will help us analyse the results later on. To do this we create four empty lists, where we will store the value of the percolation parameter in each iteration, the size of the GCC, the number of connected components and the average time to travel between any pair of nodes. By the end of the percolation process, these lists will contain $n_{iterations}$ elements each.

```{r}
# Create empty lists to store thresholds, gccs, and ncs
thresholds <- list()
gccs <- list()
ncs <- list()
times <- list()
```

Then, we are ready to perform the percolation algorithm. Look at the comments in each line of code to understand what we do at each step.

```{r}

# Iterate over thresholds
for (i in seq(0, max(df_edges$timeUCB))) {
  
  df_nodes_perco <- df_nodes
  df_edges_perco <- subset(df_edges, timeUCB < i)

  G_perco <- graph_from_data_frame(d = df_edges_perco,
                         vertices = df_nodes_perco,
                         directed = FALSE)
  
  # Get connected components of the modified graph G_
  connected_components <- components(G_perco)

  # Append the current threshold value to the 'thresholds' list
  thresholds <- append(thresholds, i)
  
  # Append the maximum connected component size to the 'gccs' list
  gccs <- append(gccs, max(connected_components$csize))
  
  # Append the number of connected components to the 'ncs' list
  ncs <- append(ncs, connected_components$no)
  
  times <- append(times, mean_distance(G_perco, directed=FALSE, weights=df_edges_perco$timeUCB))
}

# Display the first few rows of the 'components' data frame
head(components)
```

### Changes in the size of the giant connected component as edges are removed

Once the algorithm is done running, we can plot the size of the GCC as the value of the percolation parameter is varied.

```{r}
# Plot the threshold values on the x-axis and the maximum connected component sizes (gccs) on the y-axis
plot(thresholds, gccs)
```

We observe that for small values of `timeUCB` rapid changes occur in the size of the GCC. When `timeUCB` takes approximately the values X, y ,z, there are sudden changes in the size of the GCC, showing that there has been a significant alteration in the network's topology. For example, when eges are removed, nodes that act like hubs may lose connections and as a result, the GCC may experience a significant drop in size.

### Changes in the number of connected components as edges are removed

We can also plot the number of connected components as the value of the percolation parameter is varied.

```{r}
# Plot the threshold values on the x-axis and the number of connected components (ncs) on the y-axis
plot(thresholds, ncs)
```


### Changes in the average travel time as edges are removed

Finally, we plot the average time to travel between any pair of nodes as the value of the percolation parameter is varied.

```{r}
# Plot the threshold values on the x-axis and the number of connected components (ncs) on the y-axis
plot(thresholds, times)
```
